
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Aug 15 02:42:46 CEST 2013
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Aug 15 02:42:46 CEST 2013
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\052\002\000\002\053" +
    "\002\000\002\057\002\000\002\002\013\000\002\003\003" +
    "\000\002\004\004\000\002\004\002\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\006\000\002" +
    "\006\005\000\002\007\005\000\002\007\003\000\002\010" +
    "\005\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\005\000\002\014\005\000" +
    "\002\014\003\000\002\013\003\000\002\013\005\000\002" +
    "\060\002\000\002\015\012\000\002\061\002\000\002\015" +
    "\014\000\002\016\003\000\002\016\003\000\002\021\003" +
    "\000\002\017\004\000\002\017\002\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\051\003\000\002" +
    "\022\004\000\002\022\002\000\002\062\002\000\002\023" +
    "\016\000\002\063\002\000\002\064\002\000\002\023\017" +
    "\000\002\025\004\000\002\025\002\000\002\025\004\000" +
    "\002\025\003\000\002\026\003\000\002\024\003\000\002" +
    "\024\002\000\002\024\005\000\002\024\003\000\002\027" +
    "\006\000\002\027\004\000\002\044\004\000\002\044\002" +
    "\000\002\045\003\000\002\045\003\000\002\047\010\000" +
    "\002\047\012\000\002\047\010\000\002\050\012\000\002" +
    "\050\005\000\002\050\010\000\002\050\010\000\002\050" +
    "\010\000\002\050\012\000\002\050\005\000\002\050\005" +
    "\000\002\050\006\000\002\050\010\000\002\050\014\000" +
    "\002\050\004\000\002\054\002\000\002\055\002\000\002" +
    "\056\002\000\002\046\005\000\002\046\004\000\002\046" +
    "\004\000\002\046\006\000\002\046\005\000\002\036\005" +
    "\000\002\036\003\000\002\031\005\000\002\031\003\000" +
    "\002\032\005\000\002\032\003\000\002\033\003\000\002" +
    "\033\005\000\002\034\003\000\002\034\004\000\002\035" +
    "\005\000\002\035\003\000\002\042\005\000\002\042\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\005\000" +
    "\002\043\003\000\002\043\003\000\002\043\007\000\002" +
    "\043\004\000\002\043\006\000\002\043\005\000\002\043" +
    "\003\000\002\030\006\000\002\030\005\000\002\030\003" +
    "\000\002\030\006\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\040\003\000\002\040\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\004\004\005\001\002\000\004\002\371\001" +
    "\002\000\004\054\006\001\002\000\012\005\ufffc\006\ufffc" +
    "\042\ufffc\054\ufffc\001\002\000\012\005\000\006\000\042" +
    "\000\054\000\001\002\000\012\005\ufffa\006\ufffa\042\ufffa" +
    "\054\ufffa\001\002\000\012\005\022\006\021\042\014\054" +
    "\015\001\002\000\004\054\334\001\002\000\012\005\ufffb" +
    "\006\ufffb\042\ufffb\054\ufffb\001\002\000\010\011\uffda\043" +
    "\uffda\054\uffda\001\002\000\050\021\uffdc\022\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\030\uffdc\031\uffdc\034\uffdc\035\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\041\uffdc\044\uffdc\045\uffdc\046\uffdc" +
    "\050\uffdc\051\uffdc\054\uffdc\001\002\000\012\005\ufff8\006" +
    "\ufff8\042\ufff8\054\ufff8\001\002\000\012\005\ufff7\006\ufff7" +
    "\042\ufff7\054\ufff7\001\002\000\012\005\ufff9\006\ufff9\042" +
    "\ufff9\054\ufff9\001\002\000\004\054\043\001\002\000\006" +
    "\003\024\054\015\001\002\000\004\054\027\001\002\000" +
    "\004\046\025\001\002\000\012\005\ufff5\006\ufff5\042\ufff5" +
    "\054\ufff5\001\002\000\006\046\ufff3\051\ufff3\001\002\000" +
    "\004\020\034\001\002\000\006\046\032\051\031\001\002" +
    "\000\004\054\027\001\002\000\012\005\ufff6\006\ufff6\042" +
    "\ufff6\054\ufff6\001\002\000\006\046\ufff4\051\ufff4\001\002" +
    "\000\012\053\036\055\035\056\041\057\040\001\002\000" +
    "\006\046\ufff0\051\ufff0\001\002\000\006\046\ufff1\051\ufff1" +
    "\001\002\000\006\046\ufff2\051\ufff2\001\002\000\006\046" +
    "\uffee\051\uffee\001\002\000\006\046\uffef\051\uffef\001\002" +
    "\000\006\007\044\042\000\001\002\000\006\007\uffe2\042" +
    "\uffe2\001\002\000\006\003\352\054\353\001\002\000\004" +
    "\042\046\001\002\000\012\003\uffe0\011\uffe0\043\uffe0\054" +
    "\uffe0\001\002\000\012\003\051\011\055\043\053\054\015" +
    "\001\002\000\004\054\326\001\002\000\012\003\uffdd\011" +
    "\uffdd\043\uffdd\054\uffdd\001\002\000\012\003\uffdf\011\uffdf" +
    "\043\uffdf\054\uffdf\001\002\000\012\005\uffe8\006\uffe8\042" +
    "\uffe8\054\uffe8\001\002\000\012\003\uffde\011\uffde\043\uffde" +
    "\054\uffde\001\002\000\004\054\uffd7\001\002\000\012\003" +
    "\uffe1\011\uffe1\043\uffe1\054\uffe1\001\002\000\004\054\060" +
    "\001\002\000\004\047\uffd0\001\002\000\004\047\062\001" +
    "\002\000\010\003\064\050\uffce\054\015\001\002\000\004" +
    "\054\323\001\002\000\006\050\uffcc\051\321\001\002\000" +
    "\006\050\uffcf\051\316\001\002\000\004\050\067\001\002" +
    "\000\010\003\000\042\000\054\000\001\002\000\010\003" +
    "\071\042\uffd3\054\uffd3\001\002\000\010\042\uffd1\046\315" +
    "\054\uffd1\001\002\000\006\042\073\054\015\001\002\000" +
    "\030\003\uffc8\010\uffc8\013\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\032\uffc8\033\uffc8\042\uffc8\043\uffc8\054\uffc8\001\002\000" +
    "\006\042\uffd4\054\uffd4\001\002\000\030\003\107\010\111" +
    "\013\104\015\077\016\113\017\114\032\110\033\076\042" +
    "\000\043\112\054\100\001\002\000\004\047\310\001\002" +
    "\000\004\047\301\001\002\000\060\020\uff94\021\uff94\022" +
    "\uff94\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94" +
    "\031\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041" +
    "\uff94\044\uff94\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94" +
    "\052\uff94\001\002\000\016\020\262\026\263\027\265\044" +
    "\165\047\266\052\167\001\002\000\030\003\uffc6\010\uffc6" +
    "\013\uffc6\015\uffc6\016\uffc6\017\uffc6\032\uffc6\033\uffc6\042" +
    "\uffc6\043\uffc6\054\uffc6\001\002\000\004\042\255\001\002" +
    "\000\004\047\242\001\002\000\030\003\uffc9\010\uffc9\013" +
    "\uffc9\015\uffc9\016\uffc9\017\uffc9\032\uffc9\033\uffc9\042\uffc9" +
    "\043\uffc9\054\uffc9\001\002\000\030\003\uffc7\010\uffc7\013" +
    "\uffc7\015\uffc7\016\uffc7\017\uffc7\032\uffc7\033\uffc7\042\uffc7" +
    "\043\uffc7\054\uffc7\001\002\000\004\046\241\001\002\000" +
    "\004\047\227\001\002\000\024\012\127\022\124\046\223" +
    "\047\141\053\131\054\100\055\133\056\142\057\125\001" +
    "\002\000\012\003\uffd6\011\uffd6\043\uffd6\054\uffd6\001\002" +
    "\000\004\042\117\001\002\000\004\046\115\001\002\000" +
    "\032\003\uffb6\010\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6" +
    "\017\uffb6\032\uffb6\033\uffb6\042\uffb6\043\uffb6\054\uffb6\001" +
    "\002\000\032\003\uffbc\010\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\017\uffbc\032\uffbc\033\uffbc\042\uffbc\043\uffbc\054" +
    "\uffbc\001\002\000\030\003\uffc8\010\uffc8\013\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\032\uffc8\033\uffc8\042\uffc8\043\uffc8\054" +
    "\uffc8\001\002\000\030\003\107\010\111\013\104\015\077" +
    "\016\113\017\114\032\110\033\076\042\000\043\121\054" +
    "\100\001\002\000\004\015\122\001\002\000\004\047\123" +
    "\001\002\000\022\012\127\022\124\047\141\053\131\054" +
    "\100\055\133\056\142\057\125\001\002\000\020\012\127" +
    "\047\141\053\131\054\100\055\133\056\142\057\125\001" +
    "\002\000\044\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d" +
    "\030\uff9d\031\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040" +
    "\uff9d\041\uff9d\045\uff9d\046\uff9d\050\uff9d\051\uff9d\001\002" +
    "\000\024\030\uffa8\031\uffa8\034\207\035\213\036\212\037" +
    "\214\040\210\041\211\050\uffa8\001\002\000\004\054\015" +
    "\001\002\000\052\021\uff97\022\uff97\023\uff97\024\uff97\025" +
    "\uff97\030\uff97\031\uff97\034\uff97\035\uff97\036\uff97\037\uff97" +
    "\040\uff97\041\uff97\044\165\045\uff97\046\uff97\047\166\050" +
    "\uff97\051\uff97\052\167\001\002\000\044\021\uffa0\022\uffa0" +
    "\023\uffa0\024\uffa0\025\uffa0\030\uffa0\031\uffa0\034\uffa0\035" +
    "\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\045\uffa0\046\uffa0" +
    "\050\uffa0\051\uffa0\001\002\000\006\031\161\050\160\001" +
    "\002\000\044\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c" +
    "\030\uff9c\031\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040" +
    "\uff9c\041\uff9c\045\uff9c\046\uff9c\050\uff9c\051\uff9c\001\002" +
    "\000\010\030\uffa9\031\uffa9\050\uffa9\001\002\000\044\021" +
    "\uffa3\022\uffa3\023\154\024\155\025\153\030\uffa3\031\uffa3" +
    "\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\045" +
    "\uffa3\046\uffa3\050\uffa3\051\uffa3\001\002\000\044\021\uffa1" +
    "\022\uffa1\023\uffa1\024\uffa1\025\uffa1\030\uffa1\031\uffa1\034" +
    "\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\045\uffa1" +
    "\046\uffa1\050\uffa1\051\uffa1\001\002\000\036\021\147\022" +
    "\150\030\uffa6\031\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6" +
    "\040\uffa6\041\uffa6\045\uffa6\046\uffa6\050\uffa6\051\uffa6\001" +
    "\002\000\010\030\145\031\uffab\050\uffab\001\002\000\022" +
    "\012\127\022\124\047\141\053\131\054\100\055\133\056" +
    "\142\057\125\001\002\000\044\021\uff9f\022\uff9f\023\uff9f" +
    "\024\uff9f\025\uff9f\030\uff9f\031\uff9f\034\uff9f\035\uff9f\036" +
    "\uff9f\037\uff9f\040\uff9f\041\uff9f\045\uff9f\046\uff9f\050\uff9f" +
    "\051\uff9f\001\002\000\004\050\144\001\002\000\044\021" +
    "\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\030\uff9e\031\uff9e" +
    "\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\045" +
    "\uff9e\046\uff9e\050\uff9e\051\uff9e\001\002\000\022\012\127" +
    "\022\124\047\141\053\131\054\100\055\133\056\142\057" +
    "\125\001\002\000\010\030\uffaa\031\uffaa\050\uffaa\001\002" +
    "\000\020\012\uff8c\047\uff8c\053\uff8c\054\uff8c\055\uff8c\056" +
    "\uff8c\057\uff8c\001\002\000\020\012\uff8b\047\uff8b\053\uff8b" +
    "\054\uff8b\055\uff8b\056\uff8b\057\uff8b\001\002\000\020\012" +
    "\127\047\141\053\131\054\100\055\133\056\142\057\125" +
    "\001\002\000\044\021\uffa4\022\uffa4\023\154\024\155\025" +
    "\153\030\uffa4\031\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4" +
    "\040\uffa4\041\uffa4\045\uffa4\046\uffa4\050\uffa4\051\uffa4\001" +
    "\002\000\020\012\uff88\047\uff88\053\uff88\054\uff88\055\uff88" +
    "\056\uff88\057\uff88\001\002\000\020\012\uff8a\047\uff8a\053" +
    "\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a\001\002\000\020" +
    "\012\uff89\047\uff89\053\uff89\054\uff89\055\uff89\056\uff89\057" +
    "\uff89\001\002\000\020\012\127\047\141\053\131\054\100" +
    "\055\133\056\142\057\125\001\002\000\044\021\uffa2\022" +
    "\uffa2\023\uffa2\024\uffa2\025\uffa2\030\uffa2\031\uffa2\034\uffa2" +
    "\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\045\uffa2\046" +
    "\uffa2\050\uffa2\051\uffa2\001\002\000\004\046\163\001\002" +
    "\000\022\012\127\022\124\047\141\053\131\054\100\055" +
    "\133\056\142\057\125\001\002\000\010\030\145\031\uffac" +
    "\050\uffac\001\002\000\032\003\uffb6\010\uffb6\013\uffb6\014" +
    "\uffb6\015\uffb6\016\uffb6\017\uffb6\032\uffb6\033\uffb6\042\uffb6" +
    "\043\uffb6\054\uffb6\001\002\000\032\003\uffb8\010\uffb8\013" +
    "\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\032\uffb8\033\uffb8" +
    "\042\uffb8\043\uffb8\054\uffb8\001\002\000\024\003\200\012" +
    "\127\022\124\047\141\053\131\054\100\055\133\056\142" +
    "\057\125\001\002\000\024\012\127\022\124\047\141\050" +
    "\173\053\131\054\100\055\133\056\142\057\125\001\002" +
    "\000\004\054\170\001\002\000\060\020\uff95\021\uff95\022" +
    "\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95" +
    "\031\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041" +
    "\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95" +
    "\052\uff95\001\002\000\006\050\uffad\051\uffad\001\002\000" +
    "\006\050\175\051\174\001\002\000\044\021\uff98\022\uff98" +
    "\023\uff98\024\uff98\025\uff98\030\uff98\031\uff98\034\uff98\035" +
    "\uff98\036\uff98\037\uff98\040\uff98\041\uff98\045\uff98\046\uff98" +
    "\050\uff98\051\uff98\001\002\000\022\012\127\022\124\047" +
    "\141\053\131\054\100\055\133\056\142\057\125\001\002" +
    "\000\044\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99\030" +
    "\uff99\031\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99" +
    "\041\uff99\045\uff99\046\uff99\050\uff99\051\uff99\001\002\000" +
    "\006\050\uffae\051\uffae\001\002\000\004\045\202\001\002" +
    "\000\004\045\201\001\002\000\060\020\uff93\021\uff93\022" +
    "\uff93\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93" +
    "\031\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\041" +
    "\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051\uff93" +
    "\052\uff93\001\002\000\060\020\uff96\021\uff96\022\uff96\023" +
    "\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96" +
    "\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96\044" +
    "\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96" +
    "\001\002\000\046\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025" +
    "\uff9a\030\uff9a\031\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a" +
    "\040\uff9a\041\uff9a\044\204\045\uff9a\046\uff9a\050\uff9a\051" +
    "\uff9a\001\002\000\022\012\127\022\124\047\141\053\131" +
    "\054\100\055\133\056\142\057\125\001\002\000\004\045" +
    "\206\001\002\000\044\021\uff9b\022\uff9b\023\uff9b\024\uff9b" +
    "\025\uff9b\030\uff9b\031\uff9b\034\uff9b\035\uff9b\036\uff9b\037" +
    "\uff9b\040\uff9b\041\uff9b\045\uff9b\046\uff9b\050\uff9b\051\uff9b" +
    "\001\002\000\022\012\uff92\022\uff92\047\uff92\053\uff92\054" +
    "\uff92\055\uff92\056\uff92\057\uff92\001\002\000\022\012\uff8e" +
    "\022\uff8e\047\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\057" +
    "\uff8e\001\002\000\022\012\uff8d\022\uff8d\047\uff8d\053\uff8d" +
    "\054\uff8d\055\uff8d\056\uff8d\057\uff8d\001\002\000\022\012" +
    "\uff90\022\uff90\047\uff90\053\uff90\054\uff90\055\uff90\056\uff90" +
    "\057\uff90\001\002\000\022\012\uff91\022\uff91\047\uff91\053" +
    "\uff91\054\uff91\055\uff91\056\uff91\057\uff91\001\002\000\022" +
    "\012\uff8f\022\uff8f\047\uff8f\053\uff8f\054\uff8f\055\uff8f\056" +
    "\uff8f\057\uff8f\001\002\000\022\012\127\022\124\047\141" +
    "\053\131\054\100\055\133\056\142\057\125\001\002\000" +
    "\010\030\uffa7\031\uffa7\050\uffa7\001\002\000\036\021\147" +
    "\022\150\030\uffa5\031\uffa5\034\uffa5\035\uffa5\036\uffa5\037" +
    "\uffa5\040\uffa5\041\uffa5\045\uffa5\046\uffa5\050\uffa5\051\uffa5" +
    "\001\002\000\012\003\uffff\011\uffff\043\uffff\054\uffff\001" +
    "\002\000\012\003\uffd5\011\uffd5\043\uffd5\054\uffd5\001\002" +
    "\000\004\046\225\001\002\000\032\003\uffb6\010\uffb6\013" +
    "\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\032\uffb6\033\uffb6" +
    "\042\uffb6\043\uffb6\054\uffb6\001\002\000\032\003\uffbb\010" +
    "\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\032\uffbb" +
    "\033\uffbb\042\uffbb\043\uffbb\054\uffbb\001\002\000\032\003" +
    "\uffb6\010\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6" +
    "\032\uffb6\033\uffb6\042\uffb6\043\uffb6\054\uffb6\001\002\000" +
    "\032\003\uffba\010\uffba\013\uffba\014\uffba\015\uffba\016\uffba" +
    "\017\uffba\032\uffba\033\uffba\042\uffba\043\uffba\054\uffba\001" +
    "\002\000\022\012\127\022\124\047\141\053\131\054\100" +
    "\055\133\056\142\057\125\001\002\000\006\050\232\051" +
    "\231\001\002\000\004\053\235\001\002\000\004\046\233" +
    "\001\002\000\032\003\uffb6\010\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\032\uffb6\033\uffb6\042\uffb6\043\uffb6" +
    "\054\uffb6\001\002\000\032\003\uffbe\010\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\032\uffbe\033\uffbe\042\uffbe" +
    "\043\uffbe\054\uffbe\001\002\000\004\050\236\001\002\000" +
    "\004\046\237\001\002\000\032\003\uffb6\010\uffb6\013\uffb6" +
    "\014\uffb6\015\uffb6\016\uffb6\017\uffb6\032\uffb6\033\uffb6\042" +
    "\uffb6\043\uffb6\054\uffb6\001\002\000\032\003\uffbd\010\uffbd" +
    "\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\032\uffbd\033" +
    "\uffbd\042\uffbd\043\uffbd\054\uffbd\001\002\000\032\003\uffb7" +
    "\010\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\032" +
    "\uffb7\033\uffb7\042\uffb7\043\uffb7\054\uffb7\001\002\000\022" +
    "\012\127\022\124\047\141\053\131\054\100\055\133\056" +
    "\142\057\125\001\002\000\006\031\161\050\244\001\002" +
    "\000\026\003\107\010\111\013\104\015\077\016\113\017" +
    "\114\032\110\033\076\042\000\054\100\001\002\000\032" +
    "\003\uffc6\010\uffc6\013\uffc6\014\250\015\uffc6\016\uffc6\017" +
    "\uffc6\032\uffc6\033\uffc6\042\uffc6\043\uffc6\054\uffc6\001\002" +
    "\000\030\003\uffb6\010\uffb6\013\uffb6\015\uffb6\016\uffb6\017" +
    "\uffb6\032\uffb6\033\uffb6\042\uffb6\043\uffb6\054\uffb6\001\002" +
    "\000\030\003\uffc5\010\uffc5\013\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\032\uffc5\033\uffc5\042\uffc5\043\uffc5\054\uffc5\001\002" +
    "\000\026\003\107\010\111\013\104\015\077\016\113\017" +
    "\114\032\110\033\076\042\000\054\100\001\002\000\032" +
    "\003\uffb6\010\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017" +
    "\uffb6\032\uffb6\033\uffb6\042\uffb6\043\uffb6\054\uffb6\001\002" +
    "\000\030\003\uffb6\010\uffb6\013\uffb6\015\uffb6\016\uffb6\017" +
    "\uffb6\032\uffb6\033\uffb6\042\uffb6\043\uffb6\054\uffb6\001\002" +
    "\000\030\003\uffc4\010\uffc4\013\uffc4\015\uffc4\016\uffc4\017" +
    "\uffc4\032\uffc4\033\uffc4\042\uffc4\043\uffc4\054\uffc4\001\002" +
    "\000\032\003\uffc2\010\uffc2\013\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\032\uffc2\033\uffc2\042\uffc2\043\uffc2\054\uffc2" +
    "\001\002\000\030\003\uffc8\010\uffc8\013\uffc8\015\uffc8\016" +
    "\uffc8\017\uffc8\032\uffc8\033\uffc8\042\uffc8\043\uffc8\054\uffc8" +
    "\001\002\000\030\003\107\010\111\013\104\015\077\016" +
    "\113\017\114\032\110\033\076\042\000\043\uffff\054\100" +
    "\001\002\000\004\043\260\001\002\000\032\003\uffb4\010" +
    "\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\032\uffb4" +
    "\033\uffb4\042\uffb4\043\uffb4\054\uffb4\001\002\000\032\003" +
    "\uffb9\010\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9" +
    "\032\uffb9\033\uffb9\042\uffb9\043\uffb9\054\uffb9\001\002\000" +
    "\022\012\127\022\124\047\141\053\131\054\100\055\133" +
    "\056\142\057\125\001\002\000\004\046\uffb6\001\002\000" +
    "\004\046\275\001\002\000\004\046\uffb6\001\002\000\024" +
    "\012\127\022\124\047\141\050\270\053\131\054\100\055" +
    "\133\056\142\057\125\001\002\000\006\050\272\051\174" +
    "\001\002\000\004\046\uffb5\001\002\000\004\046\uffaf\001" +
    "\002\000\004\046\uffb5\001\002\000\004\046\uffb0\001\002" +
    "\000\004\046\uffb1\001\002\000\032\003\uffc1\010\uffc1\013" +
    "\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\032\uffc1\033\uffc1" +
    "\042\uffc1\043\uffc1\054\uffc1\001\002\000\004\046\uffb2\001" +
    "\002\000\004\046\uffb6\001\002\000\004\046\uffb3\001\002" +
    "\000\022\012\127\022\124\047\141\053\131\054\100\055" +
    "\133\056\142\057\125\001\002\000\006\031\161\050\303" +
    "\001\002\000\026\003\107\010\111\013\104\015\077\016" +
    "\113\017\114\032\110\033\076\042\000\054\100\001\002" +
    "\000\032\003\uffb6\010\uffb6\013\uffb6\014\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\032\uffb6\033\uffb6\042\uffb6\043\uffb6\054\uffb6" +
    "\001\002\000\030\003\uffb6\010\uffb6\013\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\032\uffb6\033\uffb6\042\uffb6\043\uffb6\054\uffb6" +
    "\001\002\000\030\003\uffc3\010\uffc3\013\uffc3\015\uffc3\016" +
    "\uffc3\017\uffc3\032\uffc3\033\uffc3\042\uffc3\043\uffc3\054\uffc3" +
    "\001\002\000\032\003\uffc0\010\uffc0\013\uffc0\014\uffc0\015" +
    "\uffc0\016\uffc0\017\uffc0\032\uffc0\033\uffc0\042\uffc0\043\uffc0" +
    "\054\uffc0\001\002\000\004\054\100\001\002\000\010\044" +
    "\165\050\312\052\167\001\002\000\004\046\313\001\002" +
    "\000\032\003\uffb6\010\uffb6\013\uffb6\014\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\032\uffb6\033\uffb6\042\uffb6\043\uffb6\054\uffb6" +
    "\001\002\000\032\003\uffbf\010\uffbf\013\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\032\uffbf\033\uffbf\042\uffbf\043\uffbf" +
    "\054\uffbf\001\002\000\006\042\uffd2\054\uffd2\001\002\000" +
    "\004\054\015\001\002\000\004\054\320\001\002\000\006" +
    "\050\uffcb\051\uffcb\001\002\000\004\054\015\001\002\000" +
    "\006\050\uffcd\051\316\001\002\000\006\050\uffca\051\uffca" +
    "\001\002\000\012\005\uffff\006\uffff\042\uffff\054\uffff\001" +
    "\002\000\012\005\uffe7\006\uffe7\042\uffe7\054\uffe7\001\002" +
    "\000\012\044\336\046\uffea\047\uffd0\051\uffea\001\002\000" +
    "\004\047\340\001\002\000\006\046\uffeb\051\uffeb\001\002" +
    "\000\006\046\333\051\332\001\002\000\004\054\334\001" +
    "\002\000\020\003\uffed\005\uffed\006\uffed\011\uffed\042\uffed" +
    "\043\uffed\054\uffed\001\002\000\010\044\336\046\uffea\051" +
    "\uffea\001\002\000\006\046\uffec\051\uffec\001\002\000\004" +
    "\045\337\001\002\000\006\046\uffe9\051\uffe9\001\002\000" +
    "\010\003\064\050\uffce\054\015\001\002\000\004\050\342" +
    "\001\002\000\010\003\000\042\000\054\000\001\002\000" +
    "\010\003\071\042\uffd3\054\uffd3\001\002\000\006\042\345" +
    "\054\015\001\002\000\030\003\uffc8\010\uffc8\013\uffc8\015" +
    "\uffc8\016\uffc8\017\uffc8\032\uffc8\033\uffc8\042\uffc8\043\uffc8" +
    "\054\uffc8\001\002\000\030\003\107\010\111\013\104\015" +
    "\077\016\113\017\114\032\110\033\076\042\000\043\347" +
    "\054\100\001\002\000\012\003\uffd9\011\uffd9\043\uffd9\054" +
    "\uffd9\001\002\000\012\003\uffff\011\uffff\043\uffff\054\uffff" +
    "\001\002\000\012\003\uffd8\011\uffd8\043\uffd8\054\uffd8\001" +
    "\002\000\004\042\uffe3\001\002\000\004\042\uffe4\001\002" +
    "\000\004\042\000\001\002\000\004\042\356\001\002\000" +
    "\012\003\uffe0\011\uffe0\043\uffe0\054\uffe0\001\002\000\012" +
    "\003\051\011\055\043\360\054\015\001\002\000\012\005" +
    "\uffe6\006\uffe6\042\uffe6\054\uffe6\001\002\000\012\005\uffff" +
    "\006\uffff\042\uffff\054\uffff\001\002\000\012\005\uffe5\006" +
    "\uffe5\042\uffe5\054\uffe5\001\002\000\010\011\055\043\ufffe" +
    "\054\015\001\002\000\004\054\060\001\002\000\004\043" +
    "\367\001\002\000\010\011\uffdb\043\uffdb\054\uffdb\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\ufffd\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\006\001\001\000\002\001\001\000\004\052\007" +
    "\001\001\000\004\004\010\001\001\000\014\005\012\006" +
    "\017\012\015\015\016\051\011\001\001\000\006\013\327" +
    "\014\330\001\001\000\002\001\001\000\004\022\362\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\041\001\001\000\004\051" +
    "\022\001\001\000\006\007\027\010\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\044\001\001\000" +
    "\002\001\001\000\004\016\353\001\001\000\002\001\001" +
    "\000\004\017\046\001\001\000\012\012\051\020\055\023" +
    "\053\051\047\001\001\000\010\013\327\014\330\026\326" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\323\001\001\000\002\001\001\000\004\063\056\001\001" +
    "\000\002\001\001\000\004\026\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\065\027\064\051\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\067\001\001\000\004" +
    "\025\071\001\001\000\002\001\001\000\006\012\073\051" +
    "\011\001\001\000\004\044\074\001\001\000\002\001\001" +
    "\000\014\030\100\045\104\047\105\050\101\052\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\263\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\030\127\034" +
    "\221\035\136\042\134\043\135\001\001\000\004\064\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\115\001\001\000\002\001\001\000\004\044\117\001\001" +
    "\000\014\030\100\045\104\047\105\050\101\052\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\030\127" +
    "\031\131\032\137\033\133\034\125\035\136\042\134\043" +
    "\135\001\001\000\012\030\127\035\216\042\134\043\135" +
    "\001\001\000\002\001\001\000\004\037\214\001\001\000" +
    "\004\051\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\155\001\001\000\002\001\001\000\004\040\150" +
    "\001\001\000\002\001\001\000\014\030\127\034\142\035" +
    "\136\042\134\043\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\030\127\033\145\034" +
    "\125\035\136\042\134\043\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\127\042" +
    "\151\043\135\001\001\000\004\041\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\127\043\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\030\127\032\161\033\133\034\125\035\136\042" +
    "\134\043\135\001\001\000\002\001\001\000\004\054\163" +
    "\001\001\000\002\001\001\000\014\030\127\034\176\035" +
    "\136\042\134\043\135\001\001\000\016\030\127\034\170" +
    "\035\136\036\171\042\134\043\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\030\127\034\175\035\136\042" +
    "\134\043\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\030\127\034\204" +
    "\035\136\042\134\043\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\030\127\034\215\035\136\042\134\043\135" +
    "\001\001\000\002\001\001\000\004\040\150\001\001\000" +
    "\004\053\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\223\001\001\000\002\001\001\000\004\054" +
    "\225\001\001\000\002\001\001\000\014\030\127\034\227" +
    "\035\136\042\134\043\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\030\127\031\242\032\137\033\133\034\125\035" +
    "\136\042\134\043\135\001\001\000\002\001\001\000\014" +
    "\030\100\045\245\047\105\050\244\052\102\001\001\000" +
    "\002\001\001\000\004\054\246\001\001\000\002\001\001" +
    "\000\012\030\100\047\251\050\250\052\102\001\001\000" +
    "\004\054\253\001\001\000\004\054\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\255\001\001\000" +
    "\016\030\100\045\104\047\105\050\101\052\102\053\256" +
    "\001\001\000\002\001\001\000\004\056\260\001\001\000" +
    "\002\001\001\000\014\030\127\034\276\035\136\042\134" +
    "\043\135\001\001\000\004\054\275\001\001\000\002\001" +
    "\001\000\004\054\273\001\001\000\016\030\127\034\170" +
    "\035\136\036\266\042\134\043\135\001\001\000\002\001" +
    "\001\000\004\055\270\001\001\000\002\001\001\000\004" +
    "\055\272\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\277\001\001" +
    "\000\002\001\001\000\022\030\127\031\301\032\137\033" +
    "\133\034\125\035\136\042\134\043\135\001\001\000\002" +
    "\001\001\000\012\030\100\047\304\050\303\052\102\001" +
    "\001\000\004\054\306\001\001\000\004\054\305\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\310\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\313" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\316\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\321\051\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\324\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\334\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\340\027\064\051\062\001\001\000\002" +
    "\001\001\000\004\052\342\001\001\000\004\025\343\001" +
    "\001\000\006\012\073\051\011\001\001\000\004\044\345" +
    "\001\001\000\014\030\100\045\104\047\105\050\101\052" +
    "\102\001\001\000\004\062\347\001\001\000\004\053\350" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\354\001\001\000\002\001\001\000\004" +
    "\017\356\001\001\000\012\012\051\020\055\023\053\051" +
    "\047\001\001\000\004\061\360\001\001\000\004\053\361" +
    "\001\001\000\002\001\001\000\010\023\365\051\363\057" +
    "\364\001\001\000\004\026\326\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\367\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {


	final int String = 5;
 	final int Bool = 6;
		
  	final Struct stringType = new Struct(String),
   		         boolType = new Struct(Bool);
	  
	Tab.init(); // Universe scope
	
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "string", stringType));
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "bool", boolType));

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }


	
	int printCallCount = 0;
	boolean errorDetected = false;
	Logger log = Logger.getLogger(getClass());
	
	// slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


							   
	Logger log = Logger.getLogger(getClass());
	Struct currentType;
	Boolean main = false;
	Boolean inside_class = false;
	Boolean void_meth = false;
	int mainStatements = 0, mainMethodCalls = 0, StatementBlocks = 0;
	int insideFunc = 0, outsideFunc = 0;
	
	void report_error(String message) {
    	parser.errorDetected = true;
        log.error(message);
    }

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Mulop ::= MOD 
            {
              Object RESULT =null;
		 RESULT=Code.rem; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Mulop ::= DIV 
            {
              Object RESULT =null;
		 RESULT=Code.div; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Mulop ::= MUL 
            {
              Object RESULT =null;
		 RESULT=Code.mul; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Addop ::= MINUS 
            {
              Object RESULT =null;
		 RESULT=Code.sub; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Addop ::= PLUS 
            {
              Object RESULT =null;
		 RESULT=Code.add; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Relop ::= GREATER_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Relop ::= GREATER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Relop ::= LESS_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Relop ::= LESS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Relop ::= NOT_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Relop ::= EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Designator ::= Designator LBRACK error RBRACK 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
			 	 	log.debug("Uspesan oporavak od greske na liniji " + eleft + " pri indeksiranju niza"); 
		 	   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Designator ::= IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	   		   		RESULT = Tab.find(name);
	   		   		
	   		   		if(RESULT == Tab.noObj)
	   		   			report_error("Greska na liniji "  + nameleft + ":promenjiva " + name + " ne postoji");
	   		   			
	   		   		// TODO
	   		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Designator ::= Designator DOT IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Designator ::= Designator LBRACK Expr RBRACK 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Factor ::= Designator 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Factor ::= Designator LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Factor ::= Designator LPAREN ActPars RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Factor ::= NEW Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Factor ::= NEW Type LBRACK Expr RBRACK 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Factor ::= STRING 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Factor ::= BOOL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Factor ::= LPAREN Expr RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Factor ::= CHAR 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Factor ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Term ::= Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Term ::= Term Mulop Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ExprPart ::= Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprPart",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ExprPart ::= ExprPart Addop Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprPart",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= MINUS ExprPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= ExprPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CondTerm ::= CondTerm AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Condition ::= CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Condition ::= Condition OR CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ActPars ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ActPars ::= ActPars COMMA Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // StatementPart ::= LPAREN RPAREN CountMethodCalls 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementPart",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // StatementPart ::= LPAREN ActPars RPAREN CountMethodCalls 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementPart",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // StatementPart ::= DEC CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementPart",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // StatementPart ::= INC CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementPart",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // StatementPart ::= EQUAL Expr CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementPart",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CountStatementBlocks ::= 
            {
              Object RESULT =null;
		 StatementBlocks++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CountStatementBlocks",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CountMethodCalls ::= 
            {
              Object RESULT =null;
		 if(main)  mainMethodCalls++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CountMethodCalls",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CountStatements ::= 
            {
              Object RESULT =null;
		 if(main)  mainStatements++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CountStatements",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // StatementMatched ::= error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 log.debug("Uspesan oporavak od greske na liniji " + eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // StatementMatched ::= DO LBRACE StatementList RBRACE WHILE LPAREN Condition RPAREN SEMI CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // StatementMatched ::= OpenScope LBRACE StatementList CloseScope RBRACE CountStatementBlocks 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // StatementMatched ::= RETURN Expr SEMI CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // StatementMatched ::= RETURN SEMI CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // StatementMatched ::= BREAK SEMI CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // StatementMatched ::= PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // StatementMatched ::= PRINT LPAREN Expr RPAREN SEMI CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // StatementMatched ::= READ LPAREN Designator RPAREN SEMI CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // StatementMatched ::= WHILE LPAREN Condition RPAREN StatementMatched CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // StatementMatched ::= Designator StatementPart SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // StatementMatched ::= IF LPAREN Condition RPAREN StatementMatched ELSE StatementMatched CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // StatementUnmatched ::= WHILE LPAREN Condition RPAREN StatementUnmatched CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // StatementUnmatched ::= IF LPAREN Condition RPAREN StatementMatched ELSE StatementUnmatched CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // StatementUnmatched ::= IF LPAREN Condition RPAREN Statement CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Statement ::= StatementMatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Statement ::= StatementUnmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FormPars ::= Type IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FormPars ::= FormPars COMMA Type IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MethodPars ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
			 		log.debug("Uspesan oporavak od greske na liniji " + eleft + " u formalnim parametrima do )"); 
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodPars",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MethodPars ::= error COMMA FormPars 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
					log.debug("Uspesan oporavak od greske na liniji " + eleft + " u formalnim parametrima do ,"); 
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodPars",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MethodPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodPars",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MethodPars ::= FormPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodPars",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MethodName ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				   	if(inside_class) {
				   		insideFunc++;
				   	}
				   	else {
				   		outsideFunc++;
				   		if (name.equals("main")) 
				   			main = true;
				   	}
				   	
				   	RESULT = Tab.insert(Obj.Meth, name, void_meth ? Tab.noType : currentType);
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodName",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MethodLocalVarDeclList ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							 	 log.debug("Uspesan oporavak od greske na liniji " + eleft + " pri definisanju lokalne promenjive do {"); 
						   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodLocalVarDeclList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MethodLocalVarDeclList ::= error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
						 	 	log.debug("Uspesan oporavak od greske na liniji " + eleft + " pri definisanju lokalne promenjive do ;"); 
					 	   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodLocalVarDeclList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MethodLocalVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodLocalVarDeclList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MethodLocalVarDeclList ::= MethodLocalVarDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodLocalVarDeclList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodDecl ::= VOID NT$4 MethodName LPAREN MethodPars RPAREN OpenScope MethodLocalVarDeclList LBRACE StatementList RBRACE NT$5 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
 Tab.chainLocalSymbols(m); main = void_meth = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$4 ::= 
            {
              Object RESULT =null;
 void_meth = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodDecl ::= Type MethodName LPAREN MethodPars RPAREN OpenScope MethodLocalVarDeclList LBRACE StatementList RBRACE NT$3 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$3 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
 Tab.chainLocalSymbols(m); main = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 	Obj typeNode = Tab.find(typeName);
			if (typeNode == Tab.noObj) {
				log.info("Nije pronadjen tip " + typeName + " u tabeli simbola");
				currentType = Tab.noType;
			}
			else {
				if (Obj.Type == typeNode.getKind()) {
					currentType = typeNode.getType();
				}
				else {
					report_error("Greska na liniji" + typeNameleft + ": Ime " + typeName + " ne predstavlja tip ");
					currentType = Tab.noType;
				}
			}
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClassVarMethodDecl ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					 	 	log.debug("Uspesan oporavak od greske na liniji " + eleft + " pri definicji klase"); 
				 	   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarMethodDecl",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassVarMethodDecl ::= MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarMethodDecl",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassVarMethodDecl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarMethodDecl",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassVarMethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarMethodDeclList",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassVarMethodDeclList ::= ClassVarMethodDeclList ClassVarMethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarMethodDeclList",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassName ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			  	inside_class = true;
			  	RESULT = Tab.insert(Obj.Type, name, Tab.nullType);
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassName",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassBase ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			 	 log.debug("Uspesan oporavak od greske na liniji " + eleft + " pri nasledjivanju klasa"); 
		 	  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassBase",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassBase ::= IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassBase",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassDecl ::= CLASS ClassName EXTENDS ClassBase OpenScope LBRACE ClassVarMethodDeclList RBRACE NT$2 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$2 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
 Tab.chainLocalSymbols(c); inside_class = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassDecl ::= CLASS ClassName OpenScope LBRACE ClassVarMethodDeclList RBRACE NT$1 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$1 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
 Tab.chainLocalSymbols(c); inside_class = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Var ::= IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
			Tab.insert(Obj.Var, name, new Struct(Struct.Array, currentType));  
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Var ::= IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			Tab.insert(Obj.Var, name, currentType);  
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarList ::= Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarList ::= VarList COMMA Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDecl ::= Type VarList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= BOOL 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = val ? 1:0; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Const ::= CHAR 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character val = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 // TODO 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Const ::= STRING 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 // TODO 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Const ::= NUMBER 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = val; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstListPart ::= IDENT EQUAL Const 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 	 	Obj con = Tab.insert(Obj.Con, name, currentType);  
		 	    con.setAdr((int)val); // U adr se pamti vrednost konstante
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstListPart",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstList ::= ConstListPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstList ::= ConstList COMMA ConstListPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstDecl ::= CONST error SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
			  	log.debug("Uspesan oporavak od greske na liniji " + sleft + " pri definisanju konstante"); 
		  	  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDecl ::= CONST Type ConstList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclList ::= DeclList Decl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		  
				RESULT = Tab.insert(Obj.Prog, pName, Tab.noType);
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= PROG ProgName OpenScope DeclList LBRACE MethodDeclList NT$0 RBRACE CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		
				int array_count = 0;
				int var_count = 0;
				int con_count = 0;
				int class_count = 0;
				
				for(Obj s : p.getLocalSymbols())
					if(s.getKind() == Obj.Var)
						if(s.getType().getKind() == Struct.Array)
							array_count++;
						else
							var_count++;
					else if(s.getKind() == Obj.Con)
						con_count++;
					else if(s.getKind() == Obj.Type)
						class_count++;
									
				log.info("Broj globalnih prostih promenjivih:" + var_count);
				log.info("Broj globalnih nizova:" + array_count);
				log.info("Broj globalnih konstanti:" + con_count);
				log.info("Broj unutrasnjih klasa:" + class_count);
				log.info("Broj iskaza u main-u:" + mainStatements);
				log.info("Broj poziva metoda u main-u:" + mainMethodCalls);
				log.info("Broj blokova naredbi:" + StatementBlocks);
				log.info("Broj funkcija glavnog programa:" + outsideFunc);
				log.info("Broj funkcija unutrasnjih klasa:" + insideFunc);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
 Tab.chainLocalSymbols(p); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CloseScope ::= 
            {
              Object RESULT =null;
		 Tab.closeScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CloseScope",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // OpenScope ::= 
            {
              Object RESULT =null;
		 Tab.openScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpenScope",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

