
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Aug 16 14:49:27 CEST 2013
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java.util.Stack;
import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.mj.runtime.Code;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Aug 16 14:49:27 CEST 2013
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\211\000\002\002\004\000\002\062\002\000\002\063" +
    "\002\000\002\067\002\000\002\002\013\000\002\003\003" +
    "\000\002\004\004\000\002\004\002\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\006\000\002" +
    "\006\005\000\002\007\005\000\002\007\003\000\002\010" +
    "\005\000\002\010\005\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\005\000\002\014\005\000" +
    "\002\014\003\000\002\013\003\000\002\013\005\000\002" +
    "\070\002\000\002\015\012\000\002\071\002\000\002\072" +
    "\002\000\002\015\015\000\002\020\003\000\002\020\003" +
    "\000\002\021\003\000\002\016\004\000\002\016\002\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\056\003\000\002\022\004\000\002\022\002\000\002\023" +
    "\004\000\002\073\002\000\002\023\005\000\002\025\004" +
    "\000\002\025\002\000\002\025\004\000\002\025\003\000" +
    "\002\074\002\000\002\075\002\000\002\076\002\000\002" +
    "\024\017\000\002\026\003\000\002\030\003\000\002\030" +
    "\002\000\002\030\005\000\002\030\003\000\002\027\005" +
    "\000\002\027\003\000\002\031\004\000\002\031\006\000" +
    "\002\040\002\000\002\052\004\000\002\052\002\000\002" +
    "\053\003\000\002\053\003\000\002\054\011\000\002\054" +
    "\014\000\002\077\002\000\002\054\013\000\002\055\014" +
    "\000\002\100\002\000\002\055\013\000\002\101\002\000" +
    "\002\055\017\000\002\055\007\000\002\055\006\000\002" +
    "\055\006\000\002\055\010\000\002\055\007\000\002\055" +
    "\010\000\002\055\010\000\002\055\012\000\002\055\005" +
    "\000\002\055\005\000\002\055\006\000\002\055\010\000" +
    "\002\055\004\000\002\064\002\000\002\065\002\000\002" +
    "\066\002\000\002\046\005\000\002\046\003\000\002\041" +
    "\002\000\002\102\002\000\002\043\004\000\002\042\002" +
    "\000\002\034\004\000\002\033\005\000\002\033\003\000" +
    "\002\036\003\000\002\035\005\000\002\035\003\000\002" +
    "\037\003\000\002\037\005\000\002\044\003\000\002\044" +
    "\004\000\002\045\005\000\002\045\003\000\002\047\005" +
    "\000\002\047\003\000\002\050\003\000\002\050\005\000" +
    "\002\050\007\000\002\050\004\000\002\050\004\000\002" +
    "\050\003\000\002\051\004\000\002\051\005\000\002\103" +
    "\002\000\002\032\007\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\003\000\002\032\006\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\060" +
    "\003\000\002\060\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010c\000\004\004\005\001\002\000\004\002\u010e\001" +
    "\002\000\004\056\006\001\002\000\012\005\ufffc\006\ufffc" +
    "\044\ufffc\056\ufffc\001\002\000\012\005\000\006\000\044" +
    "\000\056\000\001\002\000\012\005\ufffa\006\ufffa\044\ufffa" +
    "\056\ufffa\001\002\000\012\005\022\006\021\044\014\056" +
    "\015\001\002\000\004\056\372\001\002\000\012\005\ufffb" +
    "\006\ufffb\044\ufffb\056\ufffb\001\002\000\010\011\uffd9\045" +
    "\uffd9\056\uffd9\001\002\000\050\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\032\uffdb\033\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\043\uffdb\046\uffdb\047\uffdb\050\uffdb" +
    "\052\uffdb\053\uffdb\056\uffdb\001\002\000\012\005\ufff8\006" +
    "\ufff8\044\ufff8\056\ufff8\001\002\000\012\005\ufff7\006\ufff7" +
    "\044\ufff7\056\ufff7\001\002\000\012\005\ufff9\006\ufff9\044" +
    "\ufff9\056\ufff9\001\002\000\004\056\043\001\002\000\006" +
    "\003\024\056\015\001\002\000\004\056\030\001\002\000" +
    "\004\050\025\001\002\000\012\005\ufff5\006\ufff5\044\ufff5" +
    "\056\ufff5\001\002\000\006\050\ufff3\053\ufff3\001\002\000" +
    "\006\050\040\053\037\001\002\000\004\022\031\001\002" +
    "\000\012\055\033\057\032\060\036\061\035\001\002\000" +
    "\006\050\ufff1\053\ufff1\001\002\000\044\023\ufff0\024\ufff0" +
    "\025\ufff0\026\ufff0\027\ufff0\032\ufff0\033\ufff0\036\ufff0\037" +
    "\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\047\ufff0\050\ufff0" +
    "\052\ufff0\053\ufff0\001\002\000\006\050\ufff2\053\ufff2\001" +
    "\002\000\044\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee" +
    "\032\uffee\033\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042" +
    "\uffee\043\uffee\047\uffee\050\uffee\052\uffee\053\uffee\001\002" +
    "\000\044\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\032" +
    "\uffef\033\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef" +
    "\043\uffef\047\uffef\050\uffef\052\uffef\053\uffef\001\002\000" +
    "\004\056\030\001\002\000\012\005\ufff6\006\ufff6\044\ufff6" +
    "\056\ufff6\001\002\000\006\050\ufff4\053\ufff4\001\002\000" +
    "\006\007\044\044\000\001\002\000\006\007\uffe1\044\uffe1" +
    "\001\002\000\006\003\376\056\377\001\002\000\004\044" +
    "\046\001\002\000\012\003\uffdf\011\uffdf\045\uffdf\056\uffdf" +
    "\001\002\000\012\003\051\011\055\045\053\056\015\001" +
    "\002\000\004\056\365\001\002\000\012\003\uffdc\011\uffdc" +
    "\045\uffdc\056\uffdc\001\002\000\012\003\uffde\011\uffde\045" +
    "\uffde\056\uffde\001\002\000\012\005\uffe8\006\uffe8\044\uffe8" +
    "\056\uffe8\001\002\000\012\003\uffdd\011\uffdd\045\uffdd\056" +
    "\uffdd\001\002\000\004\056\uffd7\001\002\000\012\003\uffe0" +
    "\011\uffe0\045\uffe0\056\uffe0\001\002\000\004\056\061\001" +
    "\002\000\012\003\uffd6\011\uffd6\045\uffd6\056\uffd6\001\002" +
    "\000\004\051\uffcd\001\002\000\004\051\uffd1\001\002\000" +
    "\004\051\064\001\002\000\010\003\066\052\uffcb\056\015" +
    "\001\002\000\004\056\357\001\002\000\006\052\uffc9\053" +
    "\355\001\002\000\006\052\uffcc\053\353\001\002\000\006" +
    "\052\uffc7\053\uffc7\001\002\000\004\052\072\001\002\000" +
    "\010\003\000\044\000\056\000\001\002\000\010\003\074" +
    "\044\uffd4\056\uffd4\001\002\000\010\044\uffd2\050\352\056" +
    "\uffd2\001\002\000\006\044\uffd0\056\015\001\002\000\006" +
    "\044\uffd5\056\uffd5\001\002\000\004\044\100\001\002\000" +
    "\034\003\uffc2\010\uffc2\013\uffc2\014\uffc2\015\uffc2\017\uffc2" +
    "\020\uffc2\021\uffc2\034\uffc2\035\uffc2\044\uffc2\045\uffc2\056" +
    "\uffc2\001\002\000\034\003\114\010\117\013\115\014\110" +
    "\015\111\017\103\020\120\021\122\034\116\035\102\044" +
    "\000\045\121\056\104\001\002\000\004\051\345\001\002" +
    "\000\004\051\uffc4\001\002\000\060\022\uff85\023\uff85\024" +
    "\uff85\025\uff85\026\uff85\027\uff85\030\uff85\031\uff85\032\uff85" +
    "\033\uff85\036\uff85\037\uff85\040\uff85\041\uff85\042\uff85\043" +
    "\uff85\046\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85" +
    "\054\uff85\001\002\000\016\022\307\030\310\031\311\046" +
    "\215\051\312\054\220\001\002\000\004\044\302\001\002" +
    "\000\034\003\uffc0\010\uffc0\013\uffc0\014\uffc0\015\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\034\uffc0\035\uffc0\044\uffc0\045\uffc0" +
    "\056\uffc0\001\002\000\004\054\300\001\002\000\004\051" +
    "\257\001\002\000\034\003\uffc1\010\uffc1\013\uffc1\014\uffc1" +
    "\015\uffc1\017\uffc1\020\uffc1\021\uffc1\034\uffc1\035\uffc1\044" +
    "\uffc1\045\uffc1\056\uffc1\001\002\000\034\003\uffc3\010\uffc3" +
    "\013\uffc3\014\uffc3\015\uffc3\017\uffc3\020\uffc3\021\uffc3\034" +
    "\uffc3\035\uffc3\044\uffc3\045\uffc3\056\uffc3\001\002\000\004" +
    "\050\256\001\002\000\004\054\254\001\002\000\004\051" +
    "\242\001\002\000\026\012\147\013\115\014\110\024\145" +
    "\050\236\051\142\055\033\056\104\060\036\061\035\001" +
    "\002\000\004\044\uffc4\001\002\000\012\003\uffcf\011\uffcf" +
    "\045\uffcf\056\uffcf\001\002\000\004\050\123\001\002\000" +
    "\036\003\uffa9\010\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9" +
    "\017\uffa9\020\uffa9\021\uffa9\034\uffa9\035\uffa9\044\uffa9\045" +
    "\uffa9\056\uffa9\001\002\000\036\003\uffae\010\uffae\013\uffae" +
    "\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\034" +
    "\uffae\035\uffae\044\uffae\045\uffae\056\uffae\001\002\000\012" +
    "\003\uffff\011\uffff\045\uffff\056\uffff\001\002\000\012\003" +
    "\uffce\011\uffce\045\uffce\056\uffce\001\002\000\004\044\130" +
    "\001\002\000\034\003\uffc2\010\uffc2\013\uffc2\014\uffc2\015" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\034\uffc2\035\uffc2\044\uffc2" +
    "\045\uffc2\056\uffc2\001\002\000\034\003\114\010\117\013" +
    "\115\014\110\015\111\017\103\020\120\021\122\034\116" +
    "\035\102\044\000\045\132\056\104\001\002\000\004\017" +
    "\133\001\002\000\004\051\134\001\002\000\024\012\147" +
    "\013\115\014\110\024\145\051\142\055\033\056\104\060" +
    "\036\061\035\001\002\000\052\023\uff8d\024\uff8d\025\uff8d" +
    "\026\uff8d\027\uff8d\032\uff8d\033\uff8d\036\uff8d\037\uff8d\040" +
    "\uff8d\041\uff8d\042\uff8d\043\uff8d\046\215\047\uff8d\050\uff8d" +
    "\051\217\052\uff8d\053\uff8d\054\220\001\002\000\044\023" +
    "\uff93\024\uff93\025\uff93\026\uff93\027\uff93\032\uff93\033\uff93" +
    "\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93\047" +
    "\uff93\050\uff93\052\uff93\053\uff93\001\002\000\036\023\172" +
    "\024\173\032\uff98\033\uff98\036\uff98\037\uff98\040\uff98\041" +
    "\uff98\042\uff98\043\uff98\047\uff98\050\uff98\052\uff98\053\uff98" +
    "\001\002\000\010\032\uff9b\033\uff9b\052\uff9b\001\002\000" +
    "\024\032\uff9a\033\uff9a\036\206\037\211\040\210\041\213" +
    "\042\205\043\207\052\uff9a\001\002\000\024\012\147\013" +
    "\115\014\110\024\145\051\142\055\033\056\104\060\036" +
    "\061\035\001\002\000\044\023\uff92\024\uff92\025\uff92\026" +
    "\uff92\027\uff92\032\uff92\033\uff92\036\uff92\037\uff92\040\uff92" +
    "\041\uff92\042\uff92\043\uff92\047\uff92\050\uff92\052\uff92\053" +
    "\uff92\001\002\000\004\052\176\001\002\000\022\012\147" +
    "\013\115\014\110\051\142\055\033\056\104\060\036\061" +
    "\035\001\002\000\006\033\uff9e\052\uff9e\001\002\000\004" +
    "\056\015\001\002\000\010\032\163\033\uff9d\052\uff9d\001" +
    "\002\000\044\023\uff95\024\uff95\025\157\026\160\027\156" +
    "\032\uff95\033\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042" +
    "\uff95\043\uff95\047\uff95\050\uff95\052\uff95\053\uff95\001\002" +
    "\000\006\033\153\052\uffa1\001\002\000\024\012\147\013" +
    "\115\014\110\024\145\051\142\055\033\056\104\060\036" +
    "\061\035\001\002\000\004\052\uffa0\001\002\000\006\033" +
    "\uff9f\052\uff9f\001\002\000\022\012\uff79\013\uff79\014\uff79" +
    "\051\uff79\055\uff79\056\uff79\060\uff79\061\uff79\001\002\000" +
    "\022\012\uff7b\013\uff7b\014\uff7b\051\uff7b\055\uff7b\056\uff7b" +
    "\060\uff7b\061\uff7b\001\002\000\022\012\uff7a\013\uff7a\014" +
    "\uff7a\051\uff7a\055\uff7a\056\uff7a\060\uff7a\061\uff7a\001\002" +
    "\000\022\012\147\013\115\014\110\051\142\055\033\056" +
    "\104\060\036\061\035\001\002\000\044\023\uff94\024\uff94" +
    "\025\uff94\026\uff94\027\uff94\032\uff94\033\uff94\036\uff94\037" +
    "\uff94\040\uff94\041\uff94\042\uff94\043\uff94\047\uff94\050\uff94" +
    "\052\uff94\053\uff94\001\002\000\024\012\147\013\115\014" +
    "\110\024\145\051\142\055\033\056\104\060\036\061\035" +
    "\001\002\000\010\032\uff9c\033\uff9c\052\uff9c\001\002\000" +
    "\046\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\032\uff8f" +
    "\033\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043" +
    "\uff8f\046\166\047\uff8f\050\uff8f\052\uff8f\053\uff8f\001\002" +
    "\000\024\012\147\013\115\014\110\024\145\051\142\055" +
    "\033\056\104\060\036\061\035\001\002\000\004\047\170" +
    "\001\002\000\044\023\uff90\024\uff90\025\uff90\026\uff90\027" +
    "\uff90\032\uff90\033\uff90\036\uff90\037\uff90\040\uff90\041\uff90" +
    "\042\uff90\043\uff90\047\uff90\050\uff90\052\uff90\053\uff90\001" +
    "\002\000\036\023\172\024\173\032\uff97\033\uff97\036\uff97" +
    "\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97\047\uff97\050" +
    "\uff97\052\uff97\053\uff97\001\002\000\022\012\uff7d\013\uff7d" +
    "\014\uff7d\051\uff7d\055\uff7d\056\uff7d\060\uff7d\061\uff7d\001" +
    "\002\000\022\012\uff7c\013\uff7c\014\uff7c\051\uff7c\055\uff7c" +
    "\056\uff7c\060\uff7c\061\uff7c\001\002\000\022\012\147\013" +
    "\115\014\110\051\142\055\033\056\104\060\036\061\035" +
    "\001\002\000\044\023\uff96\024\uff96\025\157\026\160\027" +
    "\156\032\uff96\033\uff96\036\uff96\037\uff96\040\uff96\041\uff96" +
    "\042\uff96\043\uff96\047\uff96\050\uff96\052\uff96\053\uff96\001" +
    "\002\000\004\050\177\001\002\000\036\003\uffb8\010\uffb8" +
    "\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021" +
    "\uffb8\034\uffb8\035\uffb8\044\uffb8\045\uffb8\056\uffb8\001\002" +
    "\000\036\003\uffa4\010\uffa4\013\uffa4\014\uffa4\015\uffa4\016" +
    "\uffa4\017\uffa4\020\uffa4\021\uffa4\034\uffa4\035\uffa4\044\uffa4" +
    "\045\uffa4\056\uffa4\001\002\000\036\003\uffa9\010\uffa9\013" +
    "\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\034\uffa9\035\uffa9\044\uffa9\045\uffa9\056\uffa9\001\002\000" +
    "\036\003\uffb7\010\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\021\uffb7\034\uffb7\035\uffb7\044\uffb7\045" +
    "\uffb7\056\uffb7\001\002\000\004\052\204\001\002\000\044" +
    "\023\uff91\024\uff91\025\uff91\026\uff91\027\uff91\032\uff91\033" +
    "\uff91\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91" +
    "\047\uff91\050\uff91\052\uff91\053\uff91\001\002\000\024\012" +
    "\uff7f\013\uff7f\014\uff7f\024\uff7f\051\uff7f\055\uff7f\056\uff7f" +
    "\060\uff7f\061\uff7f\001\002\000\024\012\uff83\013\uff83\014" +
    "\uff83\024\uff83\051\uff83\055\uff83\056\uff83\060\uff83\061\uff83" +
    "\001\002\000\024\012\uff7e\013\uff7e\014\uff7e\024\uff7e\051" +
    "\uff7e\055\uff7e\056\uff7e\060\uff7e\061\uff7e\001\002\000\024" +
    "\012\uff81\013\uff81\014\uff81\024\uff81\051\uff81\055\uff81\056" +
    "\uff81\060\uff81\061\uff81\001\002\000\024\012\uff82\013\uff82" +
    "\014\uff82\024\uff82\051\uff82\055\uff82\056\uff82\060\uff82\061" +
    "\uff82\001\002\000\024\012\147\013\115\014\110\024\145" +
    "\051\142\055\033\056\104\060\036\061\035\001\002\000" +
    "\024\012\uff80\013\uff80\014\uff80\024\uff80\051\uff80\055\uff80" +
    "\056\uff80\060\uff80\061\uff80\001\002\000\010\032\uff99\033" +
    "\uff99\052\uff99\001\002\000\026\003\230\012\uff8a\013\uff8a" +
    "\014\uff8a\024\uff8a\051\uff8a\055\uff8a\056\uff8a\060\uff8a\061" +
    "\uff8a\001\002\000\044\023\uff8e\024\uff8e\025\uff8e\026\uff8e" +
    "\027\uff8e\032\uff8e\033\uff8e\036\uff8e\037\uff8e\040\uff8e\041" +
    "\uff8e\042\uff8e\043\uff8e\047\uff8e\050\uff8e\052\uff8e\053\uff8e" +
    "\001\002\000\026\012\147\013\115\014\110\024\145\051" +
    "\142\052\224\055\033\056\104\060\036\061\035\001\002" +
    "\000\004\056\221\001\002\000\060\022\uff88\023\uff88\024" +
    "\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88\032\uff88" +
    "\033\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043" +
    "\uff88\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88" +
    "\054\uff88\001\002\000\006\052\226\053\225\001\002\000" +
    "\006\052\uffa5\053\uffa5\001\002\000\044\023\uff8c\024\uff8c" +
    "\025\uff8c\026\uff8c\027\uff8c\032\uff8c\033\uff8c\036\uff8c\037" +
    "\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\047\uff8c\050\uff8c" +
    "\052\uff8c\053\uff8c\001\002\000\024\012\147\013\115\014" +
    "\110\024\145\051\142\055\033\056\104\060\036\061\035" +
    "\001\002\000\044\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027" +
    "\uff8b\032\uff8b\033\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b" +
    "\042\uff8b\043\uff8b\047\uff8b\050\uff8b\052\uff8b\053\uff8b\001" +
    "\002\000\006\052\uffa6\053\uffa6\001\002\000\004\047\234" +
    "\001\002\000\024\012\147\013\115\014\110\024\145\051" +
    "\142\055\033\056\104\060\036\061\035\001\002\000\004" +
    "\047\233\001\002\000\060\022\uff89\023\uff89\024\uff89\025" +
    "\uff89\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89" +
    "\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\043\uff89\046" +
    "\uff89\047\uff89\050\uff89\051\uff89\052\uff89\053\uff89\054\uff89" +
    "\001\002\000\060\022\uff84\023\uff84\024\uff84\025\uff84\026" +
    "\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84\036\uff84" +
    "\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84\046\uff84\047" +
    "\uff84\050\uff84\051\uff84\052\uff84\053\uff84\054\uff84\001\002" +
    "\000\004\050\240\001\002\000\036\003\uffa9\010\uffa9\013" +
    "\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\034\uffa9\035\uffa9\044\uffa9\045\uffa9\056\uffa9\001\002\000" +
    "\036\003\uffad\010\uffad\013\uffad\014\uffad\015\uffad\016\uffad" +
    "\017\uffad\020\uffad\021\uffad\034\uffad\035\uffad\044\uffad\045" +
    "\uffad\056\uffad\001\002\000\036\003\uffa9\010\uffa9\013\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\034" +
    "\uffa9\035\uffa9\044\uffa9\045\uffa9\056\uffa9\001\002\000\036" +
    "\003\uffac\010\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017" +
    "\uffac\020\uffac\021\uffac\034\uffac\035\uffac\044\uffac\045\uffac" +
    "\056\uffac\001\002\000\024\012\147\013\115\014\110\024" +
    "\145\051\142\055\033\056\104\060\036\061\035\001\002" +
    "\000\006\052\245\053\244\001\002\000\004\055\250\001" +
    "\002\000\004\050\246\001\002\000\036\003\uffa9\010\uffa9" +
    "\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021" +
    "\uffa9\034\uffa9\035\uffa9\044\uffa9\045\uffa9\056\uffa9\001\002" +
    "\000\036\003\uffb0\010\uffb0\013\uffb0\014\uffb0\015\uffb0\016" +
    "\uffb0\017\uffb0\020\uffb0\021\uffb0\034\uffb0\035\uffb0\044\uffb0" +
    "\045\uffb0\056\uffb0\001\002\000\004\052\251\001\002\000" +
    "\004\050\252\001\002\000\036\003\uffa9\010\uffa9\013\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\034" +
    "\uffa9\035\uffa9\044\uffa9\045\uffa9\056\uffa9\001\002\000\036" +
    "\003\uffaf\010\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\034\uffaf\035\uffaf\044\uffaf\045\uffaf" +
    "\056\uffaf\001\002\000\004\056\255\001\002\000\060\022" +
    "\uff86\023\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030\uff86" +
    "\031\uff86\032\uff86\033\uff86\036\uff86\037\uff86\040\uff86\041" +
    "\uff86\042\uff86\043\uff86\046\uff86\047\uff86\050\uff86\051\uff86" +
    "\052\uff86\053\uff86\054\uff86\001\002\000\036\003\uffaa\010" +
    "\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\034\uffaa\035\uffaa\044\uffaa\045\uffaa\056\uffaa\001" +
    "\002\000\024\012\147\013\115\014\110\024\145\051\142" +
    "\055\033\056\104\060\036\061\035\001\002\000\004\052" +
    "\261\001\002\000\032\003\114\010\117\013\115\014\110" +
    "\015\111\017\103\020\120\021\122\034\116\035\102\044" +
    "\000\056\104\001\002\000\036\003\uffc0\010\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\016\uffa3\017\uffc0\020\uffc0\021\uffc0\034" +
    "\uffc0\035\uffc0\044\uffc0\045\uffc0\056\uffc0\001\002\000\034" +
    "\003\uffa4\010\uffa4\013\uffa4\014\uffa4\015\uffa4\017\uffa4\020" +
    "\uffa4\021\uffa4\034\uffa4\035\uffa4\044\uffa4\045\uffa4\056\uffa4" +
    "\001\002\000\034\003\uffa9\010\uffa9\013\uffa9\014\uffa9\015" +
    "\uffa9\017\uffa9\020\uffa9\021\uffa9\034\uffa9\035\uffa9\044\uffa9" +
    "\045\uffa9\056\uffa9\001\002\000\034\003\uffbf\010\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\017\uffbf\020\uffbf\021\uffbf\034\uffbf" +
    "\035\uffbf\044\uffbf\045\uffbf\056\uffbf\001\002\000\004\016" +
    "\271\001\002\000\004\016\uffa1\001\002\000\004\016\uffa2" +
    "\001\002\000\032\003\114\010\117\013\115\014\110\015" +
    "\111\017\103\020\120\021\122\034\116\035\102\044\000" +
    "\056\104\001\002\000\036\003\uffa4\010\uffa4\013\uffa4\014" +
    "\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\034\uffa4" +
    "\035\uffa4\044\uffa4\045\uffa4\056\uffa4\001\002\000\034\003" +
    "\uffa4\010\uffa4\013\uffa4\014\uffa4\015\uffa4\017\uffa4\020\uffa4" +
    "\021\uffa4\034\uffa4\035\uffa4\044\uffa4\045\uffa4\056\uffa4\001" +
    "\002\000\034\003\uffa9\010\uffa9\013\uffa9\014\uffa9\015\uffa9" +
    "\017\uffa9\020\uffa9\021\uffa9\034\uffa9\035\uffa9\044\uffa9\045" +
    "\uffa9\056\uffa9\001\002\000\034\003\uffbe\010\uffbe\013\uffbe" +
    "\014\uffbe\015\uffbe\017\uffbe\020\uffbe\021\uffbe\034\uffbe\035" +
    "\uffbe\044\uffbe\045\uffbe\056\uffbe\001\002\000\036\003\uffa9" +
    "\010\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020" +
    "\uffa9\021\uffa9\034\uffa9\035\uffa9\044\uffa9\045\uffa9\056\uffa9" +
    "\001\002\000\036\003\uffbb\010\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\034\uffbb\035\uffbb" +
    "\044\uffbb\045\uffbb\056\uffbb\001\002\000\004\056\301\001" +
    "\002\000\060\022\uff87\023\uff87\024\uff87\025\uff87\026\uff87" +
    "\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87\036\uff87\037" +
    "\uff87\040\uff87\041\uff87\042\uff87\043\uff87\046\uff87\047\uff87" +
    "\050\uff87\051\uff87\052\uff87\053\uff87\054\uff87\001\002\000" +
    "\034\003\uffc2\010\uffc2\013\uffc2\014\uffc2\015\uffc2\017\uffc2" +
    "\020\uffc2\021\uffc2\034\uffc2\035\uffc2\044\uffc2\045\uffc2\056" +
    "\uffc2\001\002\000\034\003\114\010\117\013\115\014\110" +
    "\015\111\017\103\020\120\021\122\034\116\035\102\044" +
    "\000\045\uffff\056\104\001\002\000\004\045\305\001\002" +
    "\000\036\003\uffa7\010\uffa7\013\uffa7\014\uffa7\015\uffa7\016" +
    "\uffa7\017\uffa7\020\uffa7\021\uffa7\034\uffa7\035\uffa7\044\uffa7" +
    "\045\uffa7\056\uffa7\001\002\000\036\003\uffab\010\uffab\013" +
    "\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab" +
    "\034\uffab\035\uffab\044\uffab\045\uffab\056\uffab\001\002\000" +
    "\024\012\147\013\115\014\110\024\145\051\142\055\033" +
    "\056\104\060\036\061\035\001\002\000\004\050\324\001" +
    "\002\000\004\050\uffa9\001\002\000\026\012\147\013\115" +
    "\014\110\024\145\051\142\052\314\055\033\056\104\060" +
    "\036\061\035\001\002\000\006\052\317\053\225\001\002" +
    "\000\004\050\315\001\002\000\036\003\uffa8\010\uffa8\013" +
    "\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8" +
    "\034\uffa8\035\uffa8\044\uffa8\045\uffa8\056\uffa8\001\002\000" +
    "\036\003\uffb2\010\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2" +
    "\017\uffb2\020\uffb2\021\uffb2\034\uffb2\035\uffb2\044\uffb2\045" +
    "\uffb2\056\uffb2\001\002\000\004\050\320\001\002\000\036" +
    "\003\uffa8\010\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017" +
    "\uffa8\020\uffa8\021\uffa8\034\uffa8\035\uffa8\044\uffa8\045\uffa8" +
    "\056\uffa8\001\002\000\036\003\uffb3\010\uffb3\013\uffb3\014" +
    "\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\034\uffb3" +
    "\035\uffb3\044\uffb3\045\uffb3\056\uffb3\001\002\000\004\050" +
    "\323\001\002\000\036\003\uffb4\010\uffb4\013\uffb4\014\uffb4" +
    "\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\034\uffb4\035" +
    "\uffb4\044\uffb4\045\uffb4\056\uffb4\001\002\000\036\003\uffa9" +
    "\010\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020" +
    "\uffa9\021\uffa9\034\uffa9\035\uffa9\044\uffa9\045\uffa9\056\uffa9" +
    "\001\002\000\036\003\uffb5\010\uffb5\013\uffb5\014\uffb5\015" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\034\uffb5\035\uffb5" +
    "\044\uffb5\045\uffb5\056\uffb5\001\002\000\004\050\327\001" +
    "\002\000\036\003\uffa9\010\uffa9\013\uffa9\014\uffa9\015\uffa9" +
    "\016\uffa9\017\uffa9\020\uffa9\021\uffa9\034\uffa9\035\uffa9\044" +
    "\uffa9\045\uffa9\056\uffa9\001\002\000\036\003\uffb6\010\uffb6" +
    "\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021" +
    "\uffb6\034\uffb6\035\uffb6\044\uffb6\045\uffb6\056\uffb6\001\002" +
    "\000\004\051\332\001\002\000\024\012\147\013\115\014" +
    "\110\024\145\051\142\055\033\056\104\060\036\061\035" +
    "\001\002\000\004\052\334\001\002\000\032\003\114\010" +
    "\117\013\115\014\110\015\111\017\103\020\120\021\122" +
    "\034\116\035\102\044\000\056\104\001\002\000\036\003" +
    "\uffba\010\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba" +
    "\020\uffba\021\uffba\034\uffba\035\uffba\044\uffba\045\uffba\056" +
    "\uffba\001\002\000\034\003\uffbd\010\uffbd\013\uffbd\014\uffbd" +
    "\015\uffbd\017\uffbd\020\uffbd\021\uffbd\034\uffbd\035\uffbd\044" +
    "\uffbd\045\uffbd\056\uffbd\001\002\000\034\003\uffa4\010\uffa4" +
    "\013\uffa4\014\uffa4\015\uffa4\017\uffa4\020\uffa4\021\uffa4\034" +
    "\uffa4\035\uffa4\044\uffa4\045\uffa4\056\uffa4\001\002\000\034" +
    "\003\uffa9\010\uffa9\013\uffa9\014\uffa9\015\uffa9\017\uffa9\020" +
    "\uffa9\021\uffa9\034\uffa9\035\uffa9\044\uffa9\045\uffa9\056\uffa9" +
    "\001\002\000\034\003\uffbc\010\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\034\uffbc\035\uffbc\044\uffbc" +
    "\045\uffbc\056\uffbc\001\002\000\036\003\uffa4\010\uffa4\013" +
    "\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4" +
    "\034\uffa4\035\uffa4\044\uffa4\045\uffa4\056\uffa4\001\002\000" +
    "\036\003\uffa9\010\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9" +
    "\017\uffa9\020\uffa9\021\uffa9\034\uffa9\035\uffa9\044\uffa9\045" +
    "\uffa9\056\uffa9\001\002\000\036\003\uffb9\010\uffb9\013\uffb9" +
    "\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\034" +
    "\uffb9\035\uffb9\044\uffb9\045\uffb9\056\uffb9\001\002\000\010" +
    "\013\115\014\110\056\104\001\002\000\010\046\215\052" +
    "\347\054\220\001\002\000\004\050\350\001\002\000\036" +
    "\003\uffa9\010\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\034\uffa9\035\uffa9\044\uffa9\045\uffa9" +
    "\056\uffa9\001\002\000\036\003\uffb1\010\uffb1\013\uffb1\014" +
    "\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\034\uffb1" +
    "\035\uffb1\044\uffb1\045\uffb1\056\uffb1\001\002\000\006\044" +
    "\uffd3\056\uffd3\001\002\000\004\056\015\001\002\000\006" +
    "\052\uffc8\053\uffc8\001\002\000\004\056\015\001\002\000" +
    "\006\052\uffca\053\353\001\002\000\010\046\360\052\uffc6" +
    "\053\uffc6\001\002\000\004\047\361\001\002\000\006\052" +
    "\uffc5\053\uffc5\001\002\000\012\005\uffff\006\uffff\044\uffff" +
    "\056\uffff\001\002\000\012\005\uffe7\006\uffe7\044\uffe7\056" +
    "\uffe7\001\002\000\012\003\uffd8\011\uffd8\045\uffd8\056\uffd8" +
    "\001\002\000\012\046\374\050\uffea\051\uffcd\053\uffea\001" +
    "\002\000\006\050\uffeb\053\uffeb\001\002\000\006\050\371" +
    "\053\370\001\002\000\004\056\372\001\002\000\020\003" +
    "\uffed\005\uffed\006\uffed\011\uffed\044\uffed\045\uffed\056\uffed" +
    "\001\002\000\010\046\374\050\uffea\053\uffea\001\002\000" +
    "\006\050\uffec\053\uffec\001\002\000\004\047\375\001\002" +
    "\000\006\050\uffe9\053\uffe9\001\002\000\004\044\uffe2\001" +
    "\002\000\004\044\uffe3\001\002\000\004\044\000\001\002" +
    "\000\004\044\uffe6\001\002\000\004\044\u0103\001\002\000" +
    "\012\003\uffdf\011\uffdf\045\uffdf\056\uffdf\001\002\000\012" +
    "\003\051\011\055\045\u0105\056\015\001\002\000\012\005" +
    "\uffe5\006\uffe5\044\uffe5\056\uffe5\001\002\000\012\005\uffff" +
    "\006\uffff\044\uffff\056\uffff\001\002\000\012\005\uffe4\006" +
    "\uffe4\044\uffe4\056\uffe4\001\002\000\010\011\055\045\ufffe" +
    "\056\015\001\002\000\004\056\061\001\002\000\004\045" +
    "\u010c\001\002\000\010\011\uffda\045\uffda\056\uffda\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\ufffd\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010c\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\006\001\001\000\002\001\001\000\004\062\007" +
    "\001\001\000\004\004\010\001\001\000\014\005\012\006" +
    "\017\012\015\015\016\056\011\001\001\000\006\013\365" +
    "\014\366\001\001\000\002\001\001\000\004\022\u0107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\041\001\001\000\004\056" +
    "\022\001\001\000\006\007\026\010\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\044\001\001\000" +
    "\002\001\001\000\004\020\377\001\001\000\002\001\001" +
    "\000\004\016\046\001\001\000\012\012\051\017\055\023" +
    "\053\056\047\001\001\000\012\013\365\014\366\024\363" +
    "\026\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\070\361\001\001\000\002\001\001\000\004\073\056" +
    "\001\001\000\002\001\001\000\006\024\057\026\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\074\062" +
    "\001\001\000\002\001\001\000\012\027\066\030\070\031" +
    "\067\056\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\072\001\001\000\004\025\074\001\001\000\002" +
    "\001\001\000\010\012\075\056\011\075\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\100\001\001" +
    "\000\014\032\104\053\112\054\111\055\106\062\105\001" +
    "\001\000\002\001\001\000\004\040\330\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\011\142\032\134\044\234\045\136" +
    "\047\150\050\135\001\001\000\004\040\126\001\001\000" +
    "\004\076\124\001\001\000\002\001\001\000\004\064\123" +
    "\001\001\000\002\001\001\000\004\063\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\130\001\001" +
    "\000\014\032\104\053\112\054\111\055\106\062\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\011\142" +
    "\032\134\033\151\034\143\035\147\036\145\037\137\044" +
    "\140\045\136\047\150\050\135\001\001\000\004\051\215" +
    "\001\001\000\002\001\001\000\004\060\173\001\001\000" +
    "\002\001\001\000\004\057\211\001\001\000\016\011\142" +
    "\032\134\044\202\045\136\047\150\050\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\011\142\032\134" +
    "\045\170\047\150\050\135\001\001\000\002\001\001\000" +
    "\004\056\164\001\001\000\002\001\001\000\004\061\160" +
    "\001\001\000\004\042\153\001\001\000\024\011\142\032" +
    "\134\035\147\036\154\037\137\044\140\045\136\047\150" +
    "\050\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\142\032\134\050\161\001\001\000\002\001\001\000" +
    "\020\011\142\032\134\037\163\044\140\045\136\047\150" +
    "\050\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\011\142\032\134\044\166\045\136\047\150\050\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\011\142\032\134\047\174\050\135\001\001\000\004\061" +
    "\160\001\001\000\002\001\001\000\004\101\177\001\001" +
    "\000\004\041\200\001\001\000\004\064\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\011\142\032\134\044\213" +
    "\045\136\047\150\050\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\103\230\001\001\000\002\001\001" +
    "\000\020\011\142\032\134\044\222\045\136\046\221\047" +
    "\150\050\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\011\142\032\134\044\226\045\136\047\150\050\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\011\142\032\134\044\231\045\136\047\150" +
    "\050\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\236\001\001" +
    "\000\002\001\001\000\004\064\240\001\001\000\002\001" +
    "\001\000\016\011\142\032\134\044\242\045\136\047\150" +
    "\050\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\064\246\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\064\252\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\011\142\032\134\033\151\034" +
    "\257\035\147\036\145\037\137\044\140\045\136\047\150" +
    "\050\135\001\001\000\002\001\001\000\014\032\104\053" +
    "\262\054\111\055\261\062\105\001\001\000\006\043\265" +
    "\102\266\001\001\000\004\041\263\001\001\000\004\064" +
    "\264\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\267\001\001\000\002\001\001\000\012\032\104\054" +
    "\272\055\271\062\105\001\001\000\004\041\275\001\001" +
    "\000\004\041\273\001\001\000\004\064\274\001\001\000" +
    "\002\001\001\000\004\064\276\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\302\001" +
    "\001\000\016\032\104\053\112\054\111\055\106\062\105" +
    "\063\303\001\001\000\002\001\001\000\004\066\305\001" +
    "\001\000\002\001\001\000\016\011\142\032\134\044\325" +
    "\045\136\047\150\050\135\001\001\000\002\001\001\000" +
    "\004\064\321\001\001\000\020\011\142\032\134\044\222" +
    "\045\136\046\312\047\150\050\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\065\315\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\065\320\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\324\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\327\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\011\142\032\134\033\151\034\332\035\147\036" +
    "\145\037\137\044\140\045\136\047\150\050\135\001\001" +
    "\000\002\001\001\000\012\032\104\054\335\055\334\062" +
    "\105\001\001\000\004\100\341\001\001\000\004\077\336" +
    "\001\001\000\004\041\337\001\001\000\004\064\340\001" +
    "\001\000\002\001\001\000\004\041\342\001\001\000\004" +
    "\064\343\001\001\000\002\001\001\000\004\032\345\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\064\350" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\353\056\064\001\001\000\002\001\001\000\010\027\355" +
    "\031\067\056\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\362" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\372" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\u0100\001\001\000\004\071" +
    "\u0101\001\001\000\002\001\001\000\004\016\u0103\001\001" +
    "\000\012\012\051\017\055\023\053\056\047\001\001\000" +
    "\004\072\u0105\001\001\000\004\063\u0106\001\001\000\002" +
    "\001\001\000\010\023\u010a\056\u0108\067\u0109\001\001\000" +
    "\006\024\363\026\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\u010c\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {


	Tab.init(); // Universe scope
	
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "string", CUP$MJParser$actions.stringType));
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "bool", CUP$MJParser$actions.boolType));

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }


	
	int printCallCount = 0;
	boolean errorDetected = false;
	Logger log = Logger.getLogger(getClass());
	
	// slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


							   
	Logger log = Logger.getLogger(getClass());
	
	public static final int String = 5;
 	public static final int Bool = 6;
		
  	public static final Struct stringType = new Struct(String),
   		         			   boolType = new Struct(Bool);
	  
	
	Struct currentType, currentMethType;
	
	Boolean main = false;
	Boolean inside_class = false, inside_meth = false;
	Boolean void_meth = false;
	
	int mainStatements = 0, mainMethodCalls = 0, StatementBlocks = 0;
	int insideFunc = 0, outsideFunc = 0;
	
	Stack<Integer> fixup_and = new Stack<Integer>();	 
	Stack<Integer> fixup_or = new Stack<Integer>();	 
	Stack<Integer> fixup_adr = new Stack<Integer>();	 	 	 
	
	void report_error(String message) {
    	parser.errorDetected = true;
        log.error(message);
    }

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Mulop ::= MOD 
            {
              Integer RESULT =null;
		 RESULT=Code.rem; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Mulop ::= DIV 
            {
              Integer RESULT =null;
		 RESULT=Code.div; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Mulop ::= MUL 
            {
              Integer RESULT =null;
		 RESULT=Code.mul; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Addop ::= MINUS 
            {
              Integer RESULT =null;
		 RESULT=Code.sub; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Addop ::= PLUS 
            {
              Integer RESULT =null;
		 RESULT=Code.add; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Relop ::= GREATER_EQUALS 
            {
              Integer RESULT =null;
		 RESULT=Code.ge; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Relop ::= GREATER 
            {
              Integer RESULT =null;
		 RESULT=Code.gt; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Relop ::= LESS_EQUALS 
            {
              Integer RESULT =null;
		 RESULT=Code.le; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Relop ::= LESS 
            {
              Integer RESULT =null;
		 RESULT=Code.lt; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Relop ::= NOT_EQUALS 
            {
              Integer RESULT =null;
		 RESULT=Code.ne; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Relop ::= EQUALS 
            {
              Integer RESULT =null;
		 RESULT=Code.eq; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Designator ::= Designator LBRACK error RBRACK 
            {
              Obj RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
			 	 	log.debug("Uspesan oporavak od greske na liniji " + eleft + " pri indeksiranju niza"); 
		 	   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Designator ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	   		   		RESULT = Tab.find(name);
	   		   		
	   		   		log.info("Koriscenje identifikatora " + name + " na liniji " +  nameleft);
	   		   		
	   		   		if(RESULT == Tab.noObj)
	   		   			report_error("Greska na liniji "  + nameleft + ":promenjiva " + name + " ne postoji");
	   		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Designator ::= THIS DOT IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	   		   		log.info("Koriscenje polja " + name + " na liniji " +  nameleft);
	   		   		
			   		RESULT = Tab.find(name);
	   		   		
	   		   		if(RESULT  == Tab.noObj)
	   		   			RESULT = Tab.find("super." + name);
	   		   		
	   		   		if(RESULT == Tab.noObj)
	   		   			report_error("Greska na liniji "  + nameleft + ":polje " + name + " ne postoji");
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Designator ::= SUPER DOT IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	   		   		log.info("Koriscenje polja super." + name + " na liniji " +  nameleft);
	   		   		
   		   			RESULT = Tab.find("super." + name);
	   		   		
	   		   		if(RESULT == Tab.noObj)
	   		   			report_error("Greska na liniji "  + nameleft + ":polje " + name + " ne postoji");
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Designator ::= Designator DOT IDENT 
            {
              Obj RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			   		// TODO ovde treba da ide provera uslova da li je o instanca klase
			   		Code.load(o); // adr o na estek za kasnije getfield ili putfield 
			   		
			  		for(Obj fld : o.getType().getMembers().symbols())
			  			if(fld.getName().equals(id)) {
			  				RESULT = fld;
			  				break;
			  			}
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Designator ::= Designator LBRACK NT$12 Expr RBRACK 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$12 ::= 
            {
              Obj RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

				   if (o.getType().getKind()==Struct.Array) { 
				   		Code.load(o); // adr o na estek za kasnije aload a
				   		RESULT = new Obj(Obj.Elem, "", o.getType().getElemType());
			   		} else {
			   			report_error("Greska na liniji "  + oleft + ":tip nije niz");
			   		}
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$12",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FactorMethodCall ::= LPAREN ActPars RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactorMethodCall",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FactorMethodCall ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FactorMethodCall",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Factor ::= Designator 
            {
              Struct RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		   		Code.load(o);
		   		
		   		RESULT = o.getType();
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Factor ::= Designator FactorMethodCall 
            {
              Struct RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		   		int dest_adr = o.getAdr() - Code.pc; // relativna adresa 
		   		Code.put(Code.call);
		   		Code.put2(dest_adr);
		   		
		   		RESULT = o.getType();
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Factor ::= NEW Type 
            {
              Struct RESULT =null;
		
		   		Code.put(Code.new_);
		   		Code.put2(currentType.getNumberOfFields());
		   		
		   		RESULT = currentType;
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Factor ::= NEW Type LBRACK Expr RBRACK 
            {
              Struct RESULT =null;
		
		   		Code.put(Code.newarray);
		   		Code.put(currentType==Tab.charType ? 0 : 1);
		   		
		   		RESULT = currentType;
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Factor ::= LPAREN Expr RPAREN 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		   		RESULT = t;
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Factor ::= Const 
            {
              Struct RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj con = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
 	    		Code.load(con);
		   		
		   		RESULT = con.getType();
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Term ::= Factor 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			 RESULT = t;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Term ::= Term Mulop Factor 
            {
              Struct RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 	Code.put(op);
		 	
		 	RESULT = t1;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ExprPart ::= Term 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = t;
		 	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprPart",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ExprPart ::= ExprPart Addop Term 
            {
              Struct RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 		Code.put(op);
		 		
		 		RESULT = t1;
		 	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprPart",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Expr ::= MINUS ExprPart 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	 		Code.put(Code.neg);
	 		
	 		RESULT = t;
	 	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expr ::= ExprPart 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 	RESULT = t;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		 	 	Code.putFalseJump(op, 0); // dummy
		 	 	fixup_and.push(Code.pc - 2);
		 	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CondFact ::= Expr 
            {
              Object RESULT =null;
		
			 	Code.loadConst(0);
		 	 	Code.putFalseJump(Code.ne, 0); // dummy
		 	 	fixup_and.push(Code.pc - 2);
		 	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CondTerm ::= CondTerm AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CondTermFixed ::= CondTerm 
            {
              Object RESULT =null;
		
				  	Code.putJump(0); // dummy
				  	fixup_or.push(Code.pc - 2);
				  	
				  	while(!fixup_and.empty())
				  		Code.fixup(fixup_and.pop());
				  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermFixed",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Condition ::= CondTermFixed 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Condition ::= Condition OR CondTermFixed 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ConditionFixed ::= Condition DummyJump 
            {
              Object RESULT =null;
		
				  	while(!fixup_or.empty())
				  		Code.fixup(fixup_or.pop());
				   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionFixed",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DummyJump ::= 
            {
              Object RESULT =null;
		
				   	Code.putJump(0); // dummy
					fixup_adr.push(Code.pc - 2);
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DummyJump",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DummyJumpEndFix ::= NT$11 DummyJump 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DummyJumpEndFix",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$11 ::= 
            {
              Object RESULT =null;
 Code.pc+=3; Code.fixup(fixup_adr.pop()); Code.pc-=3; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$11",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EndFix ::= 
            {
              Object RESULT =null;
		 Code.fixup(fixup_adr.pop()); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("EndFix",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ActPars ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ActPars ::= ActPars COMMA Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CountStatementBlocks ::= 
            {
              Object RESULT =null;
		 StatementBlocks++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CountStatementBlocks",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CountMethodCalls ::= 
            {
              Object RESULT =null;
		 if(main)  mainMethodCalls++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CountMethodCalls",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CountStatements ::= 
            {
              Object RESULT =null;
		 if(main)  mainStatements++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CountStatements",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // StatementMatched ::= error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 log.debug("Uspesan oporavak od greske na liniji " + eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // StatementMatched ::= OpenScope LBRACE StatementList CloseScope RBRACE CountStatementBlocks 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // StatementMatched ::= RETURN Expr SEMI CountStatements 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
					 	Code.put(Code.exit);
						Code.put(Code.return_);
						
						if (currentMethType == Tab.noType)
							report_error("Greska na liniji "+ tleft + ":metod ne sme imati return sa izrazom jer je deklarisan sa void");
						if (!t.assignableTo(currentMethType))
							report_error("Greska na liniji "+ tleft + ":tip izraza nekompatibilan sa deklaracijom metoda");
			  		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // StatementMatched ::= RETURN SEMI CountStatements 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
			  		 	Code.put(Code.exit);
						Code.put(Code.return_);
						
						if (currentMethType != Tab.noType)
							report_error("Greska na liniji "+ sleft + ":fali return sa izrazom");			
			  		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // StatementMatched ::= BREAK SEMI CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // StatementMatched ::= PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI CountStatements 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
				  	 	Code.loadConst(n);
				  	 	Code.put(t == Tab.charType ? Code.bprint : Code.print);
				  	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // StatementMatched ::= PRINT LPAREN Expr RPAREN SEMI CountStatements 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
				  	 	Code.put(Code.const_n + 0);
				  	 	Code.put(t == Tab.charType ? Code.bprint : Code.print);
				  	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // StatementMatched ::= READ LPAREN Designator RPAREN SEMI CountStatements 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
				  	 	Code.put(o.getType() == Tab.charType ? Code.bread : Code.read);
				  	 	Code.store(o);
				  	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // StatementMatched ::= Designator LPAREN RPAREN SEMI CountMethodCalls 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // StatementMatched ::= Designator LPAREN ActPars RPAREN SEMI CountMethodCalls 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // StatementMatched ::= Designator DEC CountStatements SEMI 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
				  	 	Code.load(o);
				  	 	Code.put(Code.const_1);
				  	 	Code.put(Code.sub);
				  		Code.store(o);
				  	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // StatementMatched ::= Designator INC SEMI CountStatements 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
				  	 	Code.load(o);
				  	 	Code.put(Code.const_1);
				  	 	Code.put(Code.add);
				  		Code.store(o);
				  	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // StatementMatched ::= Designator EQUAL Expr SEMI CountStatements 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
				  		Code.store(o);
				  	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // StatementMatched ::= DO Pc LBRACE StatementList RBRACE WHILE LPAREN ConditionFixed RPAREN SEMI NT$10 EndFix CountStatements 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).right;
		Integer pc = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$10 ::= 
            {
              Object RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Integer pc = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
 Code.putJump(pc); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$10",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // StatementMatched ::= WHILE Pc LPAREN ConditionFixed RPAREN StatementMatched NT$9 EndFix CountStatements 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Integer pc = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$9 ::= 
            {
              Object RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Integer pc = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
 Code.putJump(pc); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$9",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // StatementMatched ::= IF LPAREN ConditionFixed RPAREN StatementMatched DummyJumpEndFix ELSE StatementMatched EndFix CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // StatementUnmatched ::= WHILE Pc LPAREN ConditionFixed RPAREN StatementUnmatched NT$8 EndFix CountStatements 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Integer pc = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$8 ::= 
            {
              Object RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Integer pc = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
 Code.putJump(pc); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // StatementUnmatched ::= IF LPAREN ConditionFixed RPAREN StatementMatched DummyJumpEndFix ELSE StatementUnmatched EndFix CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // StatementUnmatched ::= IF LPAREN ConditionFixed RPAREN Statement EndFix CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Statement ::= StatementMatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Statement ::= StatementUnmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Pc ::= 
            {
              Integer RESULT =null;
		 RESULT = Code.pc; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Pc",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FormPar ::= Type IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				Tab.insert(Obj.Var, name, new Struct(Struct.Array, currentType));
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPar",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FormPar ::= Type IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				Tab.insert(Obj.Var, name, currentType);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPar",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FormPars ::= FormPar 
            {
              Integer RESULT =null;
		 RESULT = 1; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FormPars ::= FormPars COMMA FormPar 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT = n + 1; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MethodPars ::= error 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
			   		RESULT = 0;
			 		log.debug("Uspesan oporavak od greske na liniji " + eleft + " u formalnim parametrima do )"); 
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodPars",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // MethodPars ::= error COMMA FormPars 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
			   		RESULT = n;
					log.debug("Uspesan oporavak od greske na liniji " + eleft + " u formalnim parametrima do ,"); 
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodPars",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MethodPars ::= 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodPars",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MethodPars ::= FormPars 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = n; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodPars",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MethodName ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			   		currentMethType = currentType;
			   		
				   	if(inside_class) {
				   		insideFunc++;
				   	}
				   	else {
				   		outsideFunc++;
				   		if (name.equals("main")) {
				   			main = true;
				   			Code.mainPc = Code.pc;
				   			if (!void_meth)
				   				report_error("Metod main mora biti void");
				   		}
				   	}
				   	 
				   	RESULT = Tab.insert(Obj.Meth, name, void_meth ? Tab.noType : currentType);
				   	RESULT.setAdr(Code.pc);
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodName",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MethodDeclPart ::= MethodName NT$5 LPAREN MethodPars RPAREN OpenScope MethodLocalVarDeclList NT$6 LBRACE StatementList RBRACE NT$7 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		 inside_meth = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclPart",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;

				   		Tab.chainLocalSymbols(m); 
				   		if (void_meth) {
							Code.put(Code.exit); 
							Code.put(Code.return_); 
						} 
						else { 
							// postaviti trap funkciju na kraj tela funkcije,
							// da izazove run time grešku ako se zaobiđe return 
							Code.put(Code.trap); 
							Code.put(1);
						}
				   		main = false; 
				   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

				   		m.setLevel(n);
				    	Code.put(Code.enter); 
				   		Code.put(n);
				   		Code.put(Tab.currentScope().getnVars());
				   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$5 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 inside_meth = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MethodLocalVarDeclList ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							 	 log.debug("Uspesan oporavak od greske na liniji " + eleft + " pri definisanju lokalne promenjive do {"); 
						   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodLocalVarDeclList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MethodLocalVarDeclList ::= error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
						 	 	log.debug("Uspesan oporavak od greske na liniji " + eleft + " pri definisanju lokalne promenjive do ;"); 
					 	   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodLocalVarDeclList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MethodLocalVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodLocalVarDeclList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodLocalVarDeclList ::= MethodLocalVarDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodLocalVarDeclList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodDecl ::= VOID NT$4 MethodDeclPart 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 void_meth = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$4 ::= 
            {
              Object RESULT =null;
 void_meth = true; currentType = Tab.noType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodDecl ::= Type MethodDeclPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 	Obj typeNode = Tab.find(typeName);
			if (typeNode == Tab.noObj) {
				log.info("Nije pronadjen tip " + typeName + " u tabeli simbola");
				currentType = Tab.noType;
			}
			else {
				if (Obj.Type == typeNode.getKind()) {
					currentType = typeNode.getType();
				}
				else {
					report_error("Greska na liniji" + typeNameleft + ": Ime " + typeName + " ne predstavlja tip ");
					currentType = Tab.noType;
				}
			}
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ClassVarMethodDecl ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					 	 	log.debug("Uspesan oporavak od greske na liniji " + eleft + " pri definicji klase"); 
				 	   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarMethodDecl",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClassVarMethodDecl ::= MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarMethodDecl",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassVarMethodDecl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarMethodDecl",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassVarMethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarMethodDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassVarMethodDeclList ::= ClassVarMethodDeclList ClassVarMethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarMethodDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassName ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			  	inside_class = true;
			  	RESULT = Tab.insert(Obj.Type, name, new Struct(Struct.Class));
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassName",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassBase ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			 	 log.debug("Uspesan oporavak od greske na liniji " + eleft + " pri nasledjivanju klasa"); 
		 	  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassBase",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassBase ::= IDENT 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			  	RESULT = name;
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassBase",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassDecl ::= CLASS ClassName EXTENDS ClassBase OpenScope NT$2 LBRACE ClassVarMethodDeclList RBRACE NT$3 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int baseleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		String base = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int baseleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String base = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
 Tab.chainLocalSymbols(c.getType()); inside_class = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$2 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int baseleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String base = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

			  	Obj b = Tab.find(base); 
			  		
			  	for(Obj fld : b.getType().getMembers().symbols())
			  		Tab.insert(Obj.Fld, "super." + fld.getName(), fld.getType());
			  	
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassDecl ::= CLASS ClassName OpenScope LBRACE ClassVarMethodDeclList RBRACE NT$1 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$1 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
 Tab.chainLocalSymbols(c.getType()); inside_class = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Var ::= IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
 			if(!inside_class && !inside_meth)
				Code.dataSize++;
			Tab.insert(inside_class ? Obj.Fld : Obj.Var, name, new Struct(Struct.Array, currentType));  
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Var ::= IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			if(!inside_class && !inside_meth)
				Code.dataSize++;
			Tab.insert(inside_class ? Obj.Fld : Obj.Var, name, currentType);  
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarList ::= Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarList ::= VarList COMMA Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDecl ::= Type VarList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= BOOL 
            {
              Obj RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		 	RESULT = new Obj(Obj.Con, "", boolType);  
 	    	RESULT.setAdr(val ? 1:0);
		  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Const ::= CHAR 
            {
              Obj RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character val = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		  	RESULT = new Obj(Obj.Con, "", Tab.charType);  
 	    	RESULT.setAdr(val);
		  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Const ::= NUMBER 
            {
              Obj RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		  	RESULT = new Obj(Obj.Con, "", Tab.intType);  
 	    	RESULT.setAdr((int)val); // U adr se pamti vrednost konstante
		  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstListPart ::= IDENT EQUAL STRING 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					   if(Tab.currentScope.findSymbol(name) != null)
					  		report_error("Vec postoji identifikator " + name);
					  	else {
					   		Obj con = Tab.insert(Obj.Con, name, new Struct(Struct.Array, Tab.charType));
					   		Code.buf[con.getAdr()] = (byte) val.length();
					   		for(int i = 0; i < val.length(); i++) {
					   			Obj e = Tab.insert(Obj.Con, name + "@" + i, Tab.charType);
					   			Code.buf[e.getAdr()] = (byte) val[i];
					   		}
				   		}
				   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstListPart",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstListPart ::= IDENT EQUAL Const 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				  	if(Tab.currentScope.findSymbol(name) != null)
				  		report_error("Vec postoji identifikator " + name);
				  	else {
				  		Obj con = Tab.insert(Obj.Con, name, currentType);
				  		con.setAdr(o.getAdr());
				  		
				  		if(o.getType() != currentType)
				  			report_error("Greska u tipu na liniji " + oleft);
				  	}
				   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstListPart",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstList ::= ConstListPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstList ::= ConstList COMMA ConstListPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstDecl ::= CONST error SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
			  	log.debug("Uspesan oporavak od greske na liniji " + sleft + " pri definisanju konstante"); 
		  	  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDecl ::= CONST Type ConstList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclList ::= DeclList Decl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		  
				RESULT = Tab.insert(Obj.Prog, pName, Tab.noType);
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= PROG ProgName OpenScope DeclList LBRACE MethodDeclList NT$0 RBRACE CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		
				int array_count = 0;
				int var_count = 0;
				int con_count = 0;
				int class_count = 0;
				
				for(Obj s : p.getLocalSymbols())
					if(s.getKind() == Obj.Var)
						if(s.getType().getKind() == Struct.Array)
							array_count++;
						else
							var_count++;
					else if(s.getKind() == Obj.Con)
						con_count++;
					else if(s.getKind() == Obj.Type)
						class_count++;
									
				log.info("Broj globalnih prostih promenjivih:" + var_count);
				log.info("Broj globalnih nizova:" + array_count);
				log.info("Broj globalnih konstanti:" + con_count);
				log.info("Broj unutrasnjih klasa:" + class_count);
				log.info("Broj iskaza u main-u:" + mainStatements);
				log.info("Broj poziva metoda u main-u:" + mainMethodCalls);
				log.info("Broj blokova naredbi:" + StatementBlocks);
				log.info("Broj funkcija glavnog programa:" + outsideFunc);
				log.info("Broj funkcija unutrasnjih klasa:" + insideFunc);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
 Tab.chainLocalSymbols(p); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CloseScope ::= 
            {
              Object RESULT =null;
		 Tab.closeScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CloseScope",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // OpenScope ::= 
            {
              Object RESULT =null;
		 Tab.openScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpenScope",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

