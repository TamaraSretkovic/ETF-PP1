
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Aug 15 03:10:27 CEST 2013
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.mj.runtime.Code;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Aug 15 03:10:27 CEST 2013
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\004\000\002\052\002\000\002\053" +
    "\002\000\002\057\002\000\002\002\013\000\002\003\003" +
    "\000\002\004\004\000\002\004\002\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\006\000\002" +
    "\006\005\000\002\007\005\000\002\007\003\000\002\010" +
    "\005\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\005\000\002\014\005\000" +
    "\002\014\003\000\002\013\003\000\002\013\005\000\002" +
    "\060\002\000\002\015\012\000\002\061\002\000\002\015" +
    "\014\000\002\016\003\000\002\016\003\000\002\021\003" +
    "\000\002\017\004\000\002\017\002\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\051\003\000\002" +
    "\022\004\000\002\022\002\000\002\062\002\000\002\023" +
    "\016\000\002\063\002\000\002\064\002\000\002\023\017" +
    "\000\002\025\004\000\002\025\002\000\002\025\004\000" +
    "\002\025\003\000\002\026\003\000\002\024\003\000\002" +
    "\024\002\000\002\024\005\000\002\024\003\000\002\027" +
    "\006\000\002\027\004\000\002\044\004\000\002\044\002" +
    "\000\002\045\003\000\002\045\003\000\002\047\010\000" +
    "\002\047\012\000\002\047\010\000\002\050\012\000\002" +
    "\050\005\000\002\050\010\000\002\050\010\000\002\050" +
    "\010\000\002\050\012\000\002\050\005\000\002\050\005" +
    "\000\002\050\006\000\002\050\010\000\002\050\014\000" +
    "\002\050\004\000\002\054\002\000\002\055\002\000\002" +
    "\056\002\000\002\046\005\000\002\046\004\000\002\046" +
    "\004\000\002\046\006\000\002\046\005\000\002\036\005" +
    "\000\002\036\003\000\002\031\005\000\002\031\003\000" +
    "\002\032\005\000\002\032\003\000\002\033\003\000\002" +
    "\033\005\000\002\034\003\000\002\034\004\000\002\035" +
    "\005\000\002\035\003\000\002\042\005\000\002\042\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\005\000" +
    "\002\043\003\000\002\043\003\000\002\043\007\000\002" +
    "\043\004\000\002\043\006\000\002\043\005\000\002\043" +
    "\003\000\002\030\006\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\003\000\002\030\006\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\040" +
    "\003\000\002\040\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\375\000\004\004\005\001\002\000\004\002\377\001" +
    "\002\000\004\056\006\001\002\000\012\005\ufffc\006\ufffc" +
    "\044\ufffc\056\ufffc\001\002\000\012\005\000\006\000\044" +
    "\000\056\000\001\002\000\012\005\ufffa\006\ufffa\044\ufffa" +
    "\056\ufffa\001\002\000\012\005\022\006\021\044\014\056" +
    "\015\001\002\000\004\056\342\001\002\000\012\005\ufffb" +
    "\006\ufffb\044\ufffb\056\ufffb\001\002\000\010\011\uffda\045" +
    "\uffda\056\uffda\001\002\000\050\023\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\027\uffdc\032\uffdc\033\uffdc\036\uffdc\037\uffdc\040" +
    "\uffdc\041\uffdc\042\uffdc\043\uffdc\046\uffdc\047\uffdc\050\uffdc" +
    "\052\uffdc\053\uffdc\056\uffdc\001\002\000\012\005\ufff8\006" +
    "\ufff8\044\ufff8\056\ufff8\001\002\000\012\005\ufff7\006\ufff7" +
    "\044\ufff7\056\ufff7\001\002\000\012\005\ufff9\006\ufff9\044" +
    "\ufff9\056\ufff9\001\002\000\004\056\043\001\002\000\006" +
    "\003\024\056\015\001\002\000\004\056\027\001\002\000" +
    "\004\050\025\001\002\000\012\005\ufff5\006\ufff5\044\ufff5" +
    "\056\ufff5\001\002\000\006\050\ufff3\053\ufff3\001\002\000" +
    "\004\022\034\001\002\000\006\050\032\053\031\001\002" +
    "\000\004\056\027\001\002\000\012\005\ufff6\006\ufff6\044" +
    "\ufff6\056\ufff6\001\002\000\006\050\ufff4\053\ufff4\001\002" +
    "\000\012\055\036\057\035\060\041\061\040\001\002\000" +
    "\006\050\ufff0\053\ufff0\001\002\000\006\050\ufff1\053\ufff1" +
    "\001\002\000\006\050\ufff2\053\ufff2\001\002\000\006\050" +
    "\uffee\053\uffee\001\002\000\006\050\uffef\053\uffef\001\002" +
    "\000\006\007\044\044\000\001\002\000\006\007\uffe2\044" +
    "\uffe2\001\002\000\006\003\360\056\361\001\002\000\004" +
    "\044\046\001\002\000\012\003\uffe0\011\uffe0\045\uffe0\056" +
    "\uffe0\001\002\000\012\003\051\011\055\045\053\056\015" +
    "\001\002\000\004\056\334\001\002\000\012\003\uffdd\011" +
    "\uffdd\045\uffdd\056\uffdd\001\002\000\012\003\uffdf\011\uffdf" +
    "\045\uffdf\056\uffdf\001\002\000\012\005\uffe8\006\uffe8\044" +
    "\uffe8\056\uffe8\001\002\000\012\003\uffde\011\uffde\045\uffde" +
    "\056\uffde\001\002\000\004\056\uffd7\001\002\000\012\003" +
    "\uffe1\011\uffe1\045\uffe1\056\uffe1\001\002\000\004\056\060" +
    "\001\002\000\004\051\uffd0\001\002\000\004\051\062\001" +
    "\002\000\010\003\064\052\uffce\056\015\001\002\000\004" +
    "\056\331\001\002\000\006\052\uffcc\053\327\001\002\000" +
    "\006\052\uffcf\053\324\001\002\000\004\052\067\001\002" +
    "\000\010\003\000\044\000\056\000\001\002\000\010\003" +
    "\071\044\uffd3\056\uffd3\001\002\000\010\044\uffd1\050\323" +
    "\056\uffd1\001\002\000\006\044\073\056\015\001\002\000" +
    "\034\003\uffc8\010\uffc8\013\uffc8\014\uffc8\015\uffc8\017\uffc8" +
    "\020\uffc8\021\uffc8\034\uffc8\035\uffc8\044\uffc8\045\uffc8\056" +
    "\uffc8\001\002\000\006\044\uffd4\056\uffd4\001\002\000\034" +
    "\003\110\010\113\013\111\014\104\015\105\017\077\020" +
    "\115\021\116\034\112\035\076\044\000\045\114\056\100" +
    "\001\002\000\004\051\316\001\002\000\004\051\307\001" +
    "\002\000\060\022\uff92\023\uff92\024\uff92\025\uff92\026\uff92" +
    "\027\uff92\030\uff92\031\uff92\032\uff92\033\uff92\036\uff92\037" +
    "\uff92\040\uff92\041\uff92\042\uff92\043\uff92\046\uff92\047\uff92" +
    "\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92\001\002\000" +
    "\016\022\270\030\271\031\273\046\204\051\274\054\206" +
    "\001\002\000\034\003\uffc6\010\uffc6\013\uffc6\014\uffc6\015" +
    "\uffc6\017\uffc6\020\uffc6\021\uffc6\034\uffc6\035\uffc6\044\uffc6" +
    "\045\uffc6\056\uffc6\001\002\000\004\044\263\001\002\000" +
    "\004\054\261\001\002\000\004\051\246\001\002\000\034" +
    "\003\uffc9\010\uffc9\013\uffc9\014\uffc9\015\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\034\uffc9\035\uffc9\044\uffc9\045\uffc9\056\uffc9" +
    "\001\002\000\034\003\uffc7\010\uffc7\013\uffc7\014\uffc7\015" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\034\uffc7\035\uffc7\044\uffc7" +
    "\045\uffc7\056\uffc7\001\002\000\004\050\245\001\002\000" +
    "\004\054\243\001\002\000\004\051\231\001\002\000\030" +
    "\012\140\013\111\014\104\024\137\050\225\051\134\055" +
    "\136\056\100\057\135\060\130\061\141\001\002\000\012" +
    "\003\uffd6\011\uffd6\045\uffd6\056\uffd6\001\002\000\004\044" +
    "\121\001\002\000\004\050\117\001\002\000\036\003\uffb6" +
    "\010\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\034\uffb6\035\uffb6\044\uffb6\045\uffb6\056\uffb6" +
    "\001\002\000\036\003\uffbc\010\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\034\uffbc\035\uffbc" +
    "\044\uffbc\045\uffbc\056\uffbc\001\002\000\034\003\uffc8\010" +
    "\uffc8\013\uffc8\014\uffc8\015\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\034\uffc8\035\uffc8\044\uffc8\045\uffc8\056\uffc8\001\002\000" +
    "\034\003\110\010\113\013\111\014\104\015\105\017\077" +
    "\020\115\021\116\034\112\035\076\044\000\045\123\056" +
    "\100\001\002\000\004\017\124\001\002\000\004\051\125" +
    "\001\002\000\026\012\140\013\111\014\104\024\137\051" +
    "\134\055\136\056\100\057\135\060\130\061\141\001\002" +
    "\000\052\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97\032" +
    "\uff97\033\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97" +
    "\043\uff97\046\204\047\uff97\050\uff97\051\205\052\uff97\053" +
    "\uff97\054\206\001\002\000\044\023\uffa1\024\uffa1\025\uffa1" +
    "\026\uffa1\027\uffa1\032\uffa1\033\uffa1\036\uffa1\037\uffa1\040" +
    "\uffa1\041\uffa1\042\uffa1\043\uffa1\047\uffa1\050\uffa1\052\uffa1" +
    "\053\uffa1\001\002\000\044\023\uff9f\024\uff9f\025\uff9f\026" +
    "\uff9f\027\uff9f\032\uff9f\033\uff9f\036\uff9f\037\uff9f\040\uff9f" +
    "\041\uff9f\042\uff9f\043\uff9f\047\uff9f\050\uff9f\052\uff9f\053" +
    "\uff9f\001\002\000\036\023\166\024\167\032\uffa6\033\uffa6" +
    "\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\047" +
    "\uffa6\050\uffa6\052\uffa6\053\uffa6\001\002\000\010\032\uffa9" +
    "\033\uffa9\052\uffa9\001\002\000\024\032\uffa8\033\uffa8\036" +
    "\174\037\200\040\177\041\201\042\175\043\176\052\uffa8" +
    "\001\002\000\026\012\140\013\111\014\104\024\137\051" +
    "\134\055\136\056\100\057\135\060\130\061\141\001\002" +
    "\000\044\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\032" +
    "\uff9c\033\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c" +
    "\043\uff9c\047\uff9c\050\uff9c\052\uff9c\053\uff9c\001\002\000" +
    "\044\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\032\uffa0" +
    "\033\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043" +
    "\uffa0\047\uffa0\050\uffa0\052\uffa0\053\uffa0\001\002\000\024" +
    "\012\140\013\111\014\104\051\134\055\136\056\100\057" +
    "\135\060\130\061\141\001\002\000\004\056\015\001\002" +
    "\000\044\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\032" +
    "\uff9d\033\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d" +
    "\043\uff9d\047\uff9d\050\uff9d\052\uff9d\053\uff9d\001\002\000" +
    "\010\032\150\033\uffab\052\uffab\001\002\000\044\023\uffa3" +
    "\024\uffa3\025\155\026\156\027\154\032\uffa3\033\uffa3\036" +
    "\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\047\uffa3" +
    "\050\uffa3\052\uffa3\053\uffa3\001\002\000\006\033\146\052" +
    "\145\001\002\000\004\050\152\001\002\000\026\012\140" +
    "\013\111\014\104\024\137\051\134\055\136\056\100\057" +
    "\135\060\130\061\141\001\002\000\010\032\150\033\uffac" +
    "\052\uffac\001\002\000\026\012\140\013\111\014\104\024" +
    "\137\051\134\055\136\056\100\057\135\060\130\061\141" +
    "\001\002\000\010\032\uffaa\033\uffaa\052\uffaa\001\002\000" +
    "\036\003\uffb6\010\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6" +
    "\017\uffb6\020\uffb6\021\uffb6\034\uffb6\035\uffb6\044\uffb6\045" +
    "\uffb6\056\uffb6\001\002\000\036\003\uffb8\010\uffb8\013\uffb8" +
    "\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\034" +
    "\uffb8\035\uffb8\044\uffb8\045\uffb8\056\uffb8\001\002\000\024" +
    "\012\uff86\013\uff86\014\uff86\051\uff86\055\uff86\056\uff86\057" +
    "\uff86\060\uff86\061\uff86\001\002\000\024\012\uff88\013\uff88" +
    "\014\uff88\051\uff88\055\uff88\056\uff88\057\uff88\060\uff88\061" +
    "\uff88\001\002\000\024\012\uff87\013\uff87\014\uff87\051\uff87" +
    "\055\uff87\056\uff87\057\uff87\060\uff87\061\uff87\001\002\000" +
    "\024\012\140\013\111\014\104\051\134\055\136\056\100" +
    "\057\135\060\130\061\141\001\002\000\044\023\uffa2\024" +
    "\uffa2\025\uffa2\026\uffa2\027\uffa2\032\uffa2\033\uffa2\036\uffa2" +
    "\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\047\uffa2\050" +
    "\uffa2\052\uffa2\053\uffa2\001\002\000\046\023\uff9a\024\uff9a" +
    "\025\uff9a\026\uff9a\027\uff9a\032\uff9a\033\uff9a\036\uff9a\037" +
    "\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\046\162\047\uff9a" +
    "\050\uff9a\052\uff9a\053\uff9a\001\002\000\026\012\140\013" +
    "\111\014\104\024\137\051\134\055\136\056\100\057\135" +
    "\060\130\061\141\001\002\000\004\047\164\001\002\000" +
    "\044\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\032\uff9b" +
    "\033\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043" +
    "\uff9b\047\uff9b\050\uff9b\052\uff9b\053\uff9b\001\002\000\036" +
    "\023\166\024\167\032\uffa5\033\uffa5\036\uffa5\037\uffa5\040" +
    "\uffa5\041\uffa5\042\uffa5\043\uffa5\047\uffa5\050\uffa5\052\uffa5" +
    "\053\uffa5\001\002\000\024\012\uff8a\013\uff8a\014\uff8a\051" +
    "\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a\061\uff8a\001\002" +
    "\000\024\012\uff89\013\uff89\014\uff89\051\uff89\055\uff89\056" +
    "\uff89\057\uff89\060\uff89\061\uff89\001\002\000\024\012\140" +
    "\013\111\014\104\051\134\055\136\056\100\057\135\060" +
    "\130\061\141\001\002\000\044\023\uffa4\024\uffa4\025\155" +
    "\026\156\027\154\032\uffa4\033\uffa4\036\uffa4\037\uffa4\040" +
    "\uffa4\041\uffa4\042\uffa4\043\uffa4\047\uffa4\050\uffa4\052\uffa4" +
    "\053\uffa4\001\002\000\004\052\173\001\002\000\044\023" +
    "\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\032\uff9e\033\uff9e" +
    "\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\047" +
    "\uff9e\050\uff9e\052\uff9e\053\uff9e\001\002\000\026\012\uff90" +
    "\013\uff90\014\uff90\024\uff90\051\uff90\055\uff90\056\uff90\057" +
    "\uff90\060\uff90\061\uff90\001\002\000\026\012\uff8c\013\uff8c" +
    "\014\uff8c\024\uff8c\051\uff8c\055\uff8c\056\uff8c\057\uff8c\060" +
    "\uff8c\061\uff8c\001\002\000\026\012\uff8b\013\uff8b\014\uff8b" +
    "\024\uff8b\051\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061" +
    "\uff8b\001\002\000\026\012\uff8e\013\uff8e\014\uff8e\024\uff8e" +
    "\051\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\001" +
    "\002\000\026\012\uff8f\013\uff8f\014\uff8f\024\uff8f\051\uff8f" +
    "\055\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f\001\002\000" +
    "\026\012\uff8d\013\uff8d\014\uff8d\024\uff8d\051\uff8d\055\uff8d" +
    "\056\uff8d\057\uff8d\060\uff8d\061\uff8d\001\002\000\026\012" +
    "\140\013\111\014\104\024\137\051\134\055\136\056\100" +
    "\057\135\060\130\061\141\001\002\000\010\032\uffa7\033" +
    "\uffa7\052\uffa7\001\002\000\030\003\217\012\140\013\111" +
    "\014\104\024\137\051\134\055\136\056\100\057\135\060" +
    "\130\061\141\001\002\000\030\012\140\013\111\014\104" +
    "\024\137\051\134\052\212\055\136\056\100\057\135\060" +
    "\130\061\141\001\002\000\004\056\207\001\002\000\060" +
    "\022\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030" +
    "\uff95\031\uff95\032\uff95\033\uff95\036\uff95\037\uff95\040\uff95" +
    "\041\uff95\042\uff95\043\uff95\046\uff95\047\uff95\050\uff95\051" +
    "\uff95\052\uff95\053\uff95\054\uff95\001\002\000\006\052\uffad" +
    "\053\uffad\001\002\000\006\052\214\053\213\001\002\000" +
    "\044\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98\032\uff98" +
    "\033\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043" +
    "\uff98\047\uff98\050\uff98\052\uff98\053\uff98\001\002\000\026" +
    "\012\140\013\111\014\104\024\137\051\134\055\136\056" +
    "\100\057\135\060\130\061\141\001\002\000\044\023\uff99" +
    "\024\uff99\025\uff99\026\uff99\027\uff99\032\uff99\033\uff99\036" +
    "\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99\047\uff99" +
    "\050\uff99\052\uff99\053\uff99\001\002\000\006\052\uffae\053" +
    "\uffae\001\002\000\004\047\221\001\002\000\004\047\220" +
    "\001\002\000\060\022\uff91\023\uff91\024\uff91\025\uff91\026" +
    "\uff91\027\uff91\030\uff91\031\uff91\032\uff91\033\uff91\036\uff91" +
    "\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91\046\uff91\047" +
    "\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91\001\002" +
    "\000\060\022\uff96\023\uff96\024\uff96\025\uff96\026\uff96\027" +
    "\uff96\030\uff96\031\uff96\032\uff96\033\uff96\036\uff96\037\uff96" +
    "\040\uff96\041\uff96\042\uff96\043\uff96\046\uff96\047\uff96\050" +
    "\uff96\051\uff96\052\uff96\053\uff96\054\uff96\001\002\000\012" +
    "\003\uffff\011\uffff\045\uffff\056\uffff\001\002\000\012\003" +
    "\uffd5\011\uffd5\045\uffd5\056\uffd5\001\002\000\004\050\227" +
    "\001\002\000\036\003\uffb6\010\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\034\uffb6\035\uffb6" +
    "\044\uffb6\045\uffb6\056\uffb6\001\002\000\036\003\uffbb\010" +
    "\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb" +
    "\021\uffbb\034\uffbb\035\uffbb\044\uffbb\045\uffbb\056\uffbb\001" +
    "\002\000\036\003\uffb6\010\uffb6\013\uffb6\014\uffb6\015\uffb6" +
    "\016\uffb6\017\uffb6\020\uffb6\021\uffb6\034\uffb6\035\uffb6\044" +
    "\uffb6\045\uffb6\056\uffb6\001\002\000\036\003\uffba\010\uffba" +
    "\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021" +
    "\uffba\034\uffba\035\uffba\044\uffba\045\uffba\056\uffba\001\002" +
    "\000\026\012\140\013\111\014\104\024\137\051\134\055" +
    "\136\056\100\057\135\060\130\061\141\001\002\000\006" +
    "\052\234\053\233\001\002\000\004\055\237\001\002\000" +
    "\004\050\235\001\002\000\036\003\uffb6\010\uffb6\013\uffb6" +
    "\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\034" +
    "\uffb6\035\uffb6\044\uffb6\045\uffb6\056\uffb6\001\002\000\036" +
    "\003\uffbe\010\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\034\uffbe\035\uffbe\044\uffbe\045\uffbe" +
    "\056\uffbe\001\002\000\004\052\240\001\002\000\004\050" +
    "\241\001\002\000\036\003\uffb6\010\uffb6\013\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\034\uffb6\035" +
    "\uffb6\044\uffb6\045\uffb6\056\uffb6\001\002\000\036\003\uffbd" +
    "\010\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020" +
    "\uffbd\021\uffbd\034\uffbd\035\uffbd\044\uffbd\045\uffbd\056\uffbd" +
    "\001\002\000\004\056\244\001\002\000\060\022\uff93\023" +
    "\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93" +
    "\032\uff93\033\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042" +
    "\uff93\043\uff93\046\uff93\047\uff93\050\uff93\051\uff93\052\uff93" +
    "\053\uff93\054\uff93\001\002\000\036\003\uffb7\010\uffb7\013" +
    "\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7" +
    "\034\uffb7\035\uffb7\044\uffb7\045\uffb7\056\uffb7\001\002\000" +
    "\026\012\140\013\111\014\104\024\137\051\134\055\136" +
    "\056\100\057\135\060\130\061\141\001\002\000\006\033" +
    "\146\052\250\001\002\000\032\003\110\010\113\013\111" +
    "\014\104\015\105\017\077\020\115\021\116\034\112\035" +
    "\076\044\000\056\100\001\002\000\036\003\uffc6\010\uffc6" +
    "\013\uffc6\014\uffc6\015\uffc6\016\254\017\uffc6\020\uffc6\021" +
    "\uffc6\034\uffc6\035\uffc6\044\uffc6\045\uffc6\056\uffc6\001\002" +
    "\000\034\003\uffb6\010\uffb6\013\uffb6\014\uffb6\015\uffb6\017" +
    "\uffb6\020\uffb6\021\uffb6\034\uffb6\035\uffb6\044\uffb6\045\uffb6" +
    "\056\uffb6\001\002\000\034\003\uffc5\010\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\017\uffc5\020\uffc5\021\uffc5\034\uffc5\035\uffc5" +
    "\044\uffc5\045\uffc5\056\uffc5\001\002\000\032\003\110\010" +
    "\113\013\111\014\104\015\105\017\077\020\115\021\116" +
    "\034\112\035\076\044\000\056\100\001\002\000\036\003" +
    "\uffb6\010\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6" +
    "\020\uffb6\021\uffb6\034\uffb6\035\uffb6\044\uffb6\045\uffb6\056" +
    "\uffb6\001\002\000\034\003\uffb6\010\uffb6\013\uffb6\014\uffb6" +
    "\015\uffb6\017\uffb6\020\uffb6\021\uffb6\034\uffb6\035\uffb6\044" +
    "\uffb6\045\uffb6\056\uffb6\001\002\000\034\003\uffc4\010\uffc4" +
    "\013\uffc4\014\uffc4\015\uffc4\017\uffc4\020\uffc4\021\uffc4\034" +
    "\uffc4\035\uffc4\044\uffc4\045\uffc4\056\uffc4\001\002\000\036" +
    "\003\uffc2\010\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017" +
    "\uffc2\020\uffc2\021\uffc2\034\uffc2\035\uffc2\044\uffc2\045\uffc2" +
    "\056\uffc2\001\002\000\004\056\262\001\002\000\060\022" +
    "\uff94\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94" +
    "\031\uff94\032\uff94\033\uff94\036\uff94\037\uff94\040\uff94\041" +
    "\uff94\042\uff94\043\uff94\046\uff94\047\uff94\050\uff94\051\uff94" +
    "\052\uff94\053\uff94\054\uff94\001\002\000\034\003\uffc8\010" +
    "\uffc8\013\uffc8\014\uffc8\015\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\034\uffc8\035\uffc8\044\uffc8\045\uffc8\056\uffc8\001\002\000" +
    "\034\003\110\010\113\013\111\014\104\015\105\017\077" +
    "\020\115\021\116\034\112\035\076\044\000\045\uffff\056" +
    "\100\001\002\000\004\045\266\001\002\000\036\003\uffb4" +
    "\010\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020" +
    "\uffb4\021\uffb4\034\uffb4\035\uffb4\044\uffb4\045\uffb4\056\uffb4" +
    "\001\002\000\036\003\uffb9\010\uffb9\013\uffb9\014\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\034\uffb9\035\uffb9" +
    "\044\uffb9\045\uffb9\056\uffb9\001\002\000\026\012\140\013" +
    "\111\014\104\024\137\051\134\055\136\056\100\057\135" +
    "\060\130\061\141\001\002\000\004\050\uffb6\001\002\000" +
    "\004\050\303\001\002\000\004\050\uffb6\001\002\000\030" +
    "\012\140\013\111\014\104\024\137\051\134\052\276\055" +
    "\136\056\100\057\135\060\130\061\141\001\002\000\006" +
    "\052\300\053\213\001\002\000\004\050\uffb5\001\002\000" +
    "\004\050\uffaf\001\002\000\004\050\uffb5\001\002\000\004" +
    "\050\uffb0\001\002\000\004\050\uffb1\001\002\000\036\003" +
    "\uffc1\010\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1" +
    "\020\uffc1\021\uffc1\034\uffc1\035\uffc1\044\uffc1\045\uffc1\056" +
    "\uffc1\001\002\000\004\050\uffb2\001\002\000\004\050\uffb6" +
    "\001\002\000\004\050\uffb3\001\002\000\026\012\140\013" +
    "\111\014\104\024\137\051\134\055\136\056\100\057\135" +
    "\060\130\061\141\001\002\000\006\033\146\052\311\001" +
    "\002\000\032\003\110\010\113\013\111\014\104\015\105" +
    "\017\077\020\115\021\116\034\112\035\076\044\000\056" +
    "\100\001\002\000\036\003\uffb6\010\uffb6\013\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\034\uffb6\035" +
    "\uffb6\044\uffb6\045\uffb6\056\uffb6\001\002\000\034\003\uffb6" +
    "\010\uffb6\013\uffb6\014\uffb6\015\uffb6\017\uffb6\020\uffb6\021" +
    "\uffb6\034\uffb6\035\uffb6\044\uffb6\045\uffb6\056\uffb6\001\002" +
    "\000\034\003\uffc3\010\uffc3\013\uffc3\014\uffc3\015\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\034\uffc3\035\uffc3\044\uffc3\045\uffc3" +
    "\056\uffc3\001\002\000\036\003\uffc0\010\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\034\uffc0" +
    "\035\uffc0\044\uffc0\045\uffc0\056\uffc0\001\002\000\010\013" +
    "\111\014\104\056\100\001\002\000\010\046\204\052\320" +
    "\054\206\001\002\000\004\050\321\001\002\000\036\003" +
    "\uffb6\010\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6" +
    "\020\uffb6\021\uffb6\034\uffb6\035\uffb6\044\uffb6\045\uffb6\056" +
    "\uffb6\001\002\000\036\003\uffbf\010\uffbf\013\uffbf\014\uffbf" +
    "\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\034\uffbf\035" +
    "\uffbf\044\uffbf\045\uffbf\056\uffbf\001\002\000\006\044\uffd2" +
    "\056\uffd2\001\002\000\004\056\015\001\002\000\004\056" +
    "\326\001\002\000\006\052\uffcb\053\uffcb\001\002\000\004" +
    "\056\015\001\002\000\006\052\uffcd\053\324\001\002\000" +
    "\006\052\uffca\053\uffca\001\002\000\012\005\uffff\006\uffff" +
    "\044\uffff\056\uffff\001\002\000\012\005\uffe7\006\uffe7\044" +
    "\uffe7\056\uffe7\001\002\000\012\046\344\050\uffea\051\uffd0" +
    "\053\uffea\001\002\000\004\051\346\001\002\000\006\050" +
    "\uffeb\053\uffeb\001\002\000\006\050\341\053\340\001\002" +
    "\000\004\056\342\001\002\000\020\003\uffed\005\uffed\006" +
    "\uffed\011\uffed\044\uffed\045\uffed\056\uffed\001\002\000\010" +
    "\046\344\050\uffea\053\uffea\001\002\000\006\050\uffec\053" +
    "\uffec\001\002\000\004\047\345\001\002\000\006\050\uffe9" +
    "\053\uffe9\001\002\000\010\003\064\052\uffce\056\015\001" +
    "\002\000\004\052\350\001\002\000\010\003\000\044\000" +
    "\056\000\001\002\000\010\003\071\044\uffd3\056\uffd3\001" +
    "\002\000\006\044\353\056\015\001\002\000\034\003\uffc8" +
    "\010\uffc8\013\uffc8\014\uffc8\015\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\034\uffc8\035\uffc8\044\uffc8\045\uffc8\056\uffc8\001\002" +
    "\000\034\003\110\010\113\013\111\014\104\015\105\017" +
    "\077\020\115\021\116\034\112\035\076\044\000\045\355" +
    "\056\100\001\002\000\012\003\uffd9\011\uffd9\045\uffd9\056" +
    "\uffd9\001\002\000\012\003\uffff\011\uffff\045\uffff\056\uffff" +
    "\001\002\000\012\003\uffd8\011\uffd8\045\uffd8\056\uffd8\001" +
    "\002\000\004\044\uffe3\001\002\000\004\044\uffe4\001\002" +
    "\000\004\044\000\001\002\000\004\044\364\001\002\000" +
    "\012\003\uffe0\011\uffe0\045\uffe0\056\uffe0\001\002\000\012" +
    "\003\051\011\055\045\366\056\015\001\002\000\012\005" +
    "\uffe6\006\uffe6\044\uffe6\056\uffe6\001\002\000\012\005\uffff" +
    "\006\uffff\044\uffff\056\uffff\001\002\000\012\005\uffe5\006" +
    "\uffe5\044\uffe5\056\uffe5\001\002\000\010\011\055\045\ufffe" +
    "\056\015\001\002\000\004\056\060\001\002\000\004\045" +
    "\375\001\002\000\010\011\uffdb\045\uffdb\056\uffdb\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\ufffd\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\375\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\006\001\001\000\002\001\001\000\004\052\007" +
    "\001\001\000\004\004\010\001\001\000\014\005\012\006" +
    "\017\012\015\015\016\051\011\001\001\000\006\013\335" +
    "\014\336\001\001\000\002\001\001\000\004\022\370\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\041\001\001\000\004\051" +
    "\022\001\001\000\006\007\027\010\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\044\001\001\000" +
    "\002\001\001\000\004\016\361\001\001\000\002\001\001" +
    "\000\004\017\046\001\001\000\012\012\051\020\055\023" +
    "\053\051\047\001\001\000\010\013\335\014\336\026\334" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\331\001\001\000\002\001\001\000\004\063\056\001\001" +
    "\000\002\001\001\000\004\026\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\065\027\064\051\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\067\001\001\000\004" +
    "\025\071\001\001\000\002\001\001\000\006\012\073\051" +
    "\011\001\001\000\004\044\074\001\001\000\002\001\001" +
    "\000\014\030\100\045\105\047\106\050\101\052\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\271\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\030\125\034\223\035\130\042\142" +
    "\043\126\001\001\000\004\064\221\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\117\001\001\000\002" +
    "\001\001\000\004\044\121\001\001\000\014\030\100\045" +
    "\105\047\106\050\101\052\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\030\125\031\143\032\141\033" +
    "\131\034\132\035\130\042\142\043\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\167\001\001\000\002\001\001\000\004\037\201\001\001" +
    "\000\014\030\125\034\171\035\130\042\142\043\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\030\125" +
    "\035\164\042\142\043\126\001\001\000\004\051\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\030" +
    "\125\032\146\033\131\034\132\035\130\042\142\043\126" +
    "\001\001\000\002\001\001\000\016\030\125\033\150\034" +
    "\132\035\130\042\142\043\126\001\001\000\002\001\001" +
    "\000\004\054\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\030\125" +
    "\043\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\030\125\034\162\035\130\042\142\043\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\030\125" +
    "\042\170\043\126\001\001\000\004\041\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\030\125\034\202\035\130" +
    "\042\142\043\126\001\001\000\002\001\001\000\014\030" +
    "\125\034\215\035\130\042\142\043\126\001\001\000\016" +
    "\030\125\034\207\035\130\036\210\042\142\043\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\030\125\034" +
    "\214\035\130\042\142\043\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\053\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\225\001" +
    "\001\000\002\001\001\000\004\054\227\001\001\000\002" +
    "\001\001\000\014\030\125\034\231\035\130\042\142\043" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\235\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\241\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\030\125\031\246\032\141\033\131" +
    "\034\132\035\130\042\142\043\126\001\001\000\002\001" +
    "\001\000\014\030\100\045\251\047\106\050\250\052\102" +
    "\001\001\000\002\001\001\000\004\054\252\001\001\000" +
    "\002\001\001\000\012\030\100\047\255\050\254\052\102" +
    "\001\001\000\004\054\257\001\001\000\004\054\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\263\001\001\000\016\030" +
    "\100\045\105\047\106\050\101\052\102\053\264\001\001" +
    "\000\002\001\001\000\004\056\266\001\001\000\002\001" +
    "\001\000\014\030\125\034\304\035\130\042\142\043\126" +
    "\001\001\000\004\054\303\001\001\000\002\001\001\000" +
    "\004\054\301\001\001\000\016\030\125\034\207\035\130" +
    "\036\274\042\142\043\126\001\001\000\002\001\001\000" +
    "\004\055\276\001\001\000\002\001\001\000\004\055\300" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\305\001\001\000\002" +
    "\001\001\000\022\030\125\031\307\032\141\033\131\034" +
    "\132\035\130\042\142\043\126\001\001\000\002\001\001" +
    "\000\012\030\100\047\312\050\311\052\102\001\001\000" +
    "\004\054\314\001\001\000\004\054\313\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\316\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\321\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\324\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\327" +
    "\051\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\332\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\342\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\024\346\027\064\051\062\001\001\000\002\001\001" +
    "\000\004\052\350\001\001\000\004\025\351\001\001\000" +
    "\006\012\073\051\011\001\001\000\004\044\353\001\001" +
    "\000\014\030\100\045\105\047\106\050\101\052\102\001" +
    "\001\000\004\062\355\001\001\000\004\053\356\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\362\001\001\000\002\001\001\000\004\017\364" +
    "\001\001\000\012\012\051\020\055\023\053\051\047\001" +
    "\001\000\004\061\366\001\001\000\004\053\367\001\001" +
    "\000\002\001\001\000\010\023\373\051\371\057\372\001" +
    "\001\000\004\026\334\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\375\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {


	final int String = 5;
 	final int Bool = 6;
		
  	final Struct stringType = new Struct(String),
   		         boolType = new Struct(Bool);
	  
	Tab.init(); // Universe scope
	
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "string", stringType));
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "bool", boolType));

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }


	
	int printCallCount = 0;
	boolean errorDetected = false;
	Logger log = Logger.getLogger(getClass());
	
	// slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


							   
	Logger log = Logger.getLogger(getClass());
	Struct currentType;
	Boolean main = false;
	Boolean inside_class = false;
	Boolean void_meth = false;
	int mainStatements = 0, mainMethodCalls = 0, StatementBlocks = 0;
	int insideFunc = 0, outsideFunc = 0;
	
	void report_error(String message) {
    	parser.errorDetected = true;
        log.error(message);
    }

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Mulop ::= MOD 
            {
              Integer RESULT =null;
		 RESULT=Code.rem; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Mulop ::= DIV 
            {
              Integer RESULT =null;
		 RESULT=Code.div; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Mulop ::= MUL 
            {
              Integer RESULT =null;
		 RESULT=Code.mul; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Addop ::= MINUS 
            {
              Integer RESULT =null;
		 RESULT=Code.sub; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Addop ::= PLUS 
            {
              Integer RESULT =null;
		 RESULT=Code.add; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Relop ::= GREATER_EQUALS 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Relop ::= GREATER 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Relop ::= LESS_EQUALS 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Relop ::= LESS 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Relop ::= NOT_EQUALS 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Relop ::= EQUALS 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Designator ::= Designator LBRACK error RBRACK 
            {
              Obj RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
			 	 	log.debug("Uspesan oporavak od greske na liniji " + eleft + " pri indeksiranju niza"); 
		 	   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Designator ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	   		   		RESULT = Tab.find(name);
	   		   		
	   		   		if(RESULT == Tab.noObj)
	   		   			report_error("Greska na liniji "  + nameleft + ":promenjiva " + name + " ne postoji");
	   		   			
	   		   		// TODO
	   		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Designator ::= THIS DOT IDENT 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Designator ::= SUPER DOT IDENT 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Designator ::= Designator DOT IDENT 
            {
              Obj RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			   		// TODO ovde treba da ide provera uslova da li je o instanca klase
			   		Code.load(o); // adr o na estek za kasnije getfield ili putfield 
			   		Obj f=Tab.findField(id, o.getType()); 
			   		RESULT=f;
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Designator ::= Designator LBRACK Expr RBRACK 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Factor ::= Designator 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Factor ::= Designator LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Factor ::= Designator LPAREN ActPars RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Factor ::= NEW Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Factor ::= NEW Type LBRACK Expr RBRACK 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Factor ::= STRING 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Factor ::= BOOL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Factor ::= LPAREN Expr RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Factor ::= CHAR 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Factor ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Term ::= Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Term ::= Term Mulop Factor 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		 	Code.put(op);
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ExprPart ::= Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprPart",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ExprPart ::= ExprPart Addop Term 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		 		Code.put(op);
		 	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprPart",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= MINUS ExprPart 
            {
              Object RESULT =null;
		
	 		Code.put(Code.neg);
	 	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= ExprPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CondTerm ::= CondTerm AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Condition ::= CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Condition ::= Condition OR CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ActPars ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ActPars ::= ActPars COMMA Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // StatementPart ::= LPAREN RPAREN CountMethodCalls 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementPart",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // StatementPart ::= LPAREN ActPars RPAREN CountMethodCalls 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementPart",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // StatementPart ::= DEC CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementPart",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // StatementPart ::= INC CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementPart",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // StatementPart ::= EQUAL Expr CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementPart",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CountStatementBlocks ::= 
            {
              Object RESULT =null;
		 StatementBlocks++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CountStatementBlocks",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CountMethodCalls ::= 
            {
              Object RESULT =null;
		 if(main)  mainMethodCalls++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CountMethodCalls",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CountStatements ::= 
            {
              Object RESULT =null;
		 if(main)  mainStatements++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CountStatements",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // StatementMatched ::= error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 log.debug("Uspesan oporavak od greske na liniji " + eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // StatementMatched ::= DO LBRACE StatementList RBRACE WHILE LPAREN Condition RPAREN SEMI CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // StatementMatched ::= OpenScope LBRACE StatementList CloseScope RBRACE CountStatementBlocks 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // StatementMatched ::= RETURN Expr SEMI CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // StatementMatched ::= RETURN SEMI CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // StatementMatched ::= BREAK SEMI CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // StatementMatched ::= PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // StatementMatched ::= PRINT LPAREN Expr RPAREN SEMI CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // StatementMatched ::= READ LPAREN Designator RPAREN SEMI CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // StatementMatched ::= WHILE LPAREN Condition RPAREN StatementMatched CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // StatementMatched ::= Designator StatementPart SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // StatementMatched ::= IF LPAREN Condition RPAREN StatementMatched ELSE StatementMatched CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // StatementUnmatched ::= WHILE LPAREN Condition RPAREN StatementUnmatched CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // StatementUnmatched ::= IF LPAREN Condition RPAREN StatementMatched ELSE StatementUnmatched CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // StatementUnmatched ::= IF LPAREN Condition RPAREN Statement CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Statement ::= StatementMatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Statement ::= StatementUnmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FormPars ::= Type IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FormPars ::= FormPars COMMA Type IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MethodPars ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
			 		log.debug("Uspesan oporavak od greske na liniji " + eleft + " u formalnim parametrima do )"); 
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodPars",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MethodPars ::= error COMMA FormPars 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
					log.debug("Uspesan oporavak od greske na liniji " + eleft + " u formalnim parametrima do ,"); 
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodPars",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MethodPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodPars",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MethodPars ::= FormPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodPars",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MethodName ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				   	if(inside_class) {
				   		insideFunc++;
				   	}
				   	else {
				   		outsideFunc++;
				   		if (name.equals("main")) 
				   			main = true;
				   	}
				   	
				   	RESULT = Tab.insert(Obj.Meth, name, void_meth ? Tab.noType : currentType);
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodName",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MethodLocalVarDeclList ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							 	 log.debug("Uspesan oporavak od greske na liniji " + eleft + " pri definisanju lokalne promenjive do {"); 
						   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodLocalVarDeclList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MethodLocalVarDeclList ::= error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
						 	 	log.debug("Uspesan oporavak od greske na liniji " + eleft + " pri definisanju lokalne promenjive do ;"); 
					 	   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodLocalVarDeclList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MethodLocalVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodLocalVarDeclList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MethodLocalVarDeclList ::= MethodLocalVarDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodLocalVarDeclList",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodDecl ::= VOID NT$4 MethodName LPAREN MethodPars RPAREN OpenScope MethodLocalVarDeclList LBRACE StatementList RBRACE NT$5 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
 Tab.chainLocalSymbols(m); main = void_meth = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$4 ::= 
            {
              Object RESULT =null;
 void_meth = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodDecl ::= Type MethodName LPAREN MethodPars RPAREN OpenScope MethodLocalVarDeclList LBRACE StatementList RBRACE NT$3 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$3 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
 Tab.chainLocalSymbols(m); main = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 	Obj typeNode = Tab.find(typeName);
			if (typeNode == Tab.noObj) {
				log.info("Nije pronadjen tip " + typeName + " u tabeli simbola");
				currentType = Tab.noType;
			}
			else {
				if (Obj.Type == typeNode.getKind()) {
					currentType = typeNode.getType();
				}
				else {
					report_error("Greska na liniji" + typeNameleft + ": Ime " + typeName + " ne predstavlja tip ");
					currentType = Tab.noType;
				}
			}
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClassVarMethodDecl ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					 	 	log.debug("Uspesan oporavak od greske na liniji " + eleft + " pri definicji klase"); 
				 	   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarMethodDecl",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassVarMethodDecl ::= MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarMethodDecl",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassVarMethodDecl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarMethodDecl",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassVarMethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarMethodDeclList",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassVarMethodDeclList ::= ClassVarMethodDeclList ClassVarMethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarMethodDeclList",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassName ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			  	inside_class = true;
			  	RESULT = Tab.insert(Obj.Type, name, Tab.nullType);
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassName",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassBase ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			 	 log.debug("Uspesan oporavak od greske na liniji " + eleft + " pri nasledjivanju klasa"); 
		 	  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassBase",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassBase ::= IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassBase",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassDecl ::= CLASS ClassName EXTENDS ClassBase OpenScope LBRACE ClassVarMethodDeclList RBRACE NT$2 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$2 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
 Tab.chainLocalSymbols(c); inside_class = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassDecl ::= CLASS ClassName OpenScope LBRACE ClassVarMethodDeclList RBRACE NT$1 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$1 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
 Tab.chainLocalSymbols(c); inside_class = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Var ::= IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
			Tab.insert(Obj.Var, name, new Struct(Struct.Array, currentType));  
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Var ::= IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			Tab.insert(Obj.Var, name, currentType);  
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarList ::= Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarList ::= VarList COMMA Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDecl ::= Type VarList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= BOOL 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = val ? 1:0; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Const ::= CHAR 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character val = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 // TODO 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Const ::= STRING 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 // TODO 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Const ::= NUMBER 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = val; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstListPart ::= IDENT EQUAL Const 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 	 	Obj con = Tab.insert(Obj.Con, name, currentType);  
		 	    con.setAdr((int)val); // U adr se pamti vrednost konstante
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstListPart",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstList ::= ConstListPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstList ::= ConstList COMMA ConstListPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstDecl ::= CONST error SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
			  	log.debug("Uspesan oporavak od greske na liniji " + sleft + " pri definisanju konstante"); 
		  	  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDecl ::= CONST Type ConstList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclList ::= DeclList Decl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		  
				RESULT = Tab.insert(Obj.Prog, pName, Tab.noType);
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= PROG ProgName OpenScope DeclList LBRACE MethodDeclList NT$0 RBRACE CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		
				int array_count = 0;
				int var_count = 0;
				int con_count = 0;
				int class_count = 0;
				
				for(Obj s : p.getLocalSymbols())
					if(s.getKind() == Obj.Var)
						if(s.getType().getKind() == Struct.Array)
							array_count++;
						else
							var_count++;
					else if(s.getKind() == Obj.Con)
						con_count++;
					else if(s.getKind() == Obj.Type)
						class_count++;
									
				log.info("Broj globalnih prostih promenjivih:" + var_count);
				log.info("Broj globalnih nizova:" + array_count);
				log.info("Broj globalnih konstanti:" + con_count);
				log.info("Broj unutrasnjih klasa:" + class_count);
				log.info("Broj iskaza u main-u:" + mainStatements);
				log.info("Broj poziva metoda u main-u:" + mainMethodCalls);
				log.info("Broj blokova naredbi:" + StatementBlocks);
				log.info("Broj funkcija glavnog programa:" + outsideFunc);
				log.info("Broj funkcija unutrasnjih klasa:" + insideFunc);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
 Tab.chainLocalSymbols(p); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CloseScope ::= 
            {
              Object RESULT =null;
		 Tab.closeScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CloseScope",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // OpenScope ::= 
            {
              Object RESULT =null;
		 Tab.openScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpenScope",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

