
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Aug 13 07:10:59 CEST 2013
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Aug 13 07:10:59 CEST 2013
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\046\003\000\002\047" +
    "\003\000\002\002\010\000\002\003\003\000\002\004\004" +
    "\000\002\004\002\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\006\000\002\007\005\000\002" +
    "\007\003\000\002\010\005\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\005" +
    "\000\002\014\005\000\002\014\003\000\002\013\003\000" +
    "\002\013\005\000\002\015\007\000\002\015\011\000\002" +
    "\016\004\000\002\016\002\000\002\017\003\000\002\017" +
    "\003\000\002\045\003\000\002\020\004\000\002\020\002" +
    "\000\002\021\013\000\002\021\013\000\002\022\003\000" +
    "\002\022\002\000\002\023\006\000\002\023\004\000\002" +
    "\040\004\000\002\040\002\000\002\041\003\000\002\041" +
    "\003\000\002\043\007\000\002\043\011\000\002\043\007" +
    "\000\002\044\011\000\002\044\005\000\002\044\007\000" +
    "\002\044\007\000\002\044\007\000\002\044\011\000\002" +
    "\044\004\000\002\044\004\000\002\044\005\000\002\044" +
    "\005\000\002\044\013\000\002\042\004\000\002\042\003" +
    "\000\002\042\003\000\002\042\005\000\002\042\004\000" +
    "\002\032\005\000\002\032\003\000\002\025\005\000\002" +
    "\025\003\000\002\026\005\000\002\026\003\000\002\027" +
    "\003\000\002\027\005\000\002\030\003\000\002\030\004" +
    "\000\002\031\005\000\002\031\003\000\002\036\005\000" +
    "\002\036\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\005\000\002\037\003\000\002\037\003\000\002\037" +
    "\007\000\002\037\004\000\002\037\006\000\002\037\005" +
    "\000\002\037\003\000\002\024\006\000\002\024\005\000" +
    "\002\024\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\034\003\000\002\034\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\004\004\005\001\002\000\004\002\306\001" +
    "\002\000\004\054\006\001\002\000\012\005\ufffd\006\ufffd" +
    "\042\ufffd\054\ufffd\001\002\000\012\005\ufffb\006\ufffb\042" +
    "\ufffb\054\ufffb\001\002\000\012\005\021\006\020\042\013" +
    "\054\014\001\002\000\004\054\262\001\002\000\012\005" +
    "\ufffc\006\ufffc\042\ufffc\054\ufffc\001\002\000\010\011\uffe2" +
    "\043\uffe2\054\uffe2\001\002\000\050\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\030\uffe4\031\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\041\uffe4\044\uffe4\045\uffe4\046" +
    "\uffe4\050\uffe4\051\uffe4\054\uffe4\001\002\000\012\005\ufff9" +
    "\006\ufff9\042\ufff9\054\ufff9\001\002\000\012\005\ufff8\006" +
    "\ufff8\042\ufff8\054\ufff8\001\002\000\012\005\ufffa\006\ufffa" +
    "\042\ufffa\054\ufffa\001\002\000\004\054\037\001\002\000" +
    "\004\054\014\001\002\000\004\054\024\001\002\000\006" +
    "\046\ufff5\051\ufff5\001\002\000\004\020\031\001\002\000" +
    "\006\046\027\051\026\001\002\000\004\054\024\001\002" +
    "\000\012\005\ufff7\006\ufff7\042\ufff7\054\ufff7\001\002\000" +
    "\006\046\ufff6\051\ufff6\001\002\000\012\053\033\055\032" +
    "\056\036\057\035\001\002\000\006\046\ufff2\051\ufff2\001" +
    "\002\000\006\046\ufff3\051\ufff3\001\002\000\006\046\ufff4" +
    "\051\ufff4\001\002\000\006\046\ufff0\051\ufff0\001\002\000" +
    "\006\046\ufff1\051\ufff1\001\002\000\006\007\041\042\040" +
    "\001\002\000\010\011\000\043\000\054\000\001\002\000" +
    "\004\054\275\001\002\000\010\011\uffe7\043\uffe7\054\uffe7" +
    "\001\002\000\010\011\051\043\047\054\014\001\002\000" +
    "\012\011\uffe8\042\uffe8\043\uffe8\054\uffe8\001\002\000\004" +
    "\054\255\001\002\000\012\011\uffe6\042\uffe6\043\uffe6\054" +
    "\uffe6\001\002\000\012\005\uffff\006\uffff\042\uffff\054\uffff" +
    "\001\002\000\012\011\uffe5\042\uffe5\043\uffe5\054\uffe5\001" +
    "\002\000\004\054\053\001\002\000\012\005\uffea\006\uffea" +
    "\042\uffea\054\uffea\001\002\000\004\047\054\001\002\000" +
    "\006\050\uffde\054\014\001\002\000\004\054\254\001\002" +
    "\000\006\050\uffdf\051\251\001\002\000\004\050\060\001" +
    "\002\000\010\011\uffe7\042\uffe7\054\uffe7\001\002\000\010" +
    "\011\051\042\062\054\014\001\002\000\026\010\uffda\013" +
    "\uffda\015\uffda\016\uffda\017\uffda\032\uffda\033\uffda\042\uffda" +
    "\043\uffda\054\uffda\001\002\000\026\010\076\013\072\015" +
    "\066\016\100\017\101\032\075\033\064\042\065\043\077" +
    "\054\067\001\002\000\004\047\245\001\002\000\026\010" +
    "\uffda\013\uffda\015\uffda\016\uffda\017\uffda\032\uffda\033\uffda" +
    "\042\uffda\043\uffda\054\uffda\001\002\000\004\047\236\001" +
    "\002\000\060\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa" +
    "\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\034\uffaa\035" +
    "\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\044\uffaa\045\uffaa" +
    "\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\001\002\000" +
    "\016\020\224\026\225\027\227\044\150\047\230\052\152" +
    "\001\002\000\026\010\uffd8\013\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\032\uffd8\033\uffd8\042\uffd8\043\uffd8\054\uffd8\001\002" +
    "\000\004\047\214\001\002\000\026\010\uffd9\013\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\032\uffd9\033\uffd9\042\uffd9\043\uffd9" +
    "\054\uffd9\001\002\000\026\010\uffdb\013\uffdb\015\uffdb\016" +
    "\uffdb\017\uffdb\032\uffdb\033\uffdb\042\uffdb\043\uffdb\054\uffdb" +
    "\001\002\000\004\047\204\001\002\000\024\012\112\022" +
    "\110\046\202\047\125\053\115\054\067\055\117\056\126" +
    "\057\111\001\002\000\012\011\uffe0\042\uffe0\043\uffe0\054" +
    "\uffe0\001\002\000\004\042\103\001\002\000\004\046\102" +
    "\001\002\000\030\010\uffce\013\uffce\014\uffce\015\uffce\016" +
    "\uffce\017\uffce\032\uffce\033\uffce\042\uffce\043\uffce\054\uffce" +
    "\001\002\000\026\010\uffda\013\uffda\015\uffda\016\uffda\017" +
    "\uffda\032\uffda\033\uffda\042\uffda\043\uffda\054\uffda\001\002" +
    "\000\026\010\076\013\072\015\066\016\100\017\101\032" +
    "\075\033\064\042\065\043\105\054\067\001\002\000\004" +
    "\015\106\001\002\000\004\047\107\001\002\000\022\012" +
    "\112\022\110\047\125\053\115\054\067\055\117\056\126" +
    "\057\111\001\002\000\020\012\112\047\125\053\115\054" +
    "\067\055\117\056\126\057\111\001\002\000\044\021\uffb3" +
    "\022\uffb3\023\uffb3\024\uffb3\025\uffb3\030\uffb3\031\uffb3\034" +
    "\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\045\uffb3" +
    "\046\uffb3\050\uffb3\051\uffb3\001\002\000\004\054\014\001" +
    "\002\000\024\030\uffbe\031\uffbe\034\164\035\170\036\167" +
    "\037\171\040\165\041\166\050\uffbe\001\002\000\052\021" +
    "\uffad\022\uffad\023\uffad\024\uffad\025\uffad\030\uffad\031\uffad" +
    "\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\044" +
    "\150\045\uffad\046\uffad\047\151\050\uffad\051\uffad\052\152" +
    "\001\002\000\044\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025" +
    "\uffb6\030\uffb6\031\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6" +
    "\040\uffb6\041\uffb6\045\uffb6\046\uffb6\050\uffb6\051\uffb6\001" +
    "\002\000\006\031\145\050\144\001\002\000\044\021\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\025\uffb2\030\uffb2\031\uffb2\034" +
    "\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\045\uffb2" +
    "\046\uffb2\050\uffb2\051\uffb2\001\002\000\010\030\uffbf\031" +
    "\uffbf\050\uffbf\001\002\000\044\021\uffb9\022\uffb9\023\140" +
    "\024\141\025\137\030\uffb9\031\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\045\uffb9\046\uffb9\050\uffb9" +
    "\051\uffb9\001\002\000\044\021\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\025\uffb7\030\uffb7\031\uffb7\034\uffb7\035\uffb7\036\uffb7" +
    "\037\uffb7\040\uffb7\041\uffb7\045\uffb7\046\uffb7\050\uffb7\051" +
    "\uffb7\001\002\000\036\021\133\022\134\030\uffbc\031\uffbc" +
    "\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\045" +
    "\uffbc\046\uffbc\050\uffbc\051\uffbc\001\002\000\010\030\131" +
    "\031\uffc1\050\uffc1\001\002\000\022\012\112\022\110\047" +
    "\125\053\115\054\067\055\117\056\126\057\111\001\002" +
    "\000\044\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\030" +
    "\uffb5\031\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5" +
    "\041\uffb5\045\uffb5\046\uffb5\050\uffb5\051\uffb5\001\002\000" +
    "\004\050\130\001\002\000\044\021\uffb4\022\uffb4\023\uffb4" +
    "\024\uffb4\025\uffb4\030\uffb4\031\uffb4\034\uffb4\035\uffb4\036" +
    "\uffb4\037\uffb4\040\uffb4\041\uffb4\045\uffb4\046\uffb4\050\uffb4" +
    "\051\uffb4\001\002\000\022\012\112\022\110\047\125\053" +
    "\115\054\067\055\117\056\126\057\111\001\002\000\010" +
    "\030\uffc0\031\uffc0\050\uffc0\001\002\000\020\012\uffa3\047" +
    "\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\001\002" +
    "\000\020\012\uffa2\047\uffa2\053\uffa2\054\uffa2\055\uffa2\056" +
    "\uffa2\057\uffa2\001\002\000\020\012\112\047\125\053\115" +
    "\054\067\055\117\056\126\057\111\001\002\000\044\021" +
    "\uffba\022\uffba\023\140\024\141\025\137\030\uffba\031\uffba" +
    "\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\045" +
    "\uffba\046\uffba\050\uffba\051\uffba\001\002\000\020\012\uff9f" +
    "\047\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\001" +
    "\002\000\020\012\uffa1\047\uffa1\053\uffa1\054\uffa1\055\uffa1" +
    "\056\uffa1\057\uffa1\001\002\000\020\012\uffa0\047\uffa0\053" +
    "\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\001\002\000\020" +
    "\012\112\047\125\053\115\054\067\055\117\056\126\057" +
    "\111\001\002\000\044\021\uffb8\022\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\030\uffb8\031\uffb8\034\uffb8\035\uffb8\036\uffb8\037" +
    "\uffb8\040\uffb8\041\uffb8\045\uffb8\046\uffb8\050\uffb8\051\uffb8" +
    "\001\002\000\004\046\147\001\002\000\022\012\112\022" +
    "\110\047\125\053\115\054\067\055\117\056\126\057\111" +
    "\001\002\000\010\030\131\031\uffc2\050\uffc2\001\002\000" +
    "\030\010\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca" +
    "\032\uffca\033\uffca\042\uffca\043\uffca\054\uffca\001\002\000" +
    "\022\012\112\022\110\047\125\053\115\054\067\055\117" +
    "\056\126\057\111\001\002\000\024\012\112\022\110\047" +
    "\125\050\156\053\115\054\067\055\117\056\126\057\111" +
    "\001\002\000\004\054\153\001\002\000\060\020\uffab\021" +
    "\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab" +
    "\030\uffab\031\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040" +
    "\uffab\041\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab" +
    "\051\uffab\052\uffab\001\002\000\006\050\uffc3\051\uffc3\001" +
    "\002\000\006\050\160\051\157\001\002\000\044\021\uffae" +
    "\022\uffae\023\uffae\024\uffae\025\uffae\030\uffae\031\uffae\034" +
    "\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\045\uffae" +
    "\046\uffae\050\uffae\051\uffae\001\002\000\022\012\112\022" +
    "\110\047\125\053\115\054\067\055\117\056\126\057\111" +
    "\001\002\000\044\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025" +
    "\uffaf\030\uffaf\031\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf" +
    "\040\uffaf\041\uffaf\045\uffaf\046\uffaf\050\uffaf\051\uffaf\001" +
    "\002\000\006\050\uffc4\051\uffc4\001\002\000\004\045\163" +
    "\001\002\000\060\020\uffac\021\uffac\022\uffac\023\uffac\024" +
    "\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\034\uffac" +
    "\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\044\uffac\045" +
    "\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\001\002" +
    "\000\022\012\uffa9\022\uffa9\047\uffa9\053\uffa9\054\uffa9\055" +
    "\uffa9\056\uffa9\057\uffa9\001\002\000\022\012\uffa5\022\uffa5" +
    "\047\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\001" +
    "\002\000\022\012\uffa4\022\uffa4\047\uffa4\053\uffa4\054\uffa4" +
    "\055\uffa4\056\uffa4\057\uffa4\001\002\000\022\012\uffa7\022" +
    "\uffa7\047\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7" +
    "\001\002\000\022\012\uffa8\022\uffa8\047\uffa8\053\uffa8\054" +
    "\uffa8\055\uffa8\056\uffa8\057\uffa8\001\002\000\022\012\uffa6" +
    "\022\uffa6\047\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057" +
    "\uffa6\001\002\000\022\012\112\022\110\047\125\053\115" +
    "\054\067\055\117\056\126\057\111\001\002\000\010\030" +
    "\uffbd\031\uffbd\050\uffbd\001\002\000\046\021\uffb0\022\uffb0" +
    "\023\uffb0\024\uffb0\025\uffb0\030\uffb0\031\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\044\175\045\uffb0" +
    "\046\uffb0\050\uffb0\051\uffb0\001\002\000\022\012\112\022" +
    "\110\047\125\053\115\054\067\055\117\056\126\057\111" +
    "\001\002\000\004\045\177\001\002\000\044\021\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\030\uffb1\031\uffb1\034\uffb1" +
    "\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\045\uffb1\046" +
    "\uffb1\050\uffb1\051\uffb1\001\002\000\036\021\133\022\134" +
    "\030\uffbb\031\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\041\uffbb\045\uffbb\046\uffbb\050\uffbb\051\uffbb\001\002" +
    "\000\004\046\203\001\002\000\030\010\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\017\uffcd\032\uffcd\033\uffcd\042\uffcd" +
    "\043\uffcd\054\uffcd\001\002\000\030\010\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\017\uffcc\032\uffcc\033\uffcc\042\uffcc" +
    "\043\uffcc\054\uffcc\001\002\000\022\012\112\022\110\047" +
    "\125\053\115\054\067\055\117\056\126\057\111\001\002" +
    "\000\006\050\207\051\206\001\002\000\004\053\211\001" +
    "\002\000\004\046\210\001\002\000\030\010\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\016\uffd0\017\uffd0\032\uffd0\033\uffd0\042" +
    "\uffd0\043\uffd0\054\uffd0\001\002\000\004\050\212\001\002" +
    "\000\004\046\213\001\002\000\030\010\uffcf\013\uffcf\014" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\032\uffcf\033\uffcf\042\uffcf" +
    "\043\uffcf\054\uffcf\001\002\000\022\012\112\022\110\047" +
    "\125\053\115\054\067\055\117\056\126\057\111\001\002" +
    "\000\006\031\145\050\216\001\002\000\024\010\076\013" +
    "\072\015\066\016\100\017\101\032\075\033\064\042\065" +
    "\054\067\001\002\000\030\010\uffd8\013\uffd8\014\221\015" +
    "\uffd8\016\uffd8\017\uffd8\032\uffd8\033\uffd8\042\uffd8\043\uffd8" +
    "\054\uffd8\001\002\000\026\010\uffd7\013\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\032\uffd7\033\uffd7\042\uffd7\043\uffd7\054\uffd7" +
    "\001\002\000\024\010\076\013\072\015\066\016\100\017" +
    "\101\032\075\033\064\042\065\054\067\001\002\000\030" +
    "\010\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\032" +
    "\uffd4\033\uffd4\042\uffd4\043\uffd4\054\uffd4\001\002\000\026" +
    "\010\uffd6\013\uffd6\015\uffd6\016\uffd6\017\uffd6\032\uffd6\033" +
    "\uffd6\042\uffd6\043\uffd6\054\uffd6\001\002\000\022\012\112" +
    "\022\110\047\125\053\115\054\067\055\117\056\126\057" +
    "\111\001\002\000\004\046\uffc8\001\002\000\004\046\234" +
    "\001\002\000\004\046\uffc7\001\002\000\024\012\112\022" +
    "\110\047\125\050\232\053\115\054\067\055\117\056\126" +
    "\057\111\001\002\000\006\050\233\051\157\001\002\000" +
    "\004\046\uffc5\001\002\000\004\046\uffc6\001\002\000\030" +
    "\010\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\032" +
    "\uffd3\033\uffd3\042\uffd3\043\uffd3\054\uffd3\001\002\000\004" +
    "\046\uffc9\001\002\000\022\012\112\022\110\047\125\053" +
    "\115\054\067\055\117\056\126\057\111\001\002\000\006" +
    "\031\145\050\240\001\002\000\024\010\076\013\072\015" +
    "\066\016\100\017\101\032\075\033\064\042\065\054\067" +
    "\001\002\000\030\010\uffd2\013\uffd2\014\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\032\uffd2\033\uffd2\042\uffd2\043\uffd2\054\uffd2" +
    "\001\002\000\026\010\uffd5\013\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\032\uffd5\033\uffd5\042\uffd5\043\uffd5\054\uffd5\001\002" +
    "\000\026\010\076\013\072\015\066\016\100\017\101\032" +
    "\075\033\064\042\065\043\244\054\067\001\002\000\030" +
    "\010\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\032" +
    "\uffcb\033\uffcb\042\uffcb\043\uffcb\054\uffcb\001\002\000\004" +
    "\054\067\001\002\000\010\044\150\050\247\052\152\001" +
    "\002\000\004\046\250\001\002\000\030\010\uffd1\013\uffd1" +
    "\014\uffd1\015\uffd1\016\uffd1\017\uffd1\032\uffd1\033\uffd1\042" +
    "\uffd1\043\uffd1\054\uffd1\001\002\000\004\054\014\001\002" +
    "\000\004\054\253\001\002\000\006\050\uffdd\051\uffdd\001" +
    "\002\000\006\050\uffdc\051\uffdc\001\002\000\012\044\264" +
    "\046\uffec\047\266\051\uffec\001\002\000\006\046\uffed\051" +
    "\uffed\001\002\000\006\046\261\051\260\001\002\000\004" +
    "\054\262\001\002\000\016\005\uffef\006\uffef\011\uffef\042" +
    "\uffef\043\uffef\054\uffef\001\002\000\010\044\264\046\uffec" +
    "\051\uffec\001\002\000\006\046\uffee\051\uffee\001\002\000" +
    "\004\045\265\001\002\000\006\046\uffeb\051\uffeb\001\002" +
    "\000\006\050\uffde\054\014\001\002\000\004\050\270\001" +
    "\002\000\010\011\uffe7\042\uffe7\054\uffe7\001\002\000\010" +
    "\011\051\042\272\054\014\001\002\000\026\010\uffda\013" +
    "\uffda\015\uffda\016\uffda\017\uffda\032\uffda\033\uffda\042\uffda" +
    "\043\uffda\054\uffda\001\002\000\026\010\076\013\072\015" +
    "\066\016\100\017\101\032\075\033\064\042\065\043\274" +
    "\054\067\001\002\000\012\011\uffe1\042\uffe1\043\uffe1\054" +
    "\uffe1\001\002\000\004\042\040\001\002\000\010\011\uffe7" +
    "\043\uffe7\054\uffe7\001\002\000\010\011\051\043\047\054" +
    "\014\001\002\000\012\005\uffe9\006\uffe9\042\uffe9\054\uffe9" +
    "\001\002\000\010\011\051\043\303\054\014\001\002\000" +
    "\004\054\305\001\002\000\004\002\ufffe\001\002\000\010" +
    "\011\uffe3\043\uffe3\054\uffe3\001\002\000\004\047\266\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\006\001\001\000\002\001\001\000\004\004\007" +
    "\001\001\000\014\005\011\006\016\012\014\015\015\045" +
    "\010\001\001\000\006\013\255\014\256\001\001\000\002" +
    "\001\001\000\004\020\300\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\021\001\001\000\006\007\024\010" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\042\001\001\000\014\012" +
    "\045\017\043\021\047\045\044\047\051\001\001\000\002" +
    "\001\001\000\006\013\255\014\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\056\023" +
    "\055\045\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\060\001\001\000\012\012" +
    "\045\017\043\021\047\045\044\001\001\000\004\040\062" +
    "\001\001\000\012\024\067\041\073\043\072\044\070\001" +
    "\001\000\002\001\001\000\004\040\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\024\113\030\200\031" +
    "\122\036\120\037\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\103\001\001\000\012\024\067\041\073\043\072\044\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\024" +
    "\113\025\115\026\123\027\117\030\112\031\122\036\120" +
    "\037\121\001\001\000\012\024\113\031\177\036\120\037" +
    "\121\001\001\000\002\001\001\000\004\045\173\001\001" +
    "\000\004\033\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\141\001\001\000\002\001\001\000\004\034" +
    "\134\001\001\000\002\001\001\000\014\024\113\030\126" +
    "\031\122\036\120\037\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\024\113\027\131" +
    "\030\112\031\122\036\120\037\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\024\113" +
    "\036\135\037\121\001\001\000\004\035\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\113\037\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\024\113\026\145\027\117\030\112\031\122" +
    "\036\120\037\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\024\113\030\161\031\122\036\120\037\121" +
    "\001\001\000\016\024\113\030\153\031\122\032\154\036" +
    "\120\037\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\024\113\030\160\031\122\036\120\037\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\024\113\030\172\031\122\036\120\037\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\024" +
    "\113\030\175\031\122\036\120\037\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\024\113\030\204\031\122\036\120\037\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\024\113\025\214\026\123\027\117\030\112" +
    "\031\122\036\120\037\121\001\001\000\002\001\001\000" +
    "\012\024\067\041\217\043\072\044\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\024\067\043\222\044" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\024\113\030\234\031\122\036\120\037\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\024\113\030\153\031\122\032\230\036\120\037\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\024\113\025" +
    "\236\026\123\027\117\030\112\031\122\036\120\037\121" +
    "\001\001\000\002\001\001\000\010\024\067\043\241\044" +
    "\240\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\024\067\041\073\043\072\044\070\001\001\000\002\001" +
    "\001\000\004\024\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\251\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\266\023\055\045\054\001\001\000\002\001\001\000\004" +
    "\016\270\001\001\000\012\012\045\017\043\021\047\045" +
    "\044\001\001\000\004\040\272\001\001\000\012\024\067" +
    "\041\073\043\072\044\070\001\001\000\002\001\001\000" +
    "\004\046\275\001\001\000\004\016\276\001\001\000\014" +
    "\012\045\017\043\021\047\045\044\047\277\001\001\000" +
    "\002\001\001\000\006\021\303\045\301\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	Tab.init(); // Universe scope

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }


	
	int printCallCount = 0;
	boolean errorDetected = false;
	Logger log = Logger.getLogger(getClass());
	
	// slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	Logger log = Logger.getLogger(getClass());
	Struct currentType;

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Mulop ::= MOD 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Mulop ::= DIV 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Mulop ::= MUL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Addop ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Addop ::= PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Relop ::= GREATER_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Relop ::= GREATER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Relop ::= LESS_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Relop ::= LESS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Relop ::= NOT_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Relop ::= EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Designator ::= IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Designator ::= Designator DOT IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Designator ::= Designator LBRACK Expr RBRACK 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Factor ::= Designator 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Factor ::= Designator LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Factor ::= Designator LPAREN ActPars RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Factor ::= NEW Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Factor ::= NEW Type LBRACK Expr RBRACK 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Factor ::= STRING 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Factor ::= BOOL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Factor ::= LPAREN Expr RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Factor ::= CHAR 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Factor ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Term ::= Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Term ::= Term Mulop Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ExprPart ::= Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprPart",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ExprPart ::= ExprPart Addop Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprPart",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= MINUS ExprPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= ExprPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CondTerm ::= CondTerm AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Condition ::= CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Condition ::= Condition OR CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ActPars ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ActPars ::= ActPars COMMA Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // StatementPart ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementPart",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // StatementPart ::= LPAREN ActPars RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementPart",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // StatementPart ::= DEC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementPart",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // StatementPart ::= INC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementPart",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // StatementPart ::= EQUAL Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementPart",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // StatementMatched ::= DO LBRACE StatementList RBRACE WHILE LPAREN Condition RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // StatementMatched ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // StatementMatched ::= RETURN Expr SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // StatementMatched ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // StatementMatched ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // StatementMatched ::= PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // StatementMatched ::= PRINT LPAREN Expr RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // StatementMatched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // StatementMatched ::= WHILE LPAREN Condition RPAREN StatementMatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // StatementMatched ::= Designator StatementPart SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // StatementMatched ::= IF LPAREN Condition RPAREN StatementMatched ELSE StatementMatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // StatementUnmatched ::= WHILE LPAREN Condition RPAREN StatementUnmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // StatementUnmatched ::= IF LPAREN Condition RPAREN StatementMatched ELSE StatementUnmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // StatementUnmatched ::= IF LPAREN Condition RPAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Statement ::= StatementMatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Statement ::= StatementUnmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FormPars ::= Type IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FormPars ::= FormPars COMMA Type IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MethodPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodPars",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MethodPars ::= FormPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodPars",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MethodDecl ::= VOID IDENT LPAREN MethodPars RPAREN VarMethodDeclList LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MethodDecl ::= Type IDENT LPAREN MethodPars RPAREN VarMethodDeclList LBRACE StatementList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 	Obj typeNode = Tab.find(typeName);
			if (typeNode == Tab.noObj) {
				log.info("Nije pronadjen tip " + typeName + " u tabeli simbola");
				currentType = Tab.noType;
			}
			else {
				if (Obj.Type == typeNode.getKind()) {
					currentType = typeNode.getType();
				}
				else {
					log.error("Greska na liniji" + typeNameleft+ ": Ime " + typeName + " ne predstavlja tip ", null);
					currentType = Tab.noType;
				}
			}
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VarMethodDecl ::= MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarMethodDecl",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VarMethodDecl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarMethodDecl",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VarMethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarMethodDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VarMethodDeclList ::= VarMethodDeclList VarMethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarMethodDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ClassDecl ::= CLASS IDENT EXTENDS IDENT OpenScope VarMethodDeclList CloseScope 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ClassDecl ::= CLASS IDENT OpenScope VarMethodDeclList CloseScope 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Var ::= IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
			Tab.insert(Obj.Var, name, new Struct(Struct.Array, currentType));  
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Var ::= IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			Tab.insert(Obj.Var, name, currentType);  
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarList ::= Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarList ::= VarList COMMA Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDecl ::= Type VarList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Const ::= BOOL 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = val ? 1:0; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Const ::= CHAR 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character val = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 // TODO 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Const ::= STRING 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 // TODO 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Const ::= NUMBER 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = val; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstListPart ::= IDENT EQUAL Const 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 	 	Obj con = Tab.insert(Obj.Con, name, currentType);  
		 	    con.setAdr((int)val); // U adr se pamti vrednost konstante
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstListPart",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstList ::= ConstListPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstList ::= ConstList COMMA ConstListPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstDecl ::= CONST Type ConstList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclList ::= DeclList Decl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		  
				RESULT = Tab.insert(Obj.Prog, pName, Tab.noType);
				Tab.openScope(); 
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= PROG ProgName DeclList LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		

				Tab.chainLocalSymbols(p);
				Tab.closeScope(); 
				
				
				log.info("Broj globalnih promenjivih:" + p.getLocalSymbols().size());
				
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CloseScope ::= RBRACE 
            {
              Object RESULT =null;
		 Tab.closeScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CloseScope",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // OpenScope ::= LBRACE 
            {
              Object RESULT =null;
		 Tab.openScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpenScope",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

