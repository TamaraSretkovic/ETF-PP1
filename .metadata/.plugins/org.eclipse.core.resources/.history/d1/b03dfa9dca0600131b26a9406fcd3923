
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Aug 17 01:21:28 CEST 2013
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java.util.Stack;
import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.mj.runtime.Code;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Aug 17 01:21:28 CEST 2013
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\212\000\002\002\004\000\002\065\002\000\002\066" +
    "\002\000\002\072\002\000\002\002\013\000\002\003\003" +
    "\000\002\004\004\000\002\004\002\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\006\000\002" +
    "\006\005\000\002\007\005\000\002\007\003\000\002\010" +
    "\005\000\002\010\005\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\005\000\002\014\005\000" +
    "\002\014\003\000\002\013\003\000\002\013\005\000\002" +
    "\073\002\000\002\015\013\000\002\074\002\000\002\015" +
    "\015\000\002\022\002\000\002\020\003\000\002\020\003" +
    "\000\002\021\003\000\002\016\004\000\002\016\002\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\061\003\000\002\023\004\000\002\023\002\000\002\024" +
    "\004\000\002\075\002\000\002\024\005\000\002\026\004" +
    "\000\002\026\002\000\002\026\004\000\002\026\003\000" +
    "\002\076\002\000\002\077\002\000\002\100\002\000\002" +
    "\025\017\000\002\027\003\000\002\031\003\000\002\031" +
    "\002\000\002\031\005\000\002\031\003\000\002\030\005" +
    "\000\002\030\003\000\002\032\004\000\002\032\006\000" +
    "\002\041\002\000\002\055\004\000\002\055\002\000\002" +
    "\056\003\000\002\056\003\000\002\057\011\000\002\057" +
    "\014\000\002\101\002\000\002\057\014\000\002\060\014" +
    "\000\002\102\002\000\002\060\014\000\002\103\002\000" +
    "\002\060\020\000\002\060\007\000\002\060\006\000\002" +
    "\060\006\000\002\060\004\000\002\060\010\000\002\060" +
    "\010\000\002\060\012\000\002\060\005\000\002\060\005" +
    "\000\002\060\006\000\002\060\010\000\002\060\004\000" +
    "\002\067\002\000\002\070\002\000\002\071\002\000\002" +
    "\054\005\000\002\054\003\000\002\045\002\000\002\042" +
    "\002\000\002\104\002\000\002\044\004\000\002\043\002" +
    "\000\002\035\004\000\002\034\005\000\002\034\003\000" +
    "\002\037\003\000\002\036\005\000\002\036\003\000\002" +
    "\040\003\000\002\040\005\000\002\046\003\000\002\046" +
    "\004\000\002\047\005\000\002\047\003\000\002\050\005" +
    "\000\002\050\003\000\002\051\003\000\002\051\005\000" +
    "\002\051\007\000\002\051\004\000\002\051\003\000\002" +
    "\051\003\000\002\052\005\000\002\053\004\000\002\053" +
    "\005\000\002\105\002\000\002\033\007\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\003\000" +
    "\002\033\006\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\063\003\000\002\063\003\000\002\064\003" +
    "\000\002\064\003\000\002\064\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010b\000\004\004\005\001\002\000\004\002\u010d\001" +
    "\002\000\004\056\006\001\002\000\012\005\ufffc\006\ufffc" +
    "\044\ufffc\056\ufffc\001\002\000\012\005\000\006\000\044" +
    "\000\056\000\001\002\000\012\005\ufffa\006\ufffa\044\ufffa" +
    "\056\ufffa\001\002\000\012\005\022\006\021\044\014\056" +
    "\015\001\002\000\004\056\371\001\002\000\012\005\ufffb" +
    "\006\ufffb\044\ufffb\056\ufffb\001\002\000\010\011\uffd9\045" +
    "\uffd9\056\uffd9\001\002\000\050\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\032\uffdb\033\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\043\uffdb\046\uffdb\047\uffdb\050\uffdb" +
    "\052\uffdb\053\uffdb\056\uffdb\001\002\000\012\005\ufff8\006" +
    "\ufff8\044\ufff8\056\ufff8\001\002\000\012\005\ufff7\006\ufff7" +
    "\044\ufff7\056\ufff7\001\002\000\012\005\ufff9\006\ufff9\044" +
    "\ufff9\056\ufff9\001\002\000\004\056\043\001\002\000\006" +
    "\003\024\056\015\001\002\000\004\056\030\001\002\000" +
    "\004\050\025\001\002\000\012\005\ufff5\006\ufff5\044\ufff5" +
    "\056\ufff5\001\002\000\006\050\ufff3\053\ufff3\001\002\000" +
    "\006\050\040\053\037\001\002\000\004\022\031\001\002" +
    "\000\012\055\033\057\032\060\036\061\035\001\002\000" +
    "\006\050\ufff1\053\ufff1\001\002\000\044\023\ufff0\024\ufff0" +
    "\025\ufff0\026\ufff0\027\ufff0\032\ufff0\033\ufff0\036\ufff0\037" +
    "\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\047\ufff0\050\ufff0" +
    "\052\ufff0\053\ufff0\001\002\000\006\050\ufff2\053\ufff2\001" +
    "\002\000\044\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee" +
    "\032\uffee\033\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042" +
    "\uffee\043\uffee\047\uffee\050\uffee\052\uffee\053\uffee\001\002" +
    "\000\044\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\032" +
    "\uffef\033\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef" +
    "\043\uffef\047\uffef\050\uffef\052\uffef\053\uffef\001\002\000" +
    "\004\056\030\001\002\000\012\005\ufff6\006\ufff6\044\ufff6" +
    "\056\ufff6\001\002\000\006\050\ufff4\053\ufff4\001\002\000" +
    "\006\007\044\044\000\001\002\000\006\007\uffe1\044\uffe1" +
    "\001\002\000\006\003\375\056\376\001\002\000\004\044" +
    "\uffe8\001\002\000\004\044\047\001\002\000\012\003\uffdf" +
    "\011\uffdf\045\uffdf\056\uffdf\001\002\000\012\003\052\011" +
    "\056\045\054\056\015\001\002\000\004\056\364\001\002" +
    "\000\012\003\uffdc\011\uffdc\045\uffdc\056\uffdc\001\002\000" +
    "\012\003\uffde\011\uffde\045\uffde\056\uffde\001\002\000\012" +
    "\005\uffe4\006\uffe4\044\uffe4\056\uffe4\001\002\000\012\003" +
    "\uffdd\011\uffdd\045\uffdd\056\uffdd\001\002\000\004\056\uffd7" +
    "\001\002\000\012\003\uffe0\011\uffe0\045\uffe0\056\uffe0\001" +
    "\002\000\004\056\062\001\002\000\012\003\uffd6\011\uffd6" +
    "\045\uffd6\056\uffd6\001\002\000\004\051\uffcd\001\002\000" +
    "\004\051\000\001\002\000\004\051\uffd1\001\002\000\004" +
    "\051\066\001\002\000\010\003\070\052\uffcb\056\015\001" +
    "\002\000\004\056\356\001\002\000\006\052\uffc9\053\354" +
    "\001\002\000\006\052\uffcc\053\352\001\002\000\006\052" +
    "\uffc7\053\uffc7\001\002\000\004\052\074\001\002\000\010" +
    "\003\075\044\uffd4\056\uffd4\001\002\000\010\044\uffd2\050" +
    "\351\056\uffd2\001\002\000\006\044\uffd0\056\015\001\002" +
    "\000\006\044\uffd5\056\uffd5\001\002\000\004\044\101\001" +
    "\002\000\034\003\uffc2\010\uffc2\013\uffc2\014\uffc2\015\uffc2" +
    "\017\uffc2\020\uffc2\021\uffc2\034\uffc2\035\uffc2\044\uffc2\045" +
    "\uffc2\056\uffc2\001\002\000\034\003\120\010\112\013\114" +
    "\014\124\015\113\017\110\020\115\021\116\034\117\035" +
    "\104\044\000\045\107\056\106\001\002\000\016\022\337" +
    "\030\340\031\341\046\164\051\166\054\167\001\002\000" +
    "\004\051\332\001\002\000\034\003\uffc1\010\uffc1\013\uffc1" +
    "\014\uffc1\015\uffc1\017\uffc1\020\uffc1\021\uffc1\034\uffc1\035" +
    "\uffc1\044\uffc1\045\uffc1\056\uffc1\001\002\000\060\022\uff84" +
    "\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84\030\uff84\031" +
    "\uff84\032\uff84\033\uff84\036\uff84\037\uff84\040\uff84\041\uff84" +
    "\042\uff84\043\uff84\046\uff84\047\uff84\050\uff84\051\uff84\052" +
    "\uff84\053\uff84\054\uff84\001\002\000\012\003\uffcf\011\uffcf" +
    "\045\uffcf\056\uffcf\001\002\000\004\051\uffc4\001\002\000" +
    "\034\003\uffc0\010\uffc0\013\uffc0\014\uffc0\015\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\034\uffc0\035\uffc0\044\uffc0\045\uffc0\056" +
    "\uffc0\001\002\000\026\012\142\013\114\014\124\024\137" +
    "\050\307\051\150\055\033\056\106\060\036\061\035\001" +
    "\002\000\004\051\265\001\002\000\004\054\263\001\002" +
    "\000\004\044\uffc4\001\002\000\004\050\222\001\002\000" +
    "\004\051\136\001\002\000\004\050\135\001\002\000\004" +
    "\050\134\001\002\000\004\044\127\001\002\000\034\003" +
    "\uffc3\010\uffc3\013\uffc3\014\uffc3\015\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\034\uffc3\035\uffc3\044\uffc3\045\uffc3\056\uffc3\001" +
    "\002\000\004\054\125\001\002\000\004\056\126\001\002" +
    "\000\060\022\uff86\023\uff86\024\uff86\025\uff86\026\uff86\027" +
    "\uff86\030\uff86\031\uff86\032\uff86\033\uff86\036\uff86\037\uff86" +
    "\040\uff86\041\uff86\042\uff86\043\uff86\046\uff86\047\uff86\050" +
    "\uff86\051\uff86\052\uff86\053\uff86\054\uff86\001\002\000\034" +
    "\003\uffc2\010\uffc2\013\uffc2\014\uffc2\015\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\034\uffc2\035\uffc2\044\uffc2\045\uffc2\056\uffc2" +
    "\001\002\000\034\003\120\010\112\013\114\014\124\015" +
    "\113\017\110\020\115\021\116\034\117\035\104\044\000" +
    "\045\uffff\056\106\001\002\000\004\045\132\001\002\000" +
    "\036\003\uffa8\010\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8" +
    "\017\uffa8\020\uffa8\021\uffa8\034\uffa8\035\uffa8\044\uffa8\045" +
    "\uffa8\056\uffa8\001\002\000\036\003\uffac\010\uffac\013\uffac" +
    "\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac\034" +
    "\uffac\035\uffac\044\uffac\045\uffac\056\uffac\001\002\000\036" +
    "\003\uffb3\010\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017" +
    "\uffb3\020\uffb3\021\uffb3\034\uffb3\035\uffb3\044\uffb3\045\uffb3" +
    "\056\uffb3\001\002\000\036\003\uffab\010\uffab\013\uffab\014" +
    "\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\034\uffab" +
    "\035\uffab\044\uffab\045\uffab\056\uffab\001\002\000\024\012" +
    "\142\013\114\014\124\024\137\051\150\055\033\056\106" +
    "\060\036\061\035\001\002\000\022\012\142\013\114\014" +
    "\124\051\150\055\033\056\106\060\036\061\035\001\002" +
    "\000\044\023\uff92\024\uff92\025\uff92\026\uff92\027\uff92\032" +
    "\uff92\033\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92" +
    "\043\uff92\047\uff92\050\uff92\052\uff92\053\uff92\001\002\000" +
    "\006\052\212\053\211\001\002\000\004\056\015\001\002" +
    "\000\052\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\032" +
    "\uff8d\033\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d" +
    "\043\uff8d\046\164\047\uff8d\050\uff8d\051\166\052\uff8d\053" +
    "\uff8d\054\167\001\002\000\044\023\uff8e\024\uff8e\025\uff8e" +
    "\026\uff8e\027\uff8e\032\uff8e\033\uff8e\036\uff8e\037\uff8e\040" +
    "\uff8e\041\uff8e\042\uff8e\043\uff8e\047\uff8e\050\uff8e\052\uff8e" +
    "\053\uff8e\001\002\000\044\023\uff95\024\uff95\025\160\026" +
    "\161\027\157\032\uff95\033\uff95\036\uff95\037\uff95\040\uff95" +
    "\041\uff95\042\uff95\043\uff95\047\uff95\050\uff95\052\uff95\053" +
    "\uff95\001\002\000\044\023\uff93\024\uff93\025\uff93\026\uff93" +
    "\027\uff93\032\uff93\033\uff93\036\uff93\037\uff93\040\uff93\041" +
    "\uff93\042\uff93\043\uff93\047\uff93\050\uff93\052\uff93\053\uff93" +
    "\001\002\000\036\023\153\024\154\032\uff98\033\uff98\036" +
    "\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\047\uff98" +
    "\050\uff98\052\uff98\053\uff98\001\002\000\024\012\142\013" +
    "\114\014\124\024\137\051\150\055\033\056\106\060\036" +
    "\061\035\001\002\000\004\052\152\001\002\000\044\023" +
    "\uff91\024\uff91\025\uff91\026\uff91\027\uff91\032\uff91\033\uff91" +
    "\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91\047" +
    "\uff91\050\uff91\052\uff91\053\uff91\001\002\000\022\012\uff7c" +
    "\013\uff7c\014\uff7c\051\uff7c\055\uff7c\056\uff7c\060\uff7c\061" +
    "\uff7c\001\002\000\022\012\uff7b\013\uff7b\014\uff7b\051\uff7b" +
    "\055\uff7b\056\uff7b\060\uff7b\061\uff7b\001\002\000\022\012" +
    "\142\013\114\014\124\051\150\055\033\056\106\060\036" +
    "\061\035\001\002\000\044\023\uff96\024\uff96\025\160\026" +
    "\161\027\157\032\uff96\033\uff96\036\uff96\037\uff96\040\uff96" +
    "\041\uff96\042\uff96\043\uff96\047\uff96\050\uff96\052\uff96\053" +
    "\uff96\001\002\000\022\012\uff78\013\uff78\014\uff78\051\uff78" +
    "\055\uff78\056\uff78\060\uff78\061\uff78\001\002\000\022\012" +
    "\uff7a\013\uff7a\014\uff7a\051\uff7a\055\uff7a\056\uff7a\060\uff7a" +
    "\061\uff7a\001\002\000\022\012\uff79\013\uff79\014\uff79\051" +
    "\uff79\055\uff79\056\uff79\060\uff79\061\uff79\001\002\000\022" +
    "\012\142\013\114\014\124\051\150\055\033\056\106\060" +
    "\036\061\035\001\002\000\044\023\uff94\024\uff94\025\uff94" +
    "\026\uff94\027\uff94\032\uff94\033\uff94\036\uff94\037\uff94\040" +
    "\uff94\041\uff94\042\uff94\043\uff94\047\uff94\050\uff94\052\uff94" +
    "\053\uff94\001\002\000\026\003\200\012\uff89\013\uff89\014" +
    "\uff89\024\uff89\051\uff89\055\uff89\056\uff89\060\uff89\061\uff89" +
    "\001\002\000\044\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027" +
    "\uffa9\032\uffa9\033\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9" +
    "\042\uffa9\043\uffa9\047\uffa9\050\uffa9\052\uffa9\053\uffa9\001" +
    "\002\000\026\012\142\013\114\014\124\024\137\051\150" +
    "\052\171\055\033\056\106\060\036\061\035\001\002\000" +
    "\004\056\170\001\002\000\060\022\uff87\023\uff87\024\uff87" +
    "\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033" +
    "\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87\043\uff87" +
    "\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87\053\uff87\054" +
    "\uff87\001\002\000\044\023\uff8b\024\uff8b\025\uff8b\026\uff8b" +
    "\027\uff8b\032\uff8b\033\uff8b\036\uff8b\037\uff8b\040\uff8b\041" +
    "\uff8b\042\uff8b\043\uff8b\047\uff8b\050\uff8b\052\uff8b\053\uff8b" +
    "\001\002\000\006\052\uffa6\053\uffa6\001\002\000\006\052" +
    "\175\053\174\001\002\000\024\012\142\013\114\014\124" +
    "\024\137\051\150\055\033\056\106\060\036\061\035\001" +
    "\002\000\044\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a" +
    "\032\uff8a\033\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042" +
    "\uff8a\043\uff8a\047\uff8a\050\uff8a\052\uff8a\053\uff8a\001\002" +
    "\000\006\052\uffa7\053\uffa7\001\002\000\044\023\uff8c\024" +
    "\uff8c\025\uff8c\026\uff8c\027\uff8c\032\uff8c\033\uff8c\036\uff8c" +
    "\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\047\uff8c\050" +
    "\uff8c\052\uff8c\053\uff8c\001\002\000\004\047\204\001\002" +
    "\000\024\012\142\013\114\014\124\024\137\051\150\055" +
    "\033\056\106\060\036\061\035\001\002\000\004\047\203" +
    "\001\002\000\060\022\uff88\023\uff88\024\uff88\025\uff88\026" +
    "\uff88\027\uff88\030\uff88\031\uff88\032\uff88\033\uff88\036\uff88" +
    "\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88\046\uff88\047" +
    "\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88\001\002" +
    "\000\060\022\uff83\023\uff83\024\uff83\025\uff83\026\uff83\027" +
    "\uff83\030\uff83\031\uff83\032\uff83\033\uff83\036\uff83\037\uff83" +
    "\040\uff83\041\uff83\042\uff83\043\uff83\046\uff83\047\uff83\050" +
    "\uff83\051\uff83\052\uff83\053\uff83\054\uff83\001\002\000\046" +
    "\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\032\uff8f\033" +
    "\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f" +
    "\046\206\047\uff8f\050\uff8f\052\uff8f\053\uff8f\001\002\000" +
    "\024\012\142\013\114\014\124\024\137\051\150\055\033" +
    "\056\106\060\036\061\035\001\002\000\004\047\210\001" +
    "\002\000\044\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90" +
    "\032\uff90\033\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042" +
    "\uff90\043\uff90\047\uff90\050\uff90\052\uff90\053\uff90\001\002" +
    "\000\004\055\215\001\002\000\004\050\213\001\002\000" +
    "\036\003\uffaa\010\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\034\uffaa\035\uffaa\044\uffaa\045" +
    "\uffaa\056\uffaa\001\002\000\036\003\uffb1\010\uffb1\013\uffb1" +
    "\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\034" +
    "\uffb1\035\uffb1\044\uffb1\045\uffb1\056\uffb1\001\002\000\004" +
    "\052\216\001\002\000\004\050\217\001\002\000\036\003" +
    "\uffaa\010\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa" +
    "\020\uffaa\021\uffaa\034\uffaa\035\uffaa\044\uffaa\045\uffaa\056" +
    "\uffaa\001\002\000\036\003\uffb0\010\uffb0\013\uffb0\014\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\034\uffb0\035" +
    "\uffb0\044\uffb0\045\uffb0\056\uffb0\001\002\000\036\023\153" +
    "\024\154\032\uff97\033\uff97\036\uff97\037\uff97\040\uff97\041" +
    "\uff97\042\uff97\043\uff97\047\uff97\050\uff97\052\uff97\053\uff97" +
    "\001\002\000\036\003\uffaa\010\uffaa\013\uffaa\014\uffaa\015" +
    "\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\034\uffaa\035\uffaa" +
    "\044\uffaa\045\uffaa\056\uffaa\001\002\000\036\003\uffaf\010" +
    "\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf" +
    "\021\uffaf\034\uffaf\035\uffaf\044\uffaf\045\uffaf\056\uffaf\001" +
    "\002\000\004\044\225\001\002\000\034\003\uffc2\010\uffc2" +
    "\013\uffc2\014\uffc2\015\uffc2\017\uffc2\020\uffc2\021\uffc2\034" +
    "\uffc2\035\uffc2\044\uffc2\045\uffc2\056\uffc2\001\002\000\034" +
    "\003\120\010\112\013\114\014\124\015\113\017\110\020" +
    "\115\021\116\034\117\035\104\044\000\045\227\056\106" +
    "\001\002\000\004\017\230\001\002\000\004\051\231\001" +
    "\002\000\024\012\142\013\114\014\124\024\137\051\150" +
    "\055\033\056\106\060\036\061\035\001\002\000\010\032" +
    "\uff9b\033\uff9b\052\uff9b\001\002\000\024\032\uff9a\033\uff9a" +
    "\036\253\037\257\040\256\041\260\042\254\043\255\052" +
    "\uff9a\001\002\000\004\052\uffa5\001\002\000\006\033\uff9e" +
    "\052\uff9e\001\002\000\010\032\243\033\uff9d\052\uff9d\001" +
    "\002\000\006\033\240\052\uffa1\001\002\000\024\012\142" +
    "\013\114\014\124\024\137\051\150\055\033\056\106\060" +
    "\036\061\035\001\002\000\004\052\uffa0\001\002\000\006" +
    "\033\uff9f\052\uff9f\001\002\000\024\012\142\013\114\014" +
    "\124\024\137\051\150\055\033\056\106\060\036\061\035" +
    "\001\002\000\010\032\uff9c\033\uff9c\052\uff9c\001\002\000" +
    "\004\052\246\001\002\000\004\050\247\001\002\000\036" +
    "\003\uffb8\010\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017" +
    "\uffb8\020\uffb8\021\uffb8\034\uffb8\035\uffb8\044\uffb8\045\uffb8" +
    "\056\uffb8\001\002\000\036\003\uffa4\010\uffa4\013\uffa4\014" +
    "\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\034\uffa4" +
    "\035\uffa4\044\uffa4\045\uffa4\056\uffa4\001\002\000\036\003" +
    "\uffaa\010\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa" +
    "\020\uffaa\021\uffaa\034\uffaa\035\uffaa\044\uffaa\045\uffaa\056" +
    "\uffaa\001\002\000\036\003\uffb7\010\uffb7\013\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\034\uffb7\035" +
    "\uffb7\044\uffb7\045\uffb7\056\uffb7\001\002\000\024\012\uff82" +
    "\013\uff82\014\uff82\024\uff82\051\uff82\055\uff82\056\uff82\060" +
    "\uff82\061\uff82\001\002\000\024\012\uff7e\013\uff7e\014\uff7e" +
    "\024\uff7e\051\uff7e\055\uff7e\056\uff7e\060\uff7e\061\uff7e\001" +
    "\002\000\024\012\uff7d\013\uff7d\014\uff7d\024\uff7d\051\uff7d" +
    "\055\uff7d\056\uff7d\060\uff7d\061\uff7d\001\002\000\024\012" +
    "\uff80\013\uff80\014\uff80\024\uff80\051\uff80\055\uff80\056\uff80" +
    "\060\uff80\061\uff80\001\002\000\024\012\uff81\013\uff81\014" +
    "\uff81\024\uff81\051\uff81\055\uff81\056\uff81\060\uff81\061\uff81" +
    "\001\002\000\024\012\uff7f\013\uff7f\014\uff7f\024\uff7f\051" +
    "\uff7f\055\uff7f\056\uff7f\060\uff7f\061\uff7f\001\002\000\024" +
    "\012\142\013\114\014\124\024\137\051\150\055\033\056" +
    "\106\060\036\061\035\001\002\000\010\032\uff99\033\uff99" +
    "\052\uff99\001\002\000\004\056\264\001\002\000\060\022" +
    "\uff85\023\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85" +
    "\031\uff85\032\uff85\033\uff85\036\uff85\037\uff85\040\uff85\041" +
    "\uff85\042\uff85\043\uff85\046\uff85\047\uff85\050\uff85\051\uff85" +
    "\052\uff85\053\uff85\054\uff85\001\002\000\024\012\142\013" +
    "\114\014\124\024\137\051\150\055\033\056\106\060\036" +
    "\061\035\001\002\000\004\052\267\001\002\000\032\003" +
    "\120\010\112\013\114\014\124\015\113\017\110\020\115" +
    "\021\116\034\117\035\104\044\000\056\106\001\002\000" +
    "\036\003\uffc0\010\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffa3" +
    "\017\uffc0\020\uffc0\021\uffc0\034\uffc0\035\uffc0\044\uffc0\045" +
    "\uffc0\056\uffc0\001\002\000\034\003\uffa4\010\uffa4\013\uffa4" +
    "\014\uffa4\015\uffa4\017\uffa4\020\uffa4\021\uffa4\034\uffa4\035" +
    "\uffa4\044\uffa4\045\uffa4\056\uffa4\001\002\000\034\003\uffaa" +
    "\010\uffaa\013\uffaa\014\uffaa\015\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\034\uffaa\035\uffaa\044\uffaa\045\uffaa\056\uffaa\001\002" +
    "\000\034\003\uffbf\010\uffbf\013\uffbf\014\uffbf\015\uffbf\017" +
    "\uffbf\020\uffbf\021\uffbf\034\uffbf\035\uffbf\044\uffbf\045\uffbf" +
    "\056\uffbf\001\002\000\004\016\uffa1\001\002\000\004\016" +
    "\276\001\002\000\032\003\120\010\112\013\114\014\124" +
    "\015\113\017\110\020\115\021\116\034\117\035\104\044" +
    "\000\056\106\001\002\000\036\003\uffa4\010\uffa4\013\uffa4" +
    "\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\034" +
    "\uffa4\035\uffa4\044\uffa4\045\uffa4\056\uffa4\001\002\000\034" +
    "\003\uffa4\010\uffa4\013\uffa4\014\uffa4\015\uffa4\017\uffa4\020" +
    "\uffa4\021\uffa4\034\uffa4\035\uffa4\044\uffa4\045\uffa4\056\uffa4" +
    "\001\002\000\034\003\uffaa\010\uffaa\013\uffaa\014\uffaa\015" +
    "\uffaa\017\uffaa\020\uffaa\021\uffaa\034\uffaa\035\uffaa\044\uffaa" +
    "\045\uffaa\056\uffaa\001\002\000\034\003\uffbe\010\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\017\uffbe\020\uffbe\021\uffbe\034\uffbe" +
    "\035\uffbe\044\uffbe\045\uffbe\056\uffbe\001\002\000\036\003" +
    "\uffaa\010\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa" +
    "\020\uffaa\021\uffaa\034\uffaa\035\uffaa\044\uffaa\045\uffaa\056" +
    "\uffaa\001\002\000\036\003\uffbb\010\uffbb\013\uffbb\014\uffbb" +
    "\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\034\uffbb\035" +
    "\uffbb\044\uffbb\045\uffbb\056\uffbb\001\002\000\004\016\uffa2" +
    "\001\002\000\004\050\311\001\002\000\036\003\uffaa\010" +
    "\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\034\uffaa\035\uffaa\044\uffaa\045\uffaa\056\uffaa\001" +
    "\002\000\036\003\uffae\010\uffae\013\uffae\014\uffae\015\uffae" +
    "\016\uffae\017\uffae\020\uffae\021\uffae\034\uffae\035\uffae\044" +
    "\uffae\045\uffae\056\uffae\001\002\000\036\003\uffaa\010\uffaa" +
    "\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\034\uffaa\035\uffaa\044\uffaa\045\uffaa\056\uffaa\001\002" +
    "\000\036\003\uffad\010\uffad\013\uffad\014\uffad\015\uffad\016" +
    "\uffad\017\uffad\020\uffad\021\uffad\034\uffad\035\uffad\044\uffad" +
    "\045\uffad\056\uffad\001\002\000\004\051\314\001\002\000" +
    "\024\012\142\013\114\014\124\024\137\051\150\055\033" +
    "\056\106\060\036\061\035\001\002\000\004\052\uffa5\001" +
    "\002\000\004\052\317\001\002\000\032\003\120\010\112" +
    "\013\114\014\124\015\113\017\110\020\115\021\116\034" +
    "\117\035\104\044\000\056\106\001\002\000\036\003\uffba" +
    "\010\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020" +
    "\uffba\021\uffba\034\uffba\035\uffba\044\uffba\045\uffba\056\uffba" +
    "\001\002\000\034\003\uffbd\010\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\034\uffbd\035\uffbd\044\uffbd" +
    "\045\uffbd\056\uffbd\001\002\000\034\003\uffa4\010\uffa4\013" +
    "\uffa4\014\uffa4\015\uffa4\017\uffa4\020\uffa4\021\uffa4\034\uffa4" +
    "\035\uffa4\044\uffa4\045\uffa4\056\uffa4\001\002\000\034\003" +
    "\uffaa\010\uffaa\013\uffaa\014\uffaa\015\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\034\uffaa\035\uffaa\044\uffaa\045\uffaa\056\uffaa\001" +
    "\002\000\034\003\uffbc\010\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\017\uffbc\020\uffbc\021\uffbc\034\uffbc\035\uffbc\044\uffbc\045" +
    "\uffbc\056\uffbc\001\002\000\036\003\uffa4\010\uffa4\013\uffa4" +
    "\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\034" +
    "\uffa4\035\uffa4\044\uffa4\045\uffa4\056\uffa4\001\002\000\036" +
    "\003\uffaa\010\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017" +
    "\uffaa\020\uffaa\021\uffaa\034\uffaa\035\uffaa\044\uffaa\045\uffaa" +
    "\056\uffaa\001\002\000\036\003\uffb9\010\uffb9\013\uffb9\014" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\034\uffb9" +
    "\035\uffb9\044\uffb9\045\uffb9\056\uffb9\001\002\000\012\003" +
    "\uffff\011\uffff\045\uffff\056\uffff\001\002\000\012\003\uffce" +
    "\011\uffce\045\uffce\056\uffce\001\002\000\010\013\114\014" +
    "\124\056\106\001\002\000\010\046\164\052\334\054\167" +
    "\001\002\000\004\050\335\001\002\000\036\003\uffaa\010" +
    "\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\034\uffaa\035\uffaa\044\uffaa\045\uffaa\056\uffaa\001" +
    "\002\000\036\003\uffb2\010\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\020\uffb2\021\uffb2\034\uffb2\035\uffb2\044" +
    "\uffb2\045\uffb2\056\uffb2\001\002\000\024\012\142\013\114" +
    "\014\124\024\137\051\150\055\033\056\106\060\036\061" +
    "\035\001\002\000\004\050\344\001\002\000\004\050\342" +
    "\001\002\000\036\003\uffaa\010\uffaa\013\uffaa\014\uffaa\015" +
    "\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\034\uffaa\035\uffaa" +
    "\044\uffaa\045\uffaa\056\uffaa\001\002\000\036\003\uffb4\010" +
    "\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\034\uffb4\035\uffb4\044\uffb4\045\uffb4\056\uffb4\001" +
    "\002\000\036\003\uffaa\010\uffaa\013\uffaa\014\uffaa\015\uffaa" +
    "\016\uffaa\017\uffaa\020\uffaa\021\uffaa\034\uffaa\035\uffaa\044" +
    "\uffaa\045\uffaa\056\uffaa\001\002\000\036\003\uffb5\010\uffb5" +
    "\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021" +
    "\uffb5\034\uffb5\035\uffb5\044\uffb5\045\uffb5\056\uffb5\001\002" +
    "\000\004\050\347\001\002\000\036\003\uffaa\010\uffaa\013" +
    "\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa" +
    "\034\uffaa\035\uffaa\044\uffaa\045\uffaa\056\uffaa\001\002\000" +
    "\036\003\uffb6\010\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6" +
    "\017\uffb6\020\uffb6\021\uffb6\034\uffb6\035\uffb6\044\uffb6\045" +
    "\uffb6\056\uffb6\001\002\000\006\044\uffd3\056\uffd3\001\002" +
    "\000\004\056\015\001\002\000\006\052\uffc8\053\uffc8\001" +
    "\002\000\004\056\015\001\002\000\006\052\uffca\053\352" +
    "\001\002\000\010\046\357\052\uffc6\053\uffc6\001\002\000" +
    "\004\047\360\001\002\000\006\052\uffc5\053\uffc5\001\002" +
    "\000\012\005\uffff\006\uffff\044\uffff\056\uffff\001\002\000" +
    "\012\005\uffe7\006\uffe7\044\uffe7\056\uffe7\001\002\000\012" +
    "\003\uffd8\011\uffd8\045\uffd8\056\uffd8\001\002\000\012\046" +
    "\373\050\uffea\051\uffcd\053\uffea\001\002\000\006\050\uffeb" +
    "\053\uffeb\001\002\000\006\050\370\053\367\001\002\000" +
    "\004\056\371\001\002\000\020\003\uffed\005\uffed\006\uffed" +
    "\011\uffed\044\uffed\045\uffed\056\uffed\001\002\000\010\046" +
    "\373\050\uffea\053\uffea\001\002\000\006\050\uffec\053\uffec" +
    "\001\002\000\004\047\374\001\002\000\006\050\uffe9\053" +
    "\uffe9\001\002\000\004\044\uffe2\001\002\000\004\044\uffe3" +
    "\001\002\000\004\044\000\001\002\000\004\044\uffe6\001" +
    "\002\000\004\044\u0102\001\002\000\012\003\uffdf\011\uffdf" +
    "\045\uffdf\056\uffdf\001\002\000\012\003\052\011\056\045" +
    "\u0104\056\015\001\002\000\012\005\uffe4\006\uffe4\044\uffe4" +
    "\056\uffe4\001\002\000\012\005\uffff\006\uffff\044\uffff\056" +
    "\uffff\001\002\000\012\005\uffe5\006\uffe5\044\uffe5\056\uffe5" +
    "\001\002\000\010\011\056\045\ufffe\056\015\001\002\000" +
    "\004\056\062\001\002\000\004\045\u010b\001\002\000\010" +
    "\011\uffda\045\uffda\056\uffda\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\ufffd\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010b\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\006\001\001\000\002\001\001\000\004\065\007" +
    "\001\001\000\004\004\010\001\001\000\014\005\012\006" +
    "\017\012\015\015\016\061\011\001\001\000\006\013\364" +
    "\014\365\001\001\000\002\001\001\000\004\023\u0106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\041\001\001\000\004\061" +
    "\022\001\001\000\006\007\026\010\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\065\044\001\001\000" +
    "\002\001\001\000\004\020\376\001\001\000\004\073\045" +
    "\001\001\000\002\001\001\000\004\016\047\001\001\000" +
    "\012\012\052\017\056\024\054\061\050\001\001\000\012" +
    "\013\364\014\365\025\362\027\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\360\001\001\000\002" +
    "\001\001\000\004\075\057\001\001\000\002\001\001\000" +
    "\006\025\060\027\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\065\063\001\001\000\004\076\064\001" +
    "\001\000\002\001\001\000\012\030\070\031\072\032\071" +
    "\061\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\075\001\001\000\002\001\001\000\010\012\076\061" +
    "\011\077\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\055\101\001\001\000\016\033\102\052\120\056" +
    "\122\057\104\060\110\065\121\001\001\000\004\053\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\100\327\001\001\000\004\041\312\001\001" +
    "\000\002\001\001\000\020\011\137\033\142\046\305\047" +
    "\146\050\144\051\145\052\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\127\001\001" +
    "\000\020\033\102\052\120\056\122\057\104\060\110\065" +
    "\121\066\130\001\001\000\002\001\001\000\004\071\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\011\137\033\142\046\140\047\146\050\144" +
    "\051\145\052\143\001\001\000\016\011\137\033\142\047" +
    "\220\050\144\051\145\052\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\204\001\001\000\004\053" +
    "\164\001\001\000\002\001\001\000\004\064\161\001\001" +
    "\000\002\001\001\000\004\063\154\001\001\000\020\011" +
    "\137\033\142\046\150\047\146\050\144\051\145\052\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\011\137\033\142\050\155" +
    "\051\145\052\143\001\001\000\004\064\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\011\137\033\142\051\162\052\143\001\001\000\002\001" +
    "\001\000\004\105\200\001\001\000\004\070\176\001\001" +
    "\000\022\011\137\033\142\046\171\047\146\050\144\051" +
    "\145\052\143\054\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\011\137\033\142\046\175\047\146\050\144" +
    "\051\145\052\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\011\137" +
    "\033\142\046\201\047\146\050\144\051\145\052\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\011\137\033\142\046\206\047" +
    "\146\050\144\051\145\052\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\067\213\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\067\217\001\001\000\002\001" +
    "\001\000\004\063\154\001\001\000\004\067\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\225\001" +
    "\001\000\016\033\102\052\120\056\122\057\104\060\110" +
    "\065\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\011\137\033\142\034\236\035\233\036\235\037\234" +
    "\040\231\046\232\047\146\050\144\051\145\052\143\001" +
    "\001\000\002\001\001\000\004\062\260\001\001\000\004" +
    "\045\244\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\240\001\001\000\026\011\137\033\142\036\235" +
    "\037\241\040\231\046\232\047\146\050\144\051\145\052" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\011\137\033\142\040\243\046\232\047\146\050\144\051" +
    "\145\052\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\103\247\001\001\000\004\042" +
    "\250\001\001\000\004\067\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\011\137\033\142\046\261\047\146\050\144\051\145\052" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\011\137\033\142\034\236\035\265\036" +
    "\235\037\234\040\231\046\232\047\146\050\144\051\145" +
    "\052\143\001\001\000\002\001\001\000\016\033\102\052" +
    "\120\056\270\057\104\060\267\065\121\001\001\000\006" +
    "\044\274\104\273\001\001\000\004\042\271\001\001\000" +
    "\004\067\272\001\001\000\002\001\001\000\004\043\304" +
    "\001\001\000\002\001\001\000\014\033\102\052\120\057" +
    "\277\060\276\065\121\001\001\000\004\042\302\001\001" +
    "\000\004\042\300\001\001\000\004\067\301\001\001\000" +
    "\002\001\001\000\004\067\303\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\067\307\001" +
    "\001\000\002\001\001\000\004\067\311\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\011\137\033\142\034" +
    "\236\035\314\036\235\037\234\040\231\046\232\047\146" +
    "\050\144\051\145\052\143\001\001\000\004\045\315\001" +
    "\001\000\002\001\001\000\014\033\102\052\120\057\320" +
    "\060\317\065\121\001\001\000\004\102\324\001\001\000" +
    "\004\101\321\001\001\000\004\042\322\001\001\000\004" +
    "\067\323\001\001\000\002\001\001\000\004\042\325\001" +
    "\001\000\004\067\326\001\001\000\002\001\001\000\004" +
    "\066\330\001\001\000\002\001\001\000\004\033\332\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\067\335" +
    "\001\001\000\002\001\001\000\020\011\137\033\142\046" +
    "\345\047\146\050\144\051\145\052\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\067\342\001\001\000" +
    "\002\001\001\000\004\067\344\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\067\347\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\032\352\061\066\001\001" +
    "\000\002\001\001\000\010\030\354\032\071\061\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\066\361\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\371\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\377\001\001\000\004\074\u0100\001\001\000\002" +
    "\001\001\000\004\016\u0102\001\001\000\012\012\052\017" +
    "\056\024\054\061\050\001\001\000\004\022\u0104\001\001" +
    "\000\004\066\u0105\001\001\000\002\001\001\000\010\024" +
    "\u0109\061\u0107\072\u0108\001\001\000\006\025\362\027\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\u010b\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {


	Tab.init(); // Universe scope
	
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "string", CUP$MJParser$actions.stringType));
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "bool", CUP$MJParser$actions.boolType));

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }


	
	int printCallCount = 0;
	boolean errorDetected = false;
	Logger log = Logger.getLogger(getClass());
	
	// slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


							   
	Logger log = Logger.getLogger(getClass());
	
	public static final int String = 5;
 	public static final int Bool = 6;
		
  	public static final Struct stringType = new Struct(String),
   		         			   boolType = new Struct(Bool);
	  
	
	Struct currentType, currentMethType;
	
	Boolean main = false;
	Boolean inside_class = false, inside_meth = false;
	Boolean void_meth = false;
	
	int mainStatements = 0, mainMethodCalls = 0, StatementBlocks = 0;
	int insideFunc = 0, outsideFunc = 0;
	
	Obj _this; // this u klasi koja se obradjuje
 	Obj currentClass;
	Obj this_par;
	
	int tmpVarAdr = 999;
	int VTablePC = 1000;
	
	boolean v_call = false;
	
	
	Stack<Integer> fixup_and = new Stack<Integer>();	 
	Stack<Integer> fixup_or = new Stack<Integer>();	 
	Stack<Integer> fixup_adr = new Stack<Integer>();
	int fixup_while; 	 	 
	
	void report_error(String message) {
    	parser.errorDetected = true;
        log.error(message);
    }
    
    public static void put (int x)  {
			buf[pc++] = (byte)x;
	}
	
	public static byte[] buf = new byte[8192];
	
	public static int pc = 0;
	
  	public static void put2 (int x) { put(x>>8); put(x);  }
  	public static void put4 (int x) { put2(x>>16); put2(x); }
  	
  	public static void loadConst (int n) {
    if (0<=n&&n<=5) put (Code.const_n+n);
    else if (n==-1) put (Code.const_m1);
    else  { put (Code.const_); put4 (n); }
  }

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Mulop ::= MOD 
            {
              Integer RESULT =null;
		 RESULT=Code.rem; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Mulop ::= DIV 
            {
              Integer RESULT =null;
		 RESULT=Code.div; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Mulop ::= MUL 
            {
              Integer RESULT =null;
		 RESULT=Code.mul; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Addop ::= MINUS 
            {
              Integer RESULT =null;
		 RESULT=Code.sub; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Addop ::= PLUS 
            {
              Integer RESULT =null;
		 RESULT=Code.add; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Relop ::= GREATER_EQUALS 
            {
              Integer RESULT =null;
		 RESULT=Code.ge; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Relop ::= GREATER 
            {
              Integer RESULT =null;
		 RESULT=Code.gt; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Relop ::= LESS_EQUALS 
            {
              Integer RESULT =null;
		 RESULT=Code.le; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Relop ::= LESS 
            {
              Integer RESULT =null;
		 RESULT=Code.lt; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Relop ::= NOT_EQUALS 
            {
              Integer RESULT =null;
		 RESULT=Code.ne; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Relop ::= EQUALS 
            {
              Integer RESULT =null;
		 RESULT=Code.eq; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Designator ::= Designator LBRACK error RBRACK 
            {
              Obj RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
			 	 	log.debug("Uspesan oporavak od greske na liniji " + eleft + " pri indeksiranju niza"); 
		 	   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Designator ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		   
			   	   	v_call = false;
			   	
	   		   		RESULT = Tab.find(name);
	   		   		
	   		  	    if(RESULT.getKind() == Obj.Fld)
	   		  	    	Code.load(_this);
	   		   		
	   		   		log.info("Koriscenje identifikatora " + name + " na liniji " +  nameleft);
	   		   		
	   		   		if(RESULT == Tab.noObj)
	   		   			report_error("Greska na liniji "  + nameleft + ":promenjiva " + name + " ne postoji");
	   		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Designator ::= THIS DOT IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			   	   	v_call = false;
			   
			   		Code.load(_this);
			   		
	   		   		log.info("Koriscenje polja " + name + " na liniji " +  nameleft);
	   		   		
			   		RESULT = Tab.find(name);
	   		   		
	   		   		if(RESULT  == Tab.noObj)
	   		   			RESULT = Tab.find("super." + name);
	   		   		
	   		   		if(RESULT == Tab.noObj)
	   		   			report_error("Greska na liniji "  + nameleft + ":polje " + name + " ne postoji");
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Designator ::= SUPER DOT IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			   	   	v_call = false;
			   		
			   		Code.load(_this);
			   
	   		   		log.info("Koriscenje polja super." + name + " na liniji " +  nameleft);
	   		   		
   		   			RESULT = Tab.find("super." + name);
	   		   		
	   		   		if(RESULT == Tab.noObj)
	   		   			report_error("Greska na liniji "  + nameleft + ":polje " + name + " ne postoji");
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Designator ::= Designator DOT IDENT 
            {
              Obj RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
			
			   		v_call = true;
			   		this_par = o;
			   		
			   		// TODO ovde treba da ide provera uslova da li je o instanca klase
			   		Code.load(o); // adr o na estek za kasnije getfield ili putfield 
			   		
			  		for(Obj fld : o.getType().getMembers().symbols())
			  			if(fld.getName().equals(id)) {
			  				RESULT = fld;
			  				break;
			  			}
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Designator ::= Designator LBRACK NT$11 Expr RBRACK 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$11 ::= 
            {
              Obj RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

			   	   v_call = false;
			   
				   if (o.getType().getKind()==Struct.Array) { 
				   		Code.load(o); // adr o na estek za kasnije aload a
				   		RESULT = new Obj(Obj.Elem, "", o.getType().getElemType());
			   		} else {
			   			report_error("Greska na liniji "  + oleft + ":tip nije niz");
			   		}
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$11",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // MethodSign ::= LPAREN ActPars RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodSign",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // MethodSign ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodSign",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // MethodCall ::= Designator MethodSign CountMethodCalls 
            {
              Struct RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
			   	    if(v_call) {
			   	    	Code.load(this_par);
			   	    	Code.put(Code.getfield);
			   	    	Code.put2(0);
			   	    	
			   	    	Code.put(Code.invokevirtual);
			   	    	
			   	    	for(int i = 0; i < o.getName().length(); i++)
							   	Code.put4(o.getName().charAt(i));
							   	
						Code.put4(-1);
			   	    } else {
				   		int dest_adr = o.getAdr() - Code.pc; // relativna adresa 
				   		Code.put(Code.call);
				   		Code.put2(dest_adr);
			   		}
			   		
			   		RESULT = o.getType();
		   	  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodCall",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Factor ::= Designator 
            {
              Struct RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		   		Code.load(o);
		   		
		   		RESULT = o.getType();
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Factor ::= MethodCall 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		   		RESULT = t;
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Factor ::= NEW Type 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		   		Code.put(Code.new_);
		   		Code.put2(currentType.getNumberOfFields());
		   		
		   		Code.put(Code.putstatic); 
		   		Code.put2(tmpVarAdr);
		   		
		   		Code.put(Code.getstatic); 
		   		Code.put2(tmpVarAdr);
		   		
		   		Code.loadConst(t.getAdr());
		   		
		   		Code.put(Code.putfield); 
		   		Code.put2(0);
		   		
		   		Code.put(Code.getstatic); 
		   		Code.put2(tmpVarAdr);
		   		
		   		RESULT = currentType;
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Factor ::= NEW Type LBRACK Expr RBRACK 
            {
              Struct RESULT =null;
		
		   		Code.put(Code.newarray);
		   		Code.put(currentType==Tab.charType ? 0 : 1);
		   		
		   		RESULT = currentType;
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Factor ::= LPAREN Expr RPAREN 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		   		RESULT = t;
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Factor ::= Const 
            {
              Struct RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj con = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
 	    		Code.load(con);
		   		
		   		RESULT = con.getType();
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Term ::= Factor 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			 RESULT = t;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Term ::= Term Mulop Factor 
            {
              Struct RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 	Code.put(op);
		 	
		 	RESULT = t1;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ExprPart ::= Term 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = t;
		 	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprPart",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ExprPart ::= ExprPart Addop Term 
            {
              Struct RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 		Code.put(op);
		 		
		 		RESULT = t1;
		 	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprPart",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Expr ::= MINUS ExprPart 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	 		Code.put(Code.neg);
	 		
	 		RESULT = t;
	 	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expr ::= ExprPart 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 	RESULT = t;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
		 	 	Code.putFalseJump(op, 0); // dummy
		 	 	fixup_and.push(Code.pc - 2);
		 	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CondFact ::= Expr 
            {
              Object RESULT =null;
		
			 	Code.loadConst(0);
		 	 	Code.putFalseJump(Code.ne, 0); // dummy
		 	 	fixup_and.push(Code.pc - 2);
		 	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CondTerm ::= CondTerm AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CondTermFixed ::= CondTerm 
            {
              Object RESULT =null;
		
				  	Code.putJump(0); // dummy
				  	fixup_or.push(Code.pc - 2);
				  	
				  	while(!fixup_and.empty())
				  		Code.fixup(fixup_and.pop());
				  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermFixed",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Condition ::= CondTermFixed 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Condition ::= Condition OR CondTermFixed 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ConditionFixed ::= Condition DummyJump 
            {
              Object RESULT =null;
		
				  	while(!fixup_or.empty())
				  		Code.fixup(fixup_or.pop());
				   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionFixed",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DummyJump ::= 
            {
              Object RESULT =null;
		
				   	Code.putJump(0); // dummy
					fixup_adr.push(Code.pc - 2);
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DummyJump",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DummyJumpEndFix ::= NT$10 DummyJump 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DummyJumpEndFix",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$10 ::= 
            {
              Object RESULT =null;
 Code.pc+=3; Code.fixup(fixup_adr.pop()); Code.pc-=3; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$10",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EndFix ::= 
            {
              Object RESULT =null;
		 Code.fixup(fixup_adr.pop()); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("EndFix",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FixupWhile ::= 
            {
              Object RESULT =null;
		 fixup_while = fixup_adr.peek(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FixupWhile",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ActPars ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ActPars ::= ActPars COMMA Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CountStatementBlocks ::= 
            {
              Object RESULT =null;
		 StatementBlocks++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CountStatementBlocks",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CountMethodCalls ::= 
            {
              Object RESULT =null;
		 if(main)  mainMethodCalls++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CountMethodCalls",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CountStatements ::= 
            {
              Object RESULT =null;
		 if(main)  mainStatements++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CountStatements",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // StatementMatched ::= error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 log.debug("Uspesan oporavak od greske na liniji " + eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // StatementMatched ::= OpenScope LBRACE StatementList CloseScope RBRACE CountStatementBlocks 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // StatementMatched ::= RETURN Expr SEMI CountStatements 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
					 	Code.put(Code.exit);
						Code.put(Code.return_);
						
						if (currentMethType == Tab.noType)
							report_error("Greska na liniji "+ tleft + ":metod ne sme imati return sa izrazom jer je deklarisan sa void");
						if (!t.assignableTo(currentMethType))
							report_error("Greska na liniji "+ tleft + ":tip izraza nekompatibilan sa deklaracijom metoda");
			  		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // StatementMatched ::= RETURN SEMI CountStatements 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
			  		 	Code.put(Code.exit);
						Code.put(Code.return_);
						
						if (currentMethType != Tab.noType)
							report_error("Greska na liniji "+ sleft + ":fali return sa izrazom");			
			  		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // StatementMatched ::= BREAK SEMI CountStatements 
            {
              Object RESULT =null;
		
				  	 	Code.putJump(fixup_while - 1);
				  	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // StatementMatched ::= PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI CountStatements 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
				  	 	Code.loadConst(n);
				  	 	Code.put(t == Tab.charType ? Code.bprint : Code.print);
				  	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // StatementMatched ::= PRINT LPAREN Expr RPAREN SEMI CountStatements 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
				  	 	Code.put(Code.const_n + 0);
				  	 	Code.put(t == Tab.charType ? Code.bprint : Code.print);
				  	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // StatementMatched ::= READ LPAREN Designator RPAREN SEMI CountStatements 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
				  	 	Code.put(o.getType() == Tab.charType ? Code.bread : Code.read);
				  	 	Code.store(o);
				  	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // StatementMatched ::= MethodCall SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // StatementMatched ::= Designator DEC SEMI CountStatements 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
				  	 	Code.load(o);
				  	 	Code.put(Code.const_1);
				  	 	Code.put(Code.sub);
				  		Code.store(o);
				  	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // StatementMatched ::= Designator INC SEMI CountStatements 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
				  	 	Code.load(o);
				  	 	Code.put(Code.const_1);
				  	 	Code.put(Code.add);
				  		Code.store(o);
				  	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // StatementMatched ::= Designator EQUAL Expr SEMI CountStatements 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
				  		Code.store(o);
				  	 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // StatementMatched ::= DO Pc LBRACE StatementList RBRACE WHILE LPAREN ConditionFixed FixupWhile RPAREN SEMI NT$9 EndFix CountStatements 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).right;
		Integer pc = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-13)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$9 ::= 
            {
              Object RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Integer pc = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
 Code.putJump(pc); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$9",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // StatementMatched ::= WHILE Pc LPAREN ConditionFixed FixupWhile RPAREN StatementMatched NT$8 EndFix CountStatements 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Integer pc = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$8 ::= 
            {
              Object RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Integer pc = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
 Code.putJump(pc); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$8",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // StatementMatched ::= IF LPAREN ConditionFixed RPAREN StatementMatched DummyJumpEndFix ELSE StatementMatched EndFix CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // StatementUnmatched ::= WHILE Pc LPAREN ConditionFixed FixupWhile RPAREN StatementUnmatched NT$7 EndFix CountStatements 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Integer pc = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$7 ::= 
            {
              Object RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Integer pc = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
 Code.putJump(pc); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // StatementUnmatched ::= IF LPAREN ConditionFixed RPAREN StatementMatched DummyJumpEndFix ELSE StatementUnmatched EndFix CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // StatementUnmatched ::= IF LPAREN ConditionFixed RPAREN Statement EndFix CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Statement ::= StatementMatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Statement ::= StatementUnmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Pc ::= 
            {
              Integer RESULT =null;
		 RESULT = Code.pc; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Pc",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FormPar ::= Type IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				Tab.insert(Obj.Var, name, new Struct(Struct.Array, currentType));
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPar",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FormPar ::= Type IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				Tab.insert(Obj.Var, name, currentType);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPar",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FormPars ::= FormPar 
            {
              Integer RESULT =null;
		 RESULT = 1; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FormPars ::= FormPars COMMA FormPar 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT = n + 1; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MethodPars ::= error 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
			   		RESULT = 0;
			 		log.debug("Uspesan oporavak od greske na liniji " + eleft + " u formalnim parametrima do )"); 
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodPars",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // MethodPars ::= error COMMA FormPars 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
			   		RESULT = n;
					log.debug("Uspesan oporavak od greske na liniji " + eleft + " u formalnim parametrima do ,"); 
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodPars",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MethodPars ::= 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodPars",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MethodPars ::= FormPars 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = n; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodPars",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MethodName ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			   		currentMethType = currentType;
			   		
				   	if(inside_class) {
				   		insideFunc++;
				   	}
				   	else {
				   		outsideFunc++;
				   		if (name.equals("main")) {
				   			main = true;
				   			Code.mainPc = Code.pc;
				   			
				   			for(int i = 0; i < pc; i++)
				   				Code.put(buf[i]);
				   			
				   			if (!void_meth)
				   				report_error("Metod main mora biti void");
				   		}
				   	}
				   	 
				   	RESULT = Tab.insert(Obj.Meth, name, void_meth ? Tab.noType : currentType);
				   	RESULT.setAdr(Code.pc);
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodName",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MethodDeclPart ::= MethodName OpenScope NT$4 LPAREN MethodPars RPAREN MethodLocalVarDeclList NT$5 LBRACE StatementList RBRACE NT$6 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		 inside_meth = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclPart",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-12)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;

				   		Tab.chainLocalSymbols(m); 
				   		if (void_meth) {
							Code.put(Code.exit); 
							Code.put(Code.return_); 
						} 
						else { 
							// postaviti trap funkciju na kraj tela funkcije,
							// da izazove run time grešku ako se zaobiđe return 
							Code.put(Code.trap); 
							Code.put(1);
						}
				   		main = false; 
				   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

				   		m.setLevel(n);
				    	Code.put(Code.enter); 
				   		Code.put(n + (insideClass ? 1 : 0));
				   		Code.put(Tab.currentScope().getnVars());
				   		
				   		/*
				   		for (Obj var : Tab.currentScope().getLocals().symbols())
				   			if(var.getAdr() < n)
				   				Code.store(var);
				   		*/	
				   		
				   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$4 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
 
					   	inside_meth = true; 
					  	
					   	if(inside_class) {
					  		_this = Tab.insert(Obj.Var, "this", Tab.noType);
					  		
					  		for(int i = 0; i < m.getName().length(); i++) {
							   	loadConst(m.getName().charAt(i));
							   	
							   	put (Code.putstatic); 
							   	put2 (VTablePC++);
							}
							
							loadConst (-1); 
						   	
						   	put (Code.putstatic); 
						   	put2 (VTablePC++);
						   	
						   	loadConst (m.getAdr()); 
						   	
						   	put (Code.putstatic); 
						   	put2 (VTablePC++);
					  	}
				   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MethodLocalVarDeclList ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							 	 log.debug("Uspesan oporavak od greske na liniji " + eleft + " pri definisanju lokalne promenjive do {"); 
						   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodLocalVarDeclList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MethodLocalVarDeclList ::= error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
						 	 	log.debug("Uspesan oporavak od greske na liniji " + eleft + " pri definisanju lokalne promenjive do ;"); 
					 	   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodLocalVarDeclList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MethodLocalVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodLocalVarDeclList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodLocalVarDeclList ::= MethodLocalVarDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodLocalVarDeclList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodDecl ::= VOID NT$3 MethodDeclPart 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 void_meth = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$3 ::= 
            {
              Object RESULT =null;
 void_meth = true; currentType = Tab.noType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodDecl ::= Type MethodDeclPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Type ::= IDENT 
            {
              Obj RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 	Obj typeNode = RESULT = Tab.find(typeName);
			if (typeNode == Tab.noObj) {
				log.info("Nije pronadjen tip " + typeName + " u tabeli simbola");
				currentType = Tab.noType;
			}
			else {
				if (Obj.Type == typeNode.getKind()) {
					currentType = typeNode.getType();
				}
				else {
					report_error("Greska na liniji" + typeNameleft + ": Ime " + typeName + " ne predstavlja tip ");
					currentType = Tab.noType;
				}
			}
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ClassVarMethodDecl ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					 	 	log.debug("Uspesan oporavak od greske na liniji " + eleft + " pri definicji klase"); 
				 	   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarMethodDecl",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClassVarMethodDecl ::= MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarMethodDecl",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassVarMethodDecl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarMethodDecl",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClassVarMethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarMethodDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassVarMethodDeclList ::= ClassVarMethodDeclList ClassVarMethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassVarMethodDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassName ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			  	inside_class = true;
			  	RESULT = currentClass = Tab.insert(Obj.Type, name, new Struct(Struct.Class));
			  	
			  	currentClass.setAdr(VTablePC); // vTable
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassName",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassBase ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			 	 log.debug("Uspesan oporavak od greske na liniji " + eleft + " pri nasledjivanju klasa"); 
		 	  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassBase",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassBase ::= IDENT 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			  	RESULT = name;
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassBase",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassExit ::= 
            {
              Object RESULT =null;
		
					Tab.chainLocalSymbols(currentClass.getType());
				    inside_class = false;
 					
					loadConst(-2);
				   	
				   	put (Code.putstatic); 
				   	put2 (VTablePC++);
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassExit",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassDecl ::= CLASS ClassName EXTENDS ClassBase OpenScope NT$2 LBRACE ClassVarMethodDeclList RBRACE ClassExit CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int baseleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		String base = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$2 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int baseleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String base = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

			  		Tab.insert(Obj.Fld, "@vtable", Tab.noType);
			  		
				  	Obj b = Tab.find(base);
				  		
				  	for(Obj o : b.getType().getMembers().symbols())
				  		if(!o.getName().equals("@vtable")) {
					  		Obj n = Tab.insert(o.getKind(), "super." + o.getName(), o.getType());
					  		n.setAdr(o.getAdr());
					  	}
			  	
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassDecl ::= CLASS ClassName OpenScope NT$1 LBRACE ClassVarMethodDeclList RBRACE ClassExit CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$1 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

			  	Tab.insert(Obj.Fld, "@vtable", Tab.noType);
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Var ::= IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
 			if(!inside_class && !inside_meth)
				Code.dataSize++;
			Tab.insert(inside_class && !inside_meth ? Obj.Fld : Obj.Var, name, new Struct(Struct.Array, currentType));  
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Var ::= IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			if(!inside_class && !inside_meth)
				Code.dataSize++;
			Tab.insert(inside_class && !inside_meth ? Obj.Fld : Obj.Var, name, currentType);  
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarList ::= Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarList ::= VarList COMMA Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDecl ::= Type VarList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= BOOL 
            {
              Obj RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		 	RESULT = new Obj(Obj.Con, "", boolType);  
 	    	RESULT.setAdr(val ? 1:0);
		  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Const ::= CHAR 
            {
              Obj RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character val = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		  	RESULT = new Obj(Obj.Con, "", Tab.charType);  
 	    	RESULT.setAdr(val);
		  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Const ::= NUMBER 
            {
              Obj RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
		  	RESULT = new Obj(Obj.Con, "", Tab.intType);  
 	    	RESULT.setAdr((int)val); // U adr se pamti vrednost konstante
		  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstListPart ::= IDENT EQUAL STRING 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					   if(Tab.currentScope.findSymbol(name) != null)
					  		report_error("Vec postoji identifikator " + name);
					  	else {
					  		Code.dataSize ++;
					   		Obj con = Tab.insert(Obj.Var,  "@@@" + name, new Struct(Struct.Array, Tab.charType));
					   		
					   		
					   		put (Code.const_); 
					   		put4 (val.length());
					   		
					   		put(Code.newarray);
		   					put(0);
		   					
				   			put(Code.putstatic);
				   			put2 (con.getAdr());
					   		
				   			for(int i = 0; i < val.length(); i++) {
						   		put(Code.getstatic);
				   				put2 (con.getAdr());
				   				
						   		put (Code.const_); 
						   		put4 (i);
						   		
								loadConst(val.charAt(i));
				
						   		put(Code.bastore);
					   		}
					   		
					   		Obj c = Tab.insert(Obj.Con, name, new Struct(Struct.Array, Tab.charType));
					   	    c.setAdr(con.getAdr());
				   		}
				   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstListPart",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstListPart ::= IDENT EQUAL Const 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj o = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				  	if(Tab.currentScope.findSymbol(name) != null)
				  		report_error("Vec postoji identifikator " + name);
				  	else {
				  		Obj con = Tab.insert(Obj.Con, name, currentType);
				  		con.setAdr(o.getAdr());
				  		
				  		if(o.getType() != currentType)
				  			report_error("Greska u tipu na liniji " + oleft);
				  	}
				   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstListPart",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstList ::= ConstListPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstList ::= ConstList COMMA ConstListPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstDecl ::= CONST error SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
			  	log.debug("Uspesan oporavak od greske na liniji " + sleft + " pri definisanju konstante"); 
		  	  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDecl ::= CONST Type ConstList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclList ::= DeclList Decl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		  
				RESULT = Tab.insert(Obj.Prog, pName, Tab.noType);
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= PROG ProgName OpenScope DeclList LBRACE MethodDeclList NT$0 RBRACE CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		
				Code.dataSize = VTablePC;
				
				int array_count = 0;
				int var_count = 0;
				int con_count = 0;
				int class_count = 0;
				
				for(Obj s : p.getLocalSymbols())
					if(s.getKind() == Obj.Var)
						if(s.getType().getKind() == Struct.Array)
							array_count++;
						else
							var_count++;
					else if(s.getKind() == Obj.Con)
						con_count++;
					else if(s.getKind() == Obj.Type)
						class_count++;
									
				log.info("Broj globalnih prostih promenjivih:" + var_count);
				log.info("Broj globalnih nizova:" + array_count);
				log.info("Broj globalnih konstanti:" + con_count);
				log.info("Broj unutrasnjih klasa:" + class_count);
				log.info("Broj iskaza u main-u:" + mainStatements);
				log.info("Broj poziva metoda u main-u:" + mainMethodCalls);
				log.info("Broj blokova naredbi:" + StatementBlocks);
				log.info("Broj funkcija glavnog programa:" + outsideFunc);
				log.info("Broj funkcija unutrasnjih klasa:" + insideFunc);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
 Tab.chainLocalSymbols(p); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CloseScope ::= 
            {
              Object RESULT =null;
		 Tab.closeScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CloseScope",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // OpenScope ::= 
            {
              Object RESULT =null;
		 Tab.openScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpenScope",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

