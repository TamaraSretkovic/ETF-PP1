
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Aug 13 10:04:57 CEST 2013
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Aug 13 10:04:57 CEST 2013
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\051\002\000\002\052" +
    "\002\000\002\056\002\000\002\002\013\000\002\003\003" +
    "\000\002\004\004\000\002\004\002\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\006\000\002" +
    "\007\005\000\002\007\003\000\002\010\005\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\013\004\000\002\013\002\000\002\012\005\000" +
    "\002\015\005\000\002\015\003\000\002\014\003\000\002" +
    "\014\005\000\002\057\002\000\002\016\012\000\002\060" +
    "\002\000\002\016\014\000\002\017\003\000\002\020\004" +
    "\000\002\020\002\000\002\021\003\000\002\021\003\000" +
    "\002\050\003\000\002\022\004\000\002\022\002\000\002" +
    "\061\002\000\002\023\016\000\002\062\002\000\002\023" +
    "\016\000\002\025\003\000\002\024\003\000\002\024\002" +
    "\000\002\026\006\000\002\026\004\000\002\043\004\000" +
    "\002\043\002\000\002\044\003\000\002\044\003\000\002" +
    "\046\010\000\002\046\012\000\002\046\010\000\002\047" +
    "\012\000\002\047\005\000\002\047\010\000\002\047\010" +
    "\000\002\047\010\000\002\047\012\000\002\047\005\000" +
    "\002\047\005\000\002\047\006\000\002\047\010\000\002" +
    "\047\014\000\002\053\002\000\002\054\002\000\002\055" +
    "\002\000\002\045\005\000\002\045\004\000\002\045\004" +
    "\000\002\045\006\000\002\045\005\000\002\035\005\000" +
    "\002\035\003\000\002\030\005\000\002\030\003\000\002" +
    "\031\005\000\002\031\003\000\002\032\003\000\002\032" +
    "\005\000\002\033\003\000\002\033\004\000\002\034\005" +
    "\000\002\034\003\000\002\041\005\000\002\041\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\005\000\002" +
    "\042\003\000\002\042\003\000\002\042\007\000\002\042" +
    "\004\000\002\042\006\000\002\042\005\000\002\042\003" +
    "\000\002\027\006\000\002\027\005\000\002\027\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\037" +
    "\003\000\002\037\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\004\004\005\001\002\000\004\002\352\001" +
    "\002\000\004\054\006\001\002\000\012\005\ufffc\006\ufffc" +
    "\042\ufffc\054\ufffc\001\002\000\012\005\000\006\000\042" +
    "\000\054\000\001\002\000\012\005\ufffa\006\ufffa\042\ufffa" +
    "\054\ufffa\001\002\000\012\005\022\006\021\042\014\054" +
    "\015\001\002\000\004\054\317\001\002\000\012\005\ufffb" +
    "\006\ufffb\042\ufffb\054\ufffb\001\002\000\010\011\uffdc\043" +
    "\uffdc\054\uffdc\001\002\000\050\021\uffde\022\uffde\023\uffde" +
    "\024\uffde\025\uffde\030\uffde\031\uffde\034\uffde\035\uffde\036" +
    "\uffde\037\uffde\040\uffde\041\uffde\044\uffde\045\uffde\046\uffde" +
    "\050\uffde\051\uffde\054\uffde\001\002\000\012\005\ufff8\006" +
    "\ufff8\042\ufff8\054\ufff8\001\002\000\012\005\ufff7\006\ufff7" +
    "\042\ufff7\054\ufff7\001\002\000\012\005\ufff9\006\ufff9\042" +
    "\ufff9\054\ufff9\001\002\000\004\054\041\001\002\000\004" +
    "\054\015\001\002\000\004\054\025\001\002\000\006\046" +
    "\ufff4\051\ufff4\001\002\000\004\020\032\001\002\000\006" +
    "\046\030\051\027\001\002\000\004\054\025\001\002\000" +
    "\012\005\ufff6\006\ufff6\042\ufff6\054\ufff6\001\002\000\006" +
    "\046\ufff5\051\ufff5\001\002\000\012\053\034\055\033\056" +
    "\037\057\036\001\002\000\006\046\ufff1\051\ufff1\001\002" +
    "\000\006\046\ufff2\051\ufff2\001\002\000\006\046\ufff3\051" +
    "\ufff3\001\002\000\006\046\uffef\051\uffef\001\002\000\006" +
    "\046\ufff0\051\ufff0\001\002\000\006\007\042\042\000\001" +
    "\002\000\006\007\uffe3\042\uffe3\001\002\000\004\054\335" +
    "\001\002\000\004\042\044\001\002\000\010\011\uffe1\043" +
    "\uffe1\054\uffe1\001\002\000\010\011\053\043\051\054\015" +
    "\001\002\000\010\011\uffe2\043\uffe2\054\uffe2\001\002\000" +
    "\004\054\311\001\002\000\010\011\uffe0\043\uffe0\054\uffe0" +
    "\001\002\000\012\005\uffe7\006\uffe7\042\uffe7\054\uffe7\001" +
    "\002\000\010\011\uffdf\043\uffdf\054\uffdf\001\002\000\004" +
    "\054\054\001\002\000\004\047\uffd7\001\002\000\004\047" +
    "\056\001\002\000\006\050\uffd5\054\015\001\002\000\004" +
    "\054\306\001\002\000\006\050\uffd6\051\303\001\002\000" +
    "\004\050\062\001\002\000\006\042\000\054\000\001\002" +
    "\000\006\042\uffed\054\uffed\001\002\000\006\042\065\054" +
    "\015\001\002\000\026\010\uffd1\013\uffd1\015\uffd1\016\uffd1" +
    "\017\uffd1\032\uffd1\033\uffd1\042\uffd1\043\uffd1\054\uffd1\001" +
    "\002\000\006\042\uffee\054\uffee\001\002\000\026\010\102" +
    "\013\076\015\071\016\103\017\105\032\101\033\070\042" +
    "\000\043\104\054\072\001\002\000\004\047\276\001\002" +
    "\000\004\047\267\001\002\000\060\020\uff9e\021\uff9e\022" +
    "\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e" +
    "\031\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041" +
    "\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e" +
    "\052\uff9e\001\002\000\016\020\251\026\250\027\253\044" +
    "\160\047\254\052\162\001\002\000\004\042\243\001\002" +
    "\000\026\010\uffcf\013\uffcf\015\uffcf\016\uffcf\017\uffcf\032" +
    "\uffcf\033\uffcf\042\uffcf\043\uffcf\054\uffcf\001\002\000\004" +
    "\047\230\001\002\000\026\010\uffd2\013\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\032\uffd2\033\uffd2\042\uffd2\043\uffd2\054\uffd2" +
    "\001\002\000\026\010\uffd0\013\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\032\uffd0\033\uffd0\042\uffd0\043\uffd0\054\uffd0\001\002" +
    "\000\004\047\216\001\002\000\024\012\122\022\117\046" +
    "\212\047\134\053\124\054\072\055\126\056\135\057\120" +
    "\001\002\000\004\042\112\001\002\000\010\011\uffd9\043" +
    "\uffd9\054\uffd9\001\002\000\004\046\106\001\002\000\030" +
    "\010\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\032" +
    "\uffc0\033\uffc0\042\uffc0\043\uffc0\054\uffc0\001\002\000\030" +
    "\010\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\032" +
    "\uffc5\033\uffc5\042\uffc5\043\uffc5\054\uffc5\001\002\000\010" +
    "\011\uffff\043\uffff\054\uffff\001\002\000\010\011\uffd8\043" +
    "\uffd8\054\uffd8\001\002\000\026\010\uffd1\013\uffd1\015\uffd1" +
    "\016\uffd1\017\uffd1\032\uffd1\033\uffd1\042\uffd1\043\uffd1\054" +
    "\uffd1\001\002\000\026\010\102\013\076\015\071\016\103" +
    "\017\105\032\101\033\070\042\000\043\114\054\072\001" +
    "\002\000\004\015\115\001\002\000\004\047\116\001\002" +
    "\000\022\012\122\022\117\047\134\053\124\054\072\055" +
    "\126\056\135\057\120\001\002\000\020\012\122\047\134" +
    "\053\124\054\072\055\126\056\135\057\120\001\002\000" +
    "\044\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\030\uffa7" +
    "\031\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041" +
    "\uffa7\045\uffa7\046\uffa7\050\uffa7\051\uffa7\001\002\000\024" +
    "\030\uffb2\031\uffb2\034\200\035\204\036\203\037\206\040" +
    "\201\041\202\050\uffb2\001\002\000\004\054\015\001\002" +
    "\000\052\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\030" +
    "\uffa1\031\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1" +
    "\041\uffa1\044\160\045\uffa1\046\uffa1\047\161\050\uffa1\051" +
    "\uffa1\052\162\001\002\000\044\021\uffaa\022\uffaa\023\uffaa" +
    "\024\uffaa\025\uffaa\030\uffaa\031\uffaa\034\uffaa\035\uffaa\036" +
    "\uffaa\037\uffaa\040\uffaa\041\uffaa\045\uffaa\046\uffaa\050\uffaa" +
    "\051\uffaa\001\002\000\006\031\154\050\153\001\002\000" +
    "\044\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\030\uffa6" +
    "\031\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041" +
    "\uffa6\045\uffa6\046\uffa6\050\uffa6\051\uffa6\001\002\000\010" +
    "\030\uffb3\031\uffb3\050\uffb3\001\002\000\044\021\uffad\022" +
    "\uffad\023\147\024\150\025\146\030\uffad\031\uffad\034\uffad" +
    "\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\045\uffad\046" +
    "\uffad\050\uffad\051\uffad\001\002\000\044\021\uffab\022\uffab" +
    "\023\uffab\024\uffab\025\uffab\030\uffab\031\uffab\034\uffab\035" +
    "\uffab\036\uffab\037\uffab\040\uffab\041\uffab\045\uffab\046\uffab" +
    "\050\uffab\051\uffab\001\002\000\036\021\142\022\143\030" +
    "\uffb0\031\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\045\uffb0\046\uffb0\050\uffb0\051\uffb0\001\002\000" +
    "\010\030\140\031\uffb5\050\uffb5\001\002\000\022\012\122" +
    "\022\117\047\134\053\124\054\072\055\126\056\135\057" +
    "\120\001\002\000\044\021\uffa9\022\uffa9\023\uffa9\024\uffa9" +
    "\025\uffa9\030\uffa9\031\uffa9\034\uffa9\035\uffa9\036\uffa9\037" +
    "\uffa9\040\uffa9\041\uffa9\045\uffa9\046\uffa9\050\uffa9\051\uffa9" +
    "\001\002\000\004\050\137\001\002\000\044\021\uffa8\022" +
    "\uffa8\023\uffa8\024\uffa8\025\uffa8\030\uffa8\031\uffa8\034\uffa8" +
    "\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\045\uffa8\046" +
    "\uffa8\050\uffa8\051\uffa8\001\002\000\022\012\122\022\117" +
    "\047\134\053\124\054\072\055\126\056\135\057\120\001" +
    "\002\000\010\030\uffb4\031\uffb4\050\uffb4\001\002\000\020" +
    "\012\uff97\047\uff97\053\uff97\054\uff97\055\uff97\056\uff97\057" +
    "\uff97\001\002\000\020\012\uff96\047\uff96\053\uff96\054\uff96" +
    "\055\uff96\056\uff96\057\uff96\001\002\000\020\012\122\047" +
    "\134\053\124\054\072\055\126\056\135\057\120\001\002" +
    "\000\044\021\uffae\022\uffae\023\147\024\150\025\146\030" +
    "\uffae\031\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae" +
    "\041\uffae\045\uffae\046\uffae\050\uffae\051\uffae\001\002\000" +
    "\020\012\uff93\047\uff93\053\uff93\054\uff93\055\uff93\056\uff93" +
    "\057\uff93\001\002\000\020\012\uff95\047\uff95\053\uff95\054" +
    "\uff95\055\uff95\056\uff95\057\uff95\001\002\000\020\012\uff94" +
    "\047\uff94\053\uff94\054\uff94\055\uff94\056\uff94\057\uff94\001" +
    "\002\000\020\012\122\047\134\053\124\054\072\055\126" +
    "\056\135\057\120\001\002\000\044\021\uffac\022\uffac\023" +
    "\uffac\024\uffac\025\uffac\030\uffac\031\uffac\034\uffac\035\uffac" +
    "\036\uffac\037\uffac\040\uffac\041\uffac\045\uffac\046\uffac\050" +
    "\uffac\051\uffac\001\002\000\004\046\156\001\002\000\022" +
    "\012\122\022\117\047\134\053\124\054\072\055\126\056" +
    "\135\057\120\001\002\000\010\030\140\031\uffb6\050\uffb6" +
    "\001\002\000\030\010\uffc0\013\uffc0\014\uffc0\015\uffc0\016" +
    "\uffc0\017\uffc0\032\uffc0\033\uffc0\042\uffc0\043\uffc0\054\uffc0" +
    "\001\002\000\030\010\uffc1\013\uffc1\014\uffc1\015\uffc1\016" +
    "\uffc1\017\uffc1\032\uffc1\033\uffc1\042\uffc1\043\uffc1\054\uffc1" +
    "\001\002\000\022\012\122\022\117\047\134\053\124\054" +
    "\072\055\126\056\135\057\120\001\002\000\024\012\122" +
    "\022\117\047\134\050\166\053\124\054\072\055\126\056" +
    "\135\057\120\001\002\000\004\054\163\001\002\000\060" +
    "\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026" +
    "\uff9f\027\uff9f\030\uff9f\031\uff9f\034\uff9f\035\uff9f\036\uff9f" +
    "\037\uff9f\040\uff9f\041\uff9f\044\uff9f\045\uff9f\046\uff9f\047" +
    "\uff9f\050\uff9f\051\uff9f\052\uff9f\001\002\000\006\050\uffb7" +
    "\051\uffb7\001\002\000\006\050\170\051\167\001\002\000" +
    "\044\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\030\uffa2" +
    "\031\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041" +
    "\uffa2\045\uffa2\046\uffa2\050\uffa2\051\uffa2\001\002\000\022" +
    "\012\122\022\117\047\134\053\124\054\072\055\126\056" +
    "\135\057\120\001\002\000\044\021\uffa3\022\uffa3\023\uffa3" +
    "\024\uffa3\025\uffa3\030\uffa3\031\uffa3\034\uffa3\035\uffa3\036" +
    "\uffa3\037\uffa3\040\uffa3\041\uffa3\045\uffa3\046\uffa3\050\uffa3" +
    "\051\uffa3\001\002\000\006\050\uffb8\051\uffb8\001\002\000" +
    "\004\045\173\001\002\000\060\020\uffa0\021\uffa0\022\uffa0" +
    "\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031" +
    "\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0" +
    "\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052" +
    "\uffa0\001\002\000\046\021\uffa4\022\uffa4\023\uffa4\024\uffa4" +
    "\025\uffa4\030\uffa4\031\uffa4\034\uffa4\035\uffa4\036\uffa4\037" +
    "\uffa4\040\uffa4\041\uffa4\044\175\045\uffa4\046\uffa4\050\uffa4" +
    "\051\uffa4\001\002\000\022\012\122\022\117\047\134\053" +
    "\124\054\072\055\126\056\135\057\120\001\002\000\004" +
    "\045\177\001\002\000\044\021\uffa5\022\uffa5\023\uffa5\024" +
    "\uffa5\025\uffa5\030\uffa5\031\uffa5\034\uffa5\035\uffa5\036\uffa5" +
    "\037\uffa5\040\uffa5\041\uffa5\045\uffa5\046\uffa5\050\uffa5\051" +
    "\uffa5\001\002\000\022\012\uff9d\022\uff9d\047\uff9d\053\uff9d" +
    "\054\uff9d\055\uff9d\056\uff9d\057\uff9d\001\002\000\022\012" +
    "\uff99\022\uff99\047\uff99\053\uff99\054\uff99\055\uff99\056\uff99" +
    "\057\uff99\001\002\000\022\012\uff98\022\uff98\047\uff98\053" +
    "\uff98\054\uff98\055\uff98\056\uff98\057\uff98\001\002\000\022" +
    "\012\uff9b\022\uff9b\047\uff9b\053\uff9b\054\uff9b\055\uff9b\056" +
    "\uff9b\057\uff9b\001\002\000\022\012\uff9c\022\uff9c\047\uff9c" +
    "\053\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\001\002\000" +
    "\022\012\122\022\117\047\134\053\124\054\072\055\126" +
    "\056\135\057\120\001\002\000\022\012\uff9a\022\uff9a\047" +
    "\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\001\002" +
    "\000\010\030\uffb1\031\uffb1\050\uffb1\001\002\000\036\021" +
    "\142\022\143\030\uffaf\031\uffaf\034\uffaf\035\uffaf\036\uffaf" +
    "\037\uffaf\040\uffaf\041\uffaf\045\uffaf\046\uffaf\050\uffaf\051" +
    "\uffaf\001\002\000\004\046\214\001\002\000\030\010\uffc0" +
    "\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\032\uffc0\033" +
    "\uffc0\042\uffc0\043\uffc0\054\uffc0\001\002\000\030\010\uffc4" +
    "\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\032\uffc4\033" +
    "\uffc4\042\uffc4\043\uffc4\054\uffc4\001\002\000\030\010\uffc0" +
    "\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\032\uffc0\033" +
    "\uffc0\042\uffc0\043\uffc0\054\uffc0\001\002\000\030\010\uffc3" +
    "\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\032\uffc3\033" +
    "\uffc3\042\uffc3\043\uffc3\054\uffc3\001\002\000\022\012\122" +
    "\022\117\047\134\053\124\054\072\055\126\056\135\057" +
    "\120\001\002\000\006\050\221\051\220\001\002\000\004" +
    "\053\224\001\002\000\004\046\222\001\002\000\030\010" +
    "\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\032\uffc0" +
    "\033\uffc0\042\uffc0\043\uffc0\054\uffc0\001\002\000\030\010" +
    "\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\032\uffc7" +
    "\033\uffc7\042\uffc7\043\uffc7\054\uffc7\001\002\000\004\050" +
    "\225\001\002\000\004\046\226\001\002\000\030\010\uffc0" +
    "\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\032\uffc0\033" +
    "\uffc0\042\uffc0\043\uffc0\054\uffc0\001\002\000\030\010\uffc6" +
    "\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\032\uffc6\033" +
    "\uffc6\042\uffc6\043\uffc6\054\uffc6\001\002\000\022\012\122" +
    "\022\117\047\134\053\124\054\072\055\126\056\135\057" +
    "\120\001\002\000\006\031\154\050\232\001\002\000\024" +
    "\010\102\013\076\015\071\016\103\017\105\032\101\033" +
    "\070\042\000\054\072\001\002\000\030\010\uffcf\013\uffcf" +
    "\014\236\015\uffcf\016\uffcf\017\uffcf\032\uffcf\033\uffcf\042" +
    "\uffcf\043\uffcf\054\uffcf\001\002\000\026\010\uffc0\013\uffc0" +
    "\015\uffc0\016\uffc0\017\uffc0\032\uffc0\033\uffc0\042\uffc0\043" +
    "\uffc0\054\uffc0\001\002\000\026\010\uffce\013\uffce\015\uffce" +
    "\016\uffce\017\uffce\032\uffce\033\uffce\042\uffce\043\uffce\054" +
    "\uffce\001\002\000\024\010\102\013\076\015\071\016\103" +
    "\017\105\032\101\033\070\042\000\054\072\001\002\000" +
    "\030\010\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0" +
    "\032\uffc0\033\uffc0\042\uffc0\043\uffc0\054\uffc0\001\002\000" +
    "\026\010\uffc0\013\uffc0\015\uffc0\016\uffc0\017\uffc0\032\uffc0" +
    "\033\uffc0\042\uffc0\043\uffc0\054\uffc0\001\002\000\026\010" +
    "\uffcd\013\uffcd\015\uffcd\016\uffcd\017\uffcd\032\uffcd\033\uffcd" +
    "\042\uffcd\043\uffcd\054\uffcd\001\002\000\030\010\uffcb\013" +
    "\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\032\uffcb\033\uffcb" +
    "\042\uffcb\043\uffcb\054\uffcb\001\002\000\026\010\uffd1\013" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\032\uffd1\033\uffd1\042\uffd1" +
    "\043\uffd1\054\uffd1\001\002\000\026\010\102\013\076\015" +
    "\071\016\103\017\105\032\101\033\070\042\000\043\uffff" +
    "\054\072\001\002\000\004\043\246\001\002\000\030\010" +
    "\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\032\uffbe" +
    "\033\uffbe\042\uffbe\043\uffbe\054\uffbe\001\002\000\030\010" +
    "\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\032\uffc2" +
    "\033\uffc2\042\uffc2\043\uffc2\054\uffc2\001\002\000\004\046" +
    "\uffc0\001\002\000\022\012\122\022\117\047\134\053\124" +
    "\054\072\055\126\056\135\057\120\001\002\000\004\046" +
    "\263\001\002\000\004\046\uffc0\001\002\000\024\012\122" +
    "\022\117\047\134\050\256\053\124\054\072\055\126\056" +
    "\135\057\120\001\002\000\006\050\260\051\167\001\002" +
    "\000\004\046\uffbf\001\002\000\004\046\uffb9\001\002\000" +
    "\004\046\uffbf\001\002\000\004\046\uffba\001\002\000\004" +
    "\046\uffbb\001\002\000\030\010\uffca\013\uffca\014\uffca\015" +
    "\uffca\016\uffca\017\uffca\032\uffca\033\uffca\042\uffca\043\uffca" +
    "\054\uffca\001\002\000\004\046\uffc0\001\002\000\004\046" +
    "\uffbd\001\002\000\004\046\uffbc\001\002\000\022\012\122" +
    "\022\117\047\134\053\124\054\072\055\126\056\135\057" +
    "\120\001\002\000\006\031\154\050\271\001\002\000\024" +
    "\010\102\013\076\015\071\016\103\017\105\032\101\033" +
    "\070\042\000\054\072\001\002\000\030\010\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\016\uffc0\017\uffc0\032\uffc0\033\uffc0\042" +
    "\uffc0\043\uffc0\054\uffc0\001\002\000\026\010\uffc0\013\uffc0" +
    "\015\uffc0\016\uffc0\017\uffc0\032\uffc0\033\uffc0\042\uffc0\043" +
    "\uffc0\054\uffc0\001\002\000\026\010\uffcc\013\uffcc\015\uffcc" +
    "\016\uffcc\017\uffcc\032\uffcc\033\uffcc\042\uffcc\043\uffcc\054" +
    "\uffcc\001\002\000\030\010\uffc9\013\uffc9\014\uffc9\015\uffc9" +
    "\016\uffc9\017\uffc9\032\uffc9\033\uffc9\042\uffc9\043\uffc9\054" +
    "\uffc9\001\002\000\004\054\072\001\002\000\010\044\160" +
    "\050\300\052\162\001\002\000\004\046\301\001\002\000" +
    "\030\010\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0" +
    "\032\uffc0\033\uffc0\042\uffc0\043\uffc0\054\uffc0\001\002\000" +
    "\030\010\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\032\uffc8\033\uffc8\042\uffc8\043\uffc8\054\uffc8\001\002\000" +
    "\004\054\015\001\002\000\004\054\305\001\002\000\006" +
    "\050\uffd4\051\uffd4\001\002\000\006\050\uffd3\051\uffd3\001" +
    "\002\000\012\005\uffff\006\uffff\042\uffff\054\uffff\001\002" +
    "\000\012\005\uffe6\006\uffe6\042\uffe6\054\uffe6\001\002\000" +
    "\012\044\321\046\uffe9\047\uffd7\051\uffe9\001\002\000\004" +
    "\047\323\001\002\000\006\046\uffea\051\uffea\001\002\000" +
    "\006\046\316\051\315\001\002\000\004\054\317\001\002" +
    "\000\016\005\uffec\006\uffec\011\uffec\042\uffec\043\uffec\054" +
    "\uffec\001\002\000\010\044\321\046\uffe9\051\uffe9\001\002" +
    "\000\006\046\uffeb\051\uffeb\001\002\000\004\045\322\001" +
    "\002\000\006\046\uffe8\051\uffe8\001\002\000\006\050\uffd5" +
    "\054\015\001\002\000\004\050\325\001\002\000\006\042" +
    "\000\054\000\001\002\000\006\042\uffed\054\uffed\001\002" +
    "\000\006\042\330\054\015\001\002\000\026\010\uffd1\013" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\032\uffd1\033\uffd1\042\uffd1" +
    "\043\uffd1\054\uffd1\001\002\000\026\010\102\013\076\015" +
    "\071\016\103\017\105\032\101\033\070\042\000\043\332" +
    "\054\072\001\002\000\010\011\uffdb\043\uffdb\054\uffdb\001" +
    "\002\000\010\011\uffff\043\uffff\054\uffff\001\002\000\010" +
    "\011\uffda\043\uffda\054\uffda\001\002\000\004\042\000\001" +
    "\002\000\004\042\337\001\002\000\010\011\uffe1\043\uffe1" +
    "\054\uffe1\001\002\000\010\011\053\043\341\054\015\001" +
    "\002\000\012\005\uffe5\006\uffe5\042\uffe5\054\uffe5\001\002" +
    "\000\012\005\uffff\006\uffff\042\uffff\054\uffff\001\002\000" +
    "\012\005\uffe4\006\uffe4\042\uffe4\054\uffe4\001\002\000\010" +
    "\011\053\043\ufffe\054\015\001\002\000\004\054\054\001" +
    "\002\000\004\043\350\001\002\000\010\011\uffdd\043\uffdd" +
    "\054\uffdd\001\002\000\004\002\uffff\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\006\001\001\000\002\001\001\000\004\051\007" +
    "\001\001\000\004\004\010\001\001\000\014\005\012\006" +
    "\017\012\015\016\016\050\011\001\001\000\006\014\312" +
    "\015\313\001\001\000\002\001\001\000\004\022\343\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\037\001\001\000\004\050" +
    "\022\001\001\000\006\007\025\010\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\044\001\001\000\012\012\047" +
    "\021\045\023\051\050\046\001\001\000\002\001\001\000" +
    "\010\014\312\015\313\025\311\001\001\000\002\001\001" +
    "\000\004\057\306\001\001\000\002\001\001\000\004\025" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\024\060\026\057\050\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\062\001\001" +
    "\000\004\013\063\001\001\000\006\012\065\050\011\001" +
    "\001\000\004\043\066\001\001\000\002\001\001\000\014" +
    "\027\072\044\076\046\077\047\074\051\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\027\122\033\210\034\131\041\127\042" +
    "\130\001\001\000\002\001\001\000\004\062\107\001\001" +
    "\000\002\001\001\000\004\053\106\001\001\000\002\001" +
    "\001\000\004\052\110\001\001\000\002\001\001\000\004" +
    "\043\112\001\001\000\014\027\072\044\076\046\077\047" +
    "\074\051\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\027\122\030\124\031\132\032\126\033\120\034" +
    "\131\041\127\042\130\001\001\000\012\027\122\034\207" +
    "\041\127\042\130\001\001\000\002\001\001\000\004\036" +
    "\204\001\001\000\004\050\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\150\001\001\000\002\001\001" +
    "\000\004\037\143\001\001\000\002\001\001\000\014\027" +
    "\122\033\135\034\131\041\127\042\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\027" +
    "\122\032\140\033\120\034\131\041\127\042\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\027\122\041\144\042\130\001\001\000\004\040\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\122\042\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\027\122\031\154\032\126\033" +
    "\120\034\131\041\127\042\130\001\001\000\002\001\001" +
    "\000\004\053\156\001\001\000\002\001\001\000\014\027" +
    "\122\033\171\034\131\041\127\042\130\001\001\000\016" +
    "\027\122\033\163\034\131\035\164\041\127\042\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\027\122\033" +
    "\170\034\131\041\127\042\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\027\122\033\175\034\131\041\127" +
    "\042\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\027\122\033\206\034" +
    "\131\041\127\042\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\143\001\001\000\002\001\001\000" +
    "\004\053\212\001\001\000\002\001\001\000\004\053\214" +
    "\001\001\000\002\001\001\000\014\027\122\033\216\034" +
    "\131\041\127\042\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\226\001\001\000\002\001\001\000\022\027\122\030" +
    "\230\031\132\032\126\033\120\034\131\041\127\042\130" +
    "\001\001\000\002\001\001\000\014\027\072\044\233\046" +
    "\077\047\232\051\073\001\001\000\002\001\001\000\004" +
    "\053\234\001\001\000\002\001\001\000\012\027\072\046" +
    "\237\047\236\051\073\001\001\000\004\053\241\001\001" +
    "\000\004\053\240\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\243\001\001\000\016\027\072\044\076" +
    "\046\077\047\074\051\073\052\244\001\001\000\002\001" +
    "\001\000\004\055\246\001\001\000\002\001\001\000\004" +
    "\053\265\001\001\000\014\027\122\033\263\034\131\041" +
    "\127\042\130\001\001\000\002\001\001\000\004\053\261" +
    "\001\001\000\016\027\122\033\163\034\131\035\254\041" +
    "\127\042\130\001\001\000\002\001\001\000\004\054\256" +
    "\001\001\000\002\001\001\000\004\054\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\027\122\030\267\031\132\032\126\033\120\034\131" +
    "\041\127\042\130\001\001\000\002\001\001\000\012\027" +
    "\072\046\272\047\271\051\073\001\001\000\004\053\274" +
    "\001\001\000\004\053\273\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\276\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\301\001\001\000\002\001" +
    "\001\000\004\050\303\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\307\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\024\323\026\057\050" +
    "\056\001\001\000\002\001\001\000\004\051\325\001\001" +
    "\000\004\013\326\001\001\000\006\012\065\050\011\001" +
    "\001\000\004\043\330\001\001\000\014\027\072\044\076" +
    "\046\077\047\074\051\073\001\001\000\004\061\332\001" +
    "\001\000\004\052\333\001\001\000\002\001\001\000\004" +
    "\051\335\001\001\000\002\001\001\000\004\020\337\001" +
    "\001\000\012\012\047\021\045\023\051\050\046\001\001" +
    "\000\004\060\341\001\001\000\004\052\342\001\001\000" +
    "\002\001\001\000\010\023\346\050\344\056\345\001\001" +
    "\000\004\025\311\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\350\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {


	final int String = 5;
 	final int Bool = 6;
		
  	final Struct stringType = new Struct(String),
   		         boolType = new Struct(Bool);
	  
	Tab.init(); // Universe scope
	
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "string", stringType));
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "bool", boolType));

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }


	
	int printCallCount = 0;
	boolean errorDetected = false;
	Logger log = Logger.getLogger(getClass());
	
	// slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


							   
	Logger log = Logger.getLogger(getClass());
	Struct currentType;
	Boolean main = false;
	int mainStatements = 0, mainMethodCalls = 0, StatementBlocks = 0;

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Mulop ::= MOD 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Mulop ::= DIV 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Mulop ::= MUL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Addop ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Addop ::= PLUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Relop ::= GREATER_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Relop ::= GREATER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Relop ::= LESS_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Relop ::= LESS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Relop ::= NOT_EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Relop ::= EQUALS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Designator ::= IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Designator ::= Designator DOT IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Designator ::= Designator LBRACK Expr RBRACK 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Factor ::= Designator 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Factor ::= Designator LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Factor ::= Designator LPAREN ActPars RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Factor ::= NEW Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Factor ::= NEW Type LBRACK Expr RBRACK 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Factor ::= STRING 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Factor ::= BOOL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Factor ::= LPAREN Expr RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Factor ::= CHAR 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Factor ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Term ::= Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Term ::= Term Mulop Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ExprPart ::= Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprPart",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ExprPart ::= ExprPart Addop Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprPart",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= MINUS ExprPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= ExprPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CondTerm ::= CondTerm AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Condition ::= CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Condition ::= Condition OR CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ActPars ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ActPars ::= ActPars COMMA Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // StatementPart ::= LPAREN RPAREN CountMethodCalls 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementPart",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // StatementPart ::= LPAREN ActPars RPAREN CountMethodCalls 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementPart",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // StatementPart ::= DEC CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementPart",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // StatementPart ::= INC CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementPart",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // StatementPart ::= EQUAL Expr CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementPart",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CoutStatementBlocks ::= 
            {
              Object RESULT =null;
		 StatementBlocks++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CoutStatementBlocks",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CountMethodCalls ::= 
            {
              Object RESULT =null;
		 if(main)  mainMethodCalls++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CountMethodCalls",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CountStatements ::= 
            {
              Object RESULT =null;
		 if(main)  mainStatements++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CountStatements",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // StatementMatched ::= DO LBRACE StatementList RBRACE WHILE LPAREN Condition RPAREN SEMI CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // StatementMatched ::= OpenScope LBRACE StatementList CloseScope RBRACE CoutStatementBlocks 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // StatementMatched ::= RETURN Expr SEMI CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // StatementMatched ::= RETURN SEMI CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // StatementMatched ::= BREAK SEMI CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // StatementMatched ::= PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // StatementMatched ::= PRINT LPAREN Expr RPAREN SEMI CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // StatementMatched ::= READ LPAREN Designator RPAREN SEMI CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // StatementMatched ::= WHILE LPAREN Condition RPAREN StatementMatched CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // StatementMatched ::= Designator StatementPart SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // StatementMatched ::= IF LPAREN Condition RPAREN StatementMatched ELSE StatementMatched CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementMatched",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // StatementUnmatched ::= WHILE LPAREN Condition RPAREN StatementUnmatched CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // StatementUnmatched ::= IF LPAREN Condition RPAREN StatementMatched ELSE StatementUnmatched CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // StatementUnmatched ::= IF LPAREN Condition RPAREN Statement CountStatements 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementUnmatched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Statement ::= StatementMatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Statement ::= StatementUnmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FormPars ::= Type IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FormPars ::= FormPars COMMA Type IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodPars",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodPars ::= FormPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodPars",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MethodName ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			   	if (name == "main") 
			   		main = true;
			   	RESULT = Tab.insert(Obj.Meth, name, Tab.noType);
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodName",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodDecl ::= VOID MethodName LPAREN MethodPars RPAREN OpenScope VarDeclList LBRACE StatementList RBRACE NT$4 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$4 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
 Tab.chainLocalSymbols(m); main = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodDecl ::= Type MethodName LPAREN MethodPars RPAREN OpenScope VarDeclList LBRACE StatementList RBRACE NT$3 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$3 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
 Tab.chainLocalSymbols(m); main = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 	Obj typeNode = Tab.find(typeName);
			if (typeNode == Tab.noObj) {
				log.info("Nije pronadjen tip " + typeName + " u tabeli simbola");
				currentType = Tab.noType;
			}
			else {
				if (Obj.Type == typeNode.getKind()) {
					currentType = typeNode.getType();
				}
				else {
					log.error("Greska na liniji" + typeNameleft+ ": Ime " + typeName + " ne predstavlja tip ", null);
					currentType = Tab.noType;
				}
			}
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VarMethodDecl ::= MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarMethodDecl",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VarMethodDecl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarMethodDecl",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VarMethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarMethodDeclList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VarMethodDeclList ::= VarMethodDeclList VarMethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarMethodDeclList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassName ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			  	RESULT = Tab.insert(Obj.Type, name, Tab.nullType);
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassName",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassDecl ::= CLASS ClassName EXTENDS IDENT OpenScope LBRACE VarMethodDeclList RBRACE NT$2 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$2 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
 Tab.chainLocalSymbols(c); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassDecl ::= CLASS ClassName OpenScope LBRACE VarMethodDeclList RBRACE NT$1 CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$1 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
 Tab.chainLocalSymbols(c); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Var ::= IDENT LBRACK RBRACK 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
			Tab.insert(Obj.Var, name, new Struct(Struct.Array, currentType));  
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Var ::= IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			Tab.insert(Obj.Var, name, currentType);  
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarList ::= Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarList ::= VarList COMMA Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarDecl ::= Type VarList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDeclList ::= VarDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Const ::= BOOL 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = val ? 1:0; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Const ::= CHAR 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character val = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 // TODO 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Const ::= STRING 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 // TODO 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Const ::= NUMBER 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = val; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstListPart ::= IDENT EQUAL Const 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 	 	Obj con = Tab.insert(Obj.Con, name, currentType);  
		 	    con.setAdr((int)val); // U adr se pamti vrednost konstante
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstListPart",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstList ::= ConstListPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstList ::= ConstList COMMA ConstListPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDecl ::= CONST Type ConstList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclList ::= DeclList Decl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		  
				RESULT = Tab.insert(Obj.Prog, pName, Tab.noType);
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= PROG ProgName OpenScope DeclList LBRACE MethodDeclList NT$0 RBRACE CloseScope 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		
				int array_count = 0;
				int var_count = 0;
				int con_count = 0;
				
				for(Obj s : p.getLocalSymbols())
					if(s.getKind() == Obj.Var)
						if(s.getType().getKind() == Struct.Array)
							array_count++;
						else
							var_count++;
					else if(s.getKind() == Obj.Con)
						con_count++;
									
				log.info("Broj globalnih prostih promenjivih:" + var_count);
				log.info("Broj globalnih nizova:" + array_count);
				log.info("Broj globalnih konstanti:" + con_count);
				log.info("Broj iskaza u main-u:" + mainStatements);
				log.info("Broj poziva metoda u main-u:" + mainMethodCalls);
				log.info("Broj blokova naredbi:" + StatementBlocks);
				
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
 Tab.chainLocalSymbols(p); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CloseScope ::= 
            {
              Object RESULT =null;
		 Tab.closeScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CloseScope",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // OpenScope ::= 
            {
              Object RESULT =null;
		 Tab.openScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpenScope",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

